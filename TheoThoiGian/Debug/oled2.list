
oled2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083b0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c28  080084c0  080084c0  000094c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090e8  080090e8  0000b1e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080090e8  080090e8  0000a0e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090f0  080090f0  0000b1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090f0  080090f0  0000a0f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080090f4  080090f4  0000a0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  080090f8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c4  200001e4  080092dc  0000b1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008a8  080092dc  0000b8a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011728  00000000  00000000  0000b20d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028e4  00000000  00000000  0001c935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  0001f220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e26  00000000  00000000  00020400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019cf5  00000000  00000000  00021226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015238  00000000  00000000  0003af1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093f42  00000000  00000000  00050153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e4095  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e50  00000000  00000000  000e40d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000037  00000000  00000000  000e9f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	080084a8 	.word	0x080084a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	080084a8 	.word	0x080084a8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <microDelay>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void microDelay(uint16_t delay) {
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000d4e:	4b08      	ldr	r3, [pc, #32]	@ (8000d70 <microDelay+0x2c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2200      	movs	r2, #0
 8000d54:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000d56:	bf00      	nop
 8000d58:	4b05      	ldr	r3, [pc, #20]	@ (8000d70 <microDelay+0x2c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d5e:	88fb      	ldrh	r3, [r7, #6]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d3f9      	bcc.n	8000d58 <microDelay+0x14>
}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr
 8000d70:	20000284 	.word	0x20000284

08000d74 <DHT11_Start>:

uint8_t DHT11_Start(void) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pin = DHT11_PIN;
 8000d86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d8a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d90:	2302      	movs	r3, #2
 8000d92:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000d94:	463b      	mov	r3, r7
 8000d96:	4619      	mov	r1, r3
 8000d98:	481d      	ldr	r0, [pc, #116]	@ (8000e10 <DHT11_Start+0x9c>)
 8000d9a:	f001 ff55 	bl	8002c48 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000da4:	481a      	ldr	r0, [pc, #104]	@ (8000e10 <DHT11_Start+0x9c>)
 8000da6:	f002 f8ea 	bl	8002f7e <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8000daa:	2014      	movs	r0, #20
 8000dac:	f001 f93c 	bl	8002028 <HAL_Delay>
  HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1);
 8000db0:	2201      	movs	r2, #1
 8000db2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000db6:	4816      	ldr	r0, [pc, #88]	@ (8000e10 <DHT11_Start+0x9c>)
 8000db8:	f002 f8e1 	bl	8002f7e <HAL_GPIO_WritePin>
  microDelay(30);
 8000dbc:	201e      	movs	r0, #30
 8000dbe:	f7ff ffc1 	bl	8000d44 <microDelay>

  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000dca:	463b      	mov	r3, r7
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4810      	ldr	r0, [pc, #64]	@ (8000e10 <DHT11_Start+0x9c>)
 8000dd0:	f001 ff3a 	bl	8002c48 <HAL_GPIO_Init>

  microDelay(40);
 8000dd4:	2028      	movs	r0, #40	@ 0x28
 8000dd6:	f7ff ffb5 	bl	8000d44 <microDelay>
  if (!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) {
 8000dda:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dde:	480c      	ldr	r0, [pc, #48]	@ (8000e10 <DHT11_Start+0x9c>)
 8000de0:	f002 f8b6 	bl	8002f50 <HAL_GPIO_ReadPin>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d10c      	bne.n	8000e04 <DHT11_Start+0x90>
    microDelay(80);
 8000dea:	2050      	movs	r0, #80	@ 0x50
 8000dec:	f7ff ffaa 	bl	8000d44 <microDelay>
    if (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) return 1;
 8000df0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000df4:	4806      	ldr	r0, [pc, #24]	@ (8000e10 <DHT11_Start+0x9c>)
 8000df6:	f002 f8ab 	bl	8002f50 <HAL_GPIO_ReadPin>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <DHT11_Start+0x90>
 8000e00:	2301      	movs	r3, #1
 8000e02:	e000      	b.n	8000e06 <DHT11_Start+0x92>
  }
  return 0;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40010c00 	.word	0x40010c00

08000e14 <DHT11_Read>:

uint8_t DHT11_Read(void) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
  uint8_t b = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	71fb      	strb	r3, [r7, #7]
  for (int a = 0; a < 8; a++) {
 8000e1e:	2300      	movs	r3, #0
 8000e20:	603b      	str	r3, [r7, #0]
 8000e22:	e02b      	b.n	8000e7c <DHT11_Read+0x68>
    while (!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN));
 8000e24:	bf00      	nop
 8000e26:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e2a:	4818      	ldr	r0, [pc, #96]	@ (8000e8c <DHT11_Read+0x78>)
 8000e2c:	f002 f890 	bl	8002f50 <HAL_GPIO_ReadPin>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d0f7      	beq.n	8000e26 <DHT11_Read+0x12>
    microDelay(40);
 8000e36:	2028      	movs	r0, #40	@ 0x28
 8000e38:	f7ff ff84 	bl	8000d44 <microDelay>
    if (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) b |= (1 << (7 - a));
 8000e3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e40:	4812      	ldr	r0, [pc, #72]	@ (8000e8c <DHT11_Read+0x78>)
 8000e42:	f002 f885 	bl	8002f50 <HAL_GPIO_ReadPin>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d00b      	beq.n	8000e64 <DHT11_Read+0x50>
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	f1c3 0307 	rsb	r3, r3, #7
 8000e52:	2201      	movs	r2, #1
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	b25a      	sxtb	r2, r3
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	b25b      	sxtb	r3, r3
 8000e62:	71fb      	strb	r3, [r7, #7]
    while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN));
 8000e64:	bf00      	nop
 8000e66:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e6a:	4808      	ldr	r0, [pc, #32]	@ (8000e8c <DHT11_Read+0x78>)
 8000e6c:	f002 f870 	bl	8002f50 <HAL_GPIO_ReadPin>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d1f7      	bne.n	8000e66 <DHT11_Read+0x52>
  for (int a = 0; a < 8; a++) {
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	2b07      	cmp	r3, #7
 8000e80:	ddd0      	ble.n	8000e24 <DHT11_Read+0x10>
  }
  return b;
 8000e82:	79fb      	ldrb	r3, [r7, #7]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40010c00 	.word	0x40010c00

08000e90 <Read_DHT11>:

void Read_DHT11(void) {
 8000e90:	b5b0      	push	{r4, r5, r7, lr}
 8000e92:	b09e      	sub	sp, #120	@ 0x78
 8000e94:	af04      	add	r7, sp, #16
  if (DHT11_Start()) {
 8000e96:	f7ff ff6d 	bl	8000d74 <DHT11_Start>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	f000 80b0 	beq.w	8001002 <Read_DHT11+0x172>
    RHI = DHT11_Read();
 8000ea2:	f7ff ffb7 	bl	8000e14 <DHT11_Read>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b65      	ldr	r3, [pc, #404]	@ (8001040 <Read_DHT11+0x1b0>)
 8000eac:	701a      	strb	r2, [r3, #0]
    RHD = DHT11_Read();
 8000eae:	f7ff ffb1 	bl	8000e14 <DHT11_Read>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b63      	ldr	r3, [pc, #396]	@ (8001044 <Read_DHT11+0x1b4>)
 8000eb8:	701a      	strb	r2, [r3, #0]
    TCI = DHT11_Read();
 8000eba:	f7ff ffab 	bl	8000e14 <DHT11_Read>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b61      	ldr	r3, [pc, #388]	@ (8001048 <Read_DHT11+0x1b8>)
 8000ec4:	701a      	strb	r2, [r3, #0]
    TCD = DHT11_Read();
 8000ec6:	f7ff ffa5 	bl	8000e14 <DHT11_Read>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b5f      	ldr	r3, [pc, #380]	@ (800104c <Read_DHT11+0x1bc>)
 8000ed0:	701a      	strb	r2, [r3, #0]
    SUM = DHT11_Read();
 8000ed2:	f7ff ff9f 	bl	8000e14 <DHT11_Read>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b5d      	ldr	r3, [pc, #372]	@ (8001050 <Read_DHT11+0x1c0>)
 8000edc:	701a      	strb	r2, [r3, #0]

    char debug[64];
    sprintf(debug, "Raw: %d.%dC %d.%d%% SUM:%d\r\n", TCI, TCD, RHI, RHD, SUM);
 8000ede:	4b5a      	ldr	r3, [pc, #360]	@ (8001048 <Read_DHT11+0x1b8>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	461c      	mov	r4, r3
 8000ee4:	4b59      	ldr	r3, [pc, #356]	@ (800104c <Read_DHT11+0x1bc>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	461d      	mov	r5, r3
 8000eea:	4b55      	ldr	r3, [pc, #340]	@ (8001040 <Read_DHT11+0x1b0>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	4b54      	ldr	r3, [pc, #336]	@ (8001044 <Read_DHT11+0x1b4>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4b56      	ldr	r3, [pc, #344]	@ (8001050 <Read_DHT11+0x1c0>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	4638      	mov	r0, r7
 8000efc:	9302      	str	r3, [sp, #8]
 8000efe:	9101      	str	r1, [sp, #4]
 8000f00:	9200      	str	r2, [sp, #0]
 8000f02:	462b      	mov	r3, r5
 8000f04:	4622      	mov	r2, r4
 8000f06:	4953      	ldr	r1, [pc, #332]	@ (8001054 <Read_DHT11+0x1c4>)
 8000f08:	f005 f97e 	bl	8006208 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)debug, strlen(debug), 100);
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff f91e 	bl	8000150 <strlen>
 8000f14:	4603      	mov	r3, r0
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	4639      	mov	r1, r7
 8000f1a:	2364      	movs	r3, #100	@ 0x64
 8000f1c:	484e      	ldr	r0, [pc, #312]	@ (8001058 <Read_DHT11+0x1c8>)
 8000f1e:	f003 fd73 	bl	8004a08 <HAL_UART_Transmit>

    if ((RHI + RHD + TCI + TCD) == SUM) {
 8000f22:	4b47      	ldr	r3, [pc, #284]	@ (8001040 <Read_DHT11+0x1b0>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	4b46      	ldr	r3, [pc, #280]	@ (8001044 <Read_DHT11+0x1b4>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	4a46      	ldr	r2, [pc, #280]	@ (8001048 <Read_DHT11+0x1b8>)
 8000f30:	7812      	ldrb	r2, [r2, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	4a45      	ldr	r2, [pc, #276]	@ (800104c <Read_DHT11+0x1bc>)
 8000f36:	7812      	ldrb	r2, [r2, #0]
 8000f38:	4413      	add	r3, r2
 8000f3a:	4a45      	ldr	r2, [pc, #276]	@ (8001050 <Read_DHT11+0x1c0>)
 8000f3c:	7812      	ldrb	r2, [r2, #0]
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d148      	bne.n	8000fd4 <Read_DHT11+0x144>
      RH = RHI + (float)RHD / 10.0;
 8000f42:	4b3f      	ldr	r3, [pc, #252]	@ (8001040 <Read_DHT11+0x1b0>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fa5c 	bl	8000404 <__aeabi_i2d>
 8000f4c:	4604      	mov	r4, r0
 8000f4e:	460d      	mov	r5, r1
 8000f50:	4b3c      	ldr	r3, [pc, #240]	@ (8001044 <Read_DHT11+0x1b4>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fe9d 	bl	8000c94 <__aeabi_ui2f>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fa63 	bl	8000428 <__aeabi_f2d>
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	4b3d      	ldr	r3, [pc, #244]	@ (800105c <Read_DHT11+0x1cc>)
 8000f68:	f7ff fbe0 	bl	800072c <__aeabi_ddiv>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4620      	mov	r0, r4
 8000f72:	4629      	mov	r1, r5
 8000f74:	f7ff f8fa 	bl	800016c <__adddf3>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f7ff fd82 	bl	8000a88 <__aeabi_d2f>
 8000f84:	4603      	mov	r3, r0
 8000f86:	4a36      	ldr	r2, [pc, #216]	@ (8001060 <Read_DHT11+0x1d0>)
 8000f88:	6013      	str	r3, [r2, #0]
      tCelsius = TCI + (float)TCD / 10.0;
 8000f8a:	4b2f      	ldr	r3, [pc, #188]	@ (8001048 <Read_DHT11+0x1b8>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fa38 	bl	8000404 <__aeabi_i2d>
 8000f94:	4604      	mov	r4, r0
 8000f96:	460d      	mov	r5, r1
 8000f98:	4b2c      	ldr	r3, [pc, #176]	@ (800104c <Read_DHT11+0x1bc>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fe79 	bl	8000c94 <__aeabi_ui2f>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fa3f 	bl	8000428 <__aeabi_f2d>
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	4b2b      	ldr	r3, [pc, #172]	@ (800105c <Read_DHT11+0x1cc>)
 8000fb0:	f7ff fbbc 	bl	800072c <__aeabi_ddiv>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4620      	mov	r0, r4
 8000fba:	4629      	mov	r1, r5
 8000fbc:	f7ff f8d6 	bl	800016c <__adddf3>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	4610      	mov	r0, r2
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f7ff fd5e 	bl	8000a88 <__aeabi_d2f>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	4a25      	ldr	r2, [pc, #148]	@ (8001064 <Read_DHT11+0x1d4>)
 8000fd0:	6013      	str	r3, [r2, #0]
    }
  } else {
    char err[] = "DHT11 start fail\r\n";
    HAL_UART_Transmit(&huart1, (uint8_t*)err, strlen(err), HAL_MAX_DELAY);
  }
}
 8000fd2:	e030      	b.n	8001036 <Read_DHT11+0x1a6>
      char err[] = "Checksum error\r\n";
 8000fd4:	4b24      	ldr	r3, [pc, #144]	@ (8001068 <Read_DHT11+0x1d8>)
 8000fd6:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000fda:	461d      	mov	r5, r3
 8000fdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fe0:	682b      	ldr	r3, [r5, #0]
 8000fe2:	7023      	strb	r3, [r4, #0]
      HAL_UART_Transmit(&huart1, (uint8_t*)err, strlen(err), HAL_MAX_DELAY);
 8000fe4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff f8b1 	bl	8000150 <strlen>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	4817      	ldr	r0, [pc, #92]	@ (8001058 <Read_DHT11+0x1c8>)
 8000ffc:	f003 fd04 	bl	8004a08 <HAL_UART_Transmit>
}
 8001000:	e019      	b.n	8001036 <Read_DHT11+0x1a6>
    char err[] = "DHT11 start fail\r\n";
 8001002:	4b1a      	ldr	r3, [pc, #104]	@ (800106c <Read_DHT11+0x1dc>)
 8001004:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001008:	461d      	mov	r5, r3
 800100a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800100c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800100e:	682b      	ldr	r3, [r5, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	8022      	strh	r2, [r4, #0]
 8001014:	3402      	adds	r4, #2
 8001016:	0c1b      	lsrs	r3, r3, #16
 8001018:	7023      	strb	r3, [r4, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*)err, strlen(err), HAL_MAX_DELAY);
 800101a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff f896 	bl	8000150 <strlen>
 8001024:	4603      	mov	r3, r0
 8001026:	b29a      	uxth	r2, r3
 8001028:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800102c:	f04f 33ff 	mov.w	r3, #4294967295
 8001030:	4809      	ldr	r0, [pc, #36]	@ (8001058 <Read_DHT11+0x1c8>)
 8001032:	f003 fce9 	bl	8004a08 <HAL_UART_Transmit>
}
 8001036:	bf00      	nop
 8001038:	3768      	adds	r7, #104	@ 0x68
 800103a:	46bd      	mov	sp, r7
 800103c:	bdb0      	pop	{r4, r5, r7, pc}
 800103e:	bf00      	nop
 8001040:	20000314 	.word	0x20000314
 8001044:	20000315 	.word	0x20000315
 8001048:	20000316 	.word	0x20000316
 800104c:	20000317 	.word	0x20000317
 8001050:	20000318 	.word	0x20000318
 8001054:	080084c0 	.word	0x080084c0
 8001058:	200002cc 	.word	0x200002cc
 800105c:	40240000 	.word	0x40240000
 8001060:	20000320 	.word	0x20000320
 8001064:	2000031c 	.word	0x2000031c
 8001068:	080084e0 	.word	0x080084e0
 800106c:	080084f4 	.word	0x080084f4

08001070 <Read_MQ2>:

void Read_MQ2(void) {
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  HAL_ADC_Start(&hadc1);
 8001074:	4807      	ldr	r0, [pc, #28]	@ (8001094 <Read_MQ2+0x24>)
 8001076:	f001 f8d3 	bl	8002220 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 100);
 800107a:	2164      	movs	r1, #100	@ 0x64
 800107c:	4805      	ldr	r0, [pc, #20]	@ (8001094 <Read_MQ2+0x24>)
 800107e:	f001 f97d 	bl	800237c <HAL_ADC_PollForConversion>
  mq2_value = HAL_ADC_GetValue(&hadc1);
 8001082:	4804      	ldr	r0, [pc, #16]	@ (8001094 <Read_MQ2+0x24>)
 8001084:	f001 fa80 	bl	8002588 <HAL_ADC_GetValue>
 8001088:	4603      	mov	r3, r0
 800108a:	4a03      	ldr	r2, [pc, #12]	@ (8001098 <Read_MQ2+0x28>)
 800108c:	6013      	str	r3, [r2, #0]
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000200 	.word	0x20000200
 8001098:	20000324 	.word	0x20000324

0800109c <Display_Data>:

void Display_Data(void) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af00      	add	r7, sp, #0
  char line[32];
  SSD1306_Fill(SSD1306_COLOR_BLACK);
 80010a2:	2000      	movs	r0, #0
 80010a4:	f000 fb68 	bl	8001778 <SSD1306_Fill>

  SSD1306_GotoXY(0, 0);
 80010a8:	2100      	movs	r1, #0
 80010aa:	2000      	movs	r0, #0
 80010ac:	f000 fbda 	bl	8001864 <SSD1306_GotoXY>
  sprintf(line, "Temp: %.1f C", tCelsius);
 80010b0:	4b1e      	ldr	r3, [pc, #120]	@ (800112c <Display_Data+0x90>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff f9b7 	bl	8000428 <__aeabi_f2d>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4638      	mov	r0, r7
 80010c0:	491b      	ldr	r1, [pc, #108]	@ (8001130 <Display_Data+0x94>)
 80010c2:	f005 f8a1 	bl	8006208 <siprintf>
  SSD1306_Puts(line, &Font_7x10, 1);
 80010c6:	463b      	mov	r3, r7
 80010c8:	2201      	movs	r2, #1
 80010ca:	491a      	ldr	r1, [pc, #104]	@ (8001134 <Display_Data+0x98>)
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 fc5d 	bl	800198c <SSD1306_Puts>

  SSD1306_GotoXY(0, 16);
 80010d2:	2110      	movs	r1, #16
 80010d4:	2000      	movs	r0, #0
 80010d6:	f000 fbc5 	bl	8001864 <SSD1306_GotoXY>
  sprintf(line, "Humi: %.1f %%", RH);
 80010da:	4b17      	ldr	r3, [pc, #92]	@ (8001138 <Display_Data+0x9c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff f9a2 	bl	8000428 <__aeabi_f2d>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4638      	mov	r0, r7
 80010ea:	4914      	ldr	r1, [pc, #80]	@ (800113c <Display_Data+0xa0>)
 80010ec:	f005 f88c 	bl	8006208 <siprintf>
  SSD1306_Puts(line, &Font_7x10, 1);
 80010f0:	463b      	mov	r3, r7
 80010f2:	2201      	movs	r2, #1
 80010f4:	490f      	ldr	r1, [pc, #60]	@ (8001134 <Display_Data+0x98>)
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 fc48 	bl	800198c <SSD1306_Puts>

  SSD1306_GotoXY(0, 32);
 80010fc:	2120      	movs	r1, #32
 80010fe:	2000      	movs	r0, #0
 8001100:	f000 fbb0 	bl	8001864 <SSD1306_GotoXY>
  sprintf(line, "MQ2: %lu", mq2_value);
 8001104:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <Display_Data+0xa4>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	463b      	mov	r3, r7
 800110a:	490e      	ldr	r1, [pc, #56]	@ (8001144 <Display_Data+0xa8>)
 800110c:	4618      	mov	r0, r3
 800110e:	f005 f87b 	bl	8006208 <siprintf>
  SSD1306_Puts(line, &Font_7x10, 1);
 8001112:	463b      	mov	r3, r7
 8001114:	2201      	movs	r2, #1
 8001116:	4907      	ldr	r1, [pc, #28]	@ (8001134 <Display_Data+0x98>)
 8001118:	4618      	mov	r0, r3
 800111a:	f000 fc37 	bl	800198c <SSD1306_Puts>

  SSD1306_UpdateScreen();
 800111e:	f000 fafd 	bl	800171c <SSD1306_UpdateScreen>
}
 8001122:	bf00      	nop
 8001124:	3720      	adds	r7, #32
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	2000031c 	.word	0x2000031c
 8001130:	08008508 	.word	0x08008508
 8001134:	20000000 	.word	0x20000000
 8001138:	20000320 	.word	0x20000320
 800113c:	08008518 	.word	0x08008518
 8001140:	20000324 	.word	0x20000324
 8001144:	08008528 	.word	0x08008528

08001148 <UART_Send_Data>:

void UART_Send_Data(void) {
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b092      	sub	sp, #72	@ 0x48
 800114c:	af02      	add	r7, sp, #8
  char msg[64];
  sprintf(msg, "Temp: %.1f C, Humi: %.1f %%\r\n", tCelsius, RH);
 800114e:	4b1c      	ldr	r3, [pc, #112]	@ (80011c0 <UART_Send_Data+0x78>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff f968 	bl	8000428 <__aeabi_f2d>
 8001158:	4604      	mov	r4, r0
 800115a:	460d      	mov	r5, r1
 800115c:	4b19      	ldr	r3, [pc, #100]	@ (80011c4 <UART_Send_Data+0x7c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f961 	bl	8000428 <__aeabi_f2d>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4638      	mov	r0, r7
 800116c:	e9cd 2300 	strd	r2, r3, [sp]
 8001170:	4622      	mov	r2, r4
 8001172:	462b      	mov	r3, r5
 8001174:	4914      	ldr	r1, [pc, #80]	@ (80011c8 <UART_Send_Data+0x80>)
 8001176:	f005 f847 	bl	8006208 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800117a:	463b      	mov	r3, r7
 800117c:	4618      	mov	r0, r3
 800117e:	f7fe ffe7 	bl	8000150 <strlen>
 8001182:	4603      	mov	r3, r0
 8001184:	b29a      	uxth	r2, r3
 8001186:	4639      	mov	r1, r7
 8001188:	f04f 33ff 	mov.w	r3, #4294967295
 800118c:	480f      	ldr	r0, [pc, #60]	@ (80011cc <UART_Send_Data+0x84>)
 800118e:	f003 fc3b 	bl	8004a08 <HAL_UART_Transmit>
  sprintf(msg, "MQ2: %lu\r\n", mq2_value);
 8001192:	4b0f      	ldr	r3, [pc, #60]	@ (80011d0 <UART_Send_Data+0x88>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	463b      	mov	r3, r7
 8001198:	490e      	ldr	r1, [pc, #56]	@ (80011d4 <UART_Send_Data+0x8c>)
 800119a:	4618      	mov	r0, r3
 800119c:	f005 f834 	bl	8006208 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80011a0:	463b      	mov	r3, r7
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7fe ffd4 	bl	8000150 <strlen>
 80011a8:	4603      	mov	r3, r0
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	4639      	mov	r1, r7
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
 80011b2:	4806      	ldr	r0, [pc, #24]	@ (80011cc <UART_Send_Data+0x84>)
 80011b4:	f003 fc28 	bl	8004a08 <HAL_UART_Transmit>
}
 80011b8:	bf00      	nop
 80011ba:	3740      	adds	r7, #64	@ 0x40
 80011bc:	46bd      	mov	sp, r7
 80011be:	bdb0      	pop	{r4, r5, r7, pc}
 80011c0:	2000031c 	.word	0x2000031c
 80011c4:	20000320 	.word	0x20000320
 80011c8:	08008534 	.word	0x08008534
 80011cc:	200002cc 	.word	0x200002cc
 80011d0:	20000324 	.word	0x20000324
 80011d4:	08008554 	.word	0x08008554

080011d8 <UART_Check_Command>:

void UART_Check_Command(void) {
 80011d8:	b5b0      	push	{r4, r5, r7, lr}
 80011da:	b09e      	sub	sp, #120	@ 0x78
 80011dc:	af00      	add	r7, sp, #0
  uint8_t ch;
  while (HAL_UART_Receive(&huart1, &ch, 1, 1) == HAL_OK) {
 80011de:	e0b2      	b.n	8001346 <UART_Check_Command+0x16e>
    if (ch == '\r' || ch == '\n') {
 80011e0:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80011e4:	2b0d      	cmp	r3, #13
 80011e6:	d004      	beq.n	80011f2 <UART_Check_Command+0x1a>
 80011e8:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80011ec:	2b0a      	cmp	r3, #10
 80011ee:	f040 809b 	bne.w	8001328 <UART_Check_Command+0x150>
      uart_buffer[uart_index] = '\0';
 80011f2:	4b5d      	ldr	r3, [pc, #372]	@ (8001368 <UART_Check_Command+0x190>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b5c      	ldr	r3, [pc, #368]	@ (800136c <UART_Check_Command+0x194>)
 80011fa:	2100      	movs	r1, #0
 80011fc:	5499      	strb	r1, [r3, r2]

      if (strncmp((char*)uart_buffer, "OFF", 3) == 0) {
 80011fe:	2203      	movs	r2, #3
 8001200:	495b      	ldr	r1, [pc, #364]	@ (8001370 <UART_Check_Command+0x198>)
 8001202:	485a      	ldr	r0, [pc, #360]	@ (800136c <UART_Check_Command+0x194>)
 8001204:	f005 f86d 	bl	80062e2 <strncmp>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d119      	bne.n	8001242 <UART_Check_Command+0x6a>
        measure_enable = 0;
 800120e:	4b59      	ldr	r3, [pc, #356]	@ (8001374 <UART_Check_Command+0x19c>)
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
        char msg[] = "Đã tắt đo\r\n";
 8001214:	4b58      	ldr	r3, [pc, #352]	@ (8001378 <UART_Check_Command+0x1a0>)
 8001216:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 800121a:	461d      	mov	r5, r3
 800121c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800121e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001220:	682b      	ldr	r3, [r5, #0]
 8001222:	7023      	strb	r3, [r4, #0]
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001224:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001228:	4618      	mov	r0, r3
 800122a:	f7fe ff91 	bl	8000150 <strlen>
 800122e:	4603      	mov	r3, r0
 8001230:	b29a      	uxth	r2, r3
 8001232:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8001236:	f04f 33ff 	mov.w	r3, #4294967295
 800123a:	4850      	ldr	r0, [pc, #320]	@ (800137c <UART_Check_Command+0x1a4>)
 800123c:	f003 fbe4 	bl	8004a08 <HAL_UART_Transmit>
 8001240:	e069      	b.n	8001316 <UART_Check_Command+0x13e>
      } else if (strncmp((char*)uart_buffer, "ON", 2) == 0) {
 8001242:	2202      	movs	r2, #2
 8001244:	494e      	ldr	r1, [pc, #312]	@ (8001380 <UART_Check_Command+0x1a8>)
 8001246:	4849      	ldr	r0, [pc, #292]	@ (800136c <UART_Check_Command+0x194>)
 8001248:	f005 f84b 	bl	80062e2 <strncmp>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d119      	bne.n	8001286 <UART_Check_Command+0xae>
        measure_enable = 1;
 8001252:	4b48      	ldr	r3, [pc, #288]	@ (8001374 <UART_Check_Command+0x19c>)
 8001254:	2201      	movs	r2, #1
 8001256:	701a      	strb	r2, [r3, #0]
        char msg[] = "Đã bật đo\r\n";
 8001258:	4b4a      	ldr	r3, [pc, #296]	@ (8001384 <UART_Check_Command+0x1ac>)
 800125a:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 800125e:	461d      	mov	r5, r3
 8001260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001264:	682b      	ldr	r3, [r5, #0]
 8001266:	7023      	strb	r3, [r4, #0]
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001268:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800126c:	4618      	mov	r0, r3
 800126e:	f7fe ff6f 	bl	8000150 <strlen>
 8001272:	4603      	mov	r3, r0
 8001274:	b29a      	uxth	r2, r3
 8001276:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	483f      	ldr	r0, [pc, #252]	@ (800137c <UART_Check_Command+0x1a4>)
 8001280:	f003 fbc2 	bl	8004a08 <HAL_UART_Transmit>
 8001284:	e047      	b.n	8001316 <UART_Check_Command+0x13e>
      } else if (strncmp((char*)uart_buffer, "STATUS", 6) == 0) {
 8001286:	2206      	movs	r2, #6
 8001288:	493f      	ldr	r1, [pc, #252]	@ (8001388 <UART_Check_Command+0x1b0>)
 800128a:	4838      	ldr	r0, [pc, #224]	@ (800136c <UART_Check_Command+0x194>)
 800128c:	f005 f829 	bl	80062e2 <strncmp>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d102      	bne.n	800129c <UART_Check_Command+0xc4>
        UART_Send_Data();
 8001296:	f7ff ff57 	bl	8001148 <UART_Send_Data>
 800129a:	e03c      	b.n	8001316 <UART_Check_Command+0x13e>
      } else {
        uint32_t delay = atoi((char*)uart_buffer);
 800129c:	4833      	ldr	r0, [pc, #204]	@ (800136c <UART_Check_Command+0x194>)
 800129e:	f004 fa0f 	bl	80056c0 <atoi>
 80012a2:	4603      	mov	r3, r0
 80012a4:	677b      	str	r3, [r7, #116]	@ 0x74
        if (delay >= 500 && delay <= 10000) {
 80012a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80012a8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80012ac:	d31b      	bcc.n	80012e6 <UART_Check_Command+0x10e>
 80012ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80012b0:	f242 7210 	movw	r2, #10000	@ 0x2710
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d816      	bhi.n	80012e6 <UART_Check_Command+0x10e>
          read_delay = delay;
 80012b8:	4a34      	ldr	r2, [pc, #208]	@ (800138c <UART_Check_Command+0x1b4>)
 80012ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80012bc:	6013      	str	r3, [r2, #0]
          char msg[40];
          sprintf(msg, "Chu ky moi: %lu ms\r\n", read_delay);
 80012be:	4b33      	ldr	r3, [pc, #204]	@ (800138c <UART_Check_Command+0x1b4>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	4932      	ldr	r1, [pc, #200]	@ (8001390 <UART_Check_Command+0x1b8>)
 80012c6:	4618      	mov	r0, r3
 80012c8:	f004 ff9e 	bl	8006208 <siprintf>
          HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7fe ff3e 	bl	8000150 <strlen>
 80012d4:	4603      	mov	r3, r0
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	1d39      	adds	r1, r7, #4
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	4827      	ldr	r0, [pc, #156]	@ (800137c <UART_Check_Command+0x1a4>)
 80012e0:	f003 fb92 	bl	8004a08 <HAL_UART_Transmit>
        if (delay >= 500 && delay <= 10000) {
 80012e4:	e017      	b.n	8001316 <UART_Check_Command+0x13e>
        } else {
          char msg[] = "Chu ky hop le: 500-10000 ms\r\n";
 80012e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001394 <UART_Check_Command+0x1bc>)
 80012e8:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80012ec:	461d      	mov	r5, r3
 80012ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80012f6:	c407      	stmia	r4!, {r0, r1, r2}
 80012f8:	8023      	strh	r3, [r4, #0]
          HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80012fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012fe:	4618      	mov	r0, r3
 8001300:	f7fe ff26 	bl	8000150 <strlen>
 8001304:	4603      	mov	r3, r0
 8001306:	b29a      	uxth	r2, r3
 8001308:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800130c:	f04f 33ff 	mov.w	r3, #4294967295
 8001310:	481a      	ldr	r0, [pc, #104]	@ (800137c <UART_Check_Command+0x1a4>)
 8001312:	f003 fb79 	bl	8004a08 <HAL_UART_Transmit>
        }
      }

      uart_index = 0;
 8001316:	4b14      	ldr	r3, [pc, #80]	@ (8001368 <UART_Check_Command+0x190>)
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
      memset(uart_buffer, 0, sizeof(uart_buffer));
 800131c:	2220      	movs	r2, #32
 800131e:	2100      	movs	r1, #0
 8001320:	4812      	ldr	r0, [pc, #72]	@ (800136c <UART_Check_Command+0x194>)
 8001322:	f004 ffd6 	bl	80062d2 <memset>
 8001326:	e00e      	b.n	8001346 <UART_Check_Command+0x16e>
    } else if (uart_index < sizeof(uart_buffer) - 1) {
 8001328:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <UART_Check_Command+0x190>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b1e      	cmp	r3, #30
 800132e:	d80a      	bhi.n	8001346 <UART_Check_Command+0x16e>
      uart_buffer[uart_index++] = ch;
 8001330:	4b0d      	ldr	r3, [pc, #52]	@ (8001368 <UART_Check_Command+0x190>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	b2d1      	uxtb	r1, r2
 8001338:	4a0b      	ldr	r2, [pc, #44]	@ (8001368 <UART_Check_Command+0x190>)
 800133a:	7011      	strb	r1, [r2, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	f897 1073 	ldrb.w	r1, [r7, #115]	@ 0x73
 8001342:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <UART_Check_Command+0x194>)
 8001344:	5499      	strb	r1, [r3, r2]
  while (HAL_UART_Receive(&huart1, &ch, 1, 1) == HAL_OK) {
 8001346:	f107 0173 	add.w	r1, r7, #115	@ 0x73
 800134a:	2301      	movs	r3, #1
 800134c:	2201      	movs	r2, #1
 800134e:	480b      	ldr	r0, [pc, #44]	@ (800137c <UART_Check_Command+0x1a4>)
 8001350:	f003 fbe5 	bl	8004b1e <HAL_UART_Receive>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	f43f af42 	beq.w	80011e0 <UART_Check_Command+0x8>
    }
  }
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3778      	adds	r7, #120	@ 0x78
 8001362:	46bd      	mov	sp, r7
 8001364:	bdb0      	pop	{r4, r5, r7, pc}
 8001366:	bf00      	nop
 8001368:	20000348 	.word	0x20000348
 800136c:	20000328 	.word	0x20000328
 8001370:	08008560 	.word	0x08008560
 8001374:	2000000c 	.word	0x2000000c
 8001378:	08008588 	.word	0x08008588
 800137c:	200002cc 	.word	0x200002cc
 8001380:	08008564 	.word	0x08008564
 8001384:	0800859c 	.word	0x0800859c
 8001388:	08008568 	.word	0x08008568
 800138c:	20000008 	.word	0x20000008
 8001390:	08008570 	.word	0x08008570
 8001394:	080085b0 	.word	0x080085b0

08001398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800139c:	f000 fde2 	bl	8001f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a0:	f000 f828 	bl	80013f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a4:	f000 f968 	bl	8001678 <MX_GPIO_Init>
  MX_ADC1_Init();
 80013a8:	f000 f880 	bl	80014ac <MX_ADC1_Init>
  MX_I2C1_Init();
 80013ac:	f000 f8bc 	bl	8001528 <MX_I2C1_Init>
  MX_TIM1_Init();
 80013b0:	f000 f8e8 	bl	8001584 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80013b4:	f000 f936 	bl	8001624 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80013b8:	480b      	ldr	r0, [pc, #44]	@ (80013e8 <main+0x50>)
 80013ba:	f003 f861 	bl	8004480 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  UART_Check_Command();
 80013be:	f7ff ff0b 	bl	80011d8 <UART_Check_Command>

	      if (measure_enable) {
 80013c2:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <main+0x54>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d007      	beq.n	80013da <main+0x42>
	          Read_DHT11();
 80013ca:	f7ff fd61 	bl	8000e90 <Read_DHT11>
	          Read_MQ2();
 80013ce:	f7ff fe4f 	bl	8001070 <Read_MQ2>

	          Display_Data();
 80013d2:	f7ff fe63 	bl	800109c <Display_Data>
	          UART_Send_Data();
 80013d6:	f7ff feb7 	bl	8001148 <UART_Send_Data>
	      }

	      HAL_Delay(read_delay);
 80013da:	4b05      	ldr	r3, [pc, #20]	@ (80013f0 <main+0x58>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 fe22 	bl	8002028 <HAL_Delay>
	  UART_Check_Command();
 80013e4:	e7eb      	b.n	80013be <main+0x26>
 80013e6:	bf00      	nop
 80013e8:	20000284 	.word	0x20000284
 80013ec:	2000000c 	.word	0x2000000c
 80013f0:	20000008 	.word	0x20000008

080013f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b094      	sub	sp, #80	@ 0x50
 80013f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013fe:	2228      	movs	r2, #40	@ 0x28
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f004 ff65 	bl	80062d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001424:	2301      	movs	r3, #1
 8001426:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001428:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800142c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800142e:	2300      	movs	r3, #0
 8001430:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001432:	2301      	movs	r3, #1
 8001434:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001436:	2302      	movs	r3, #2
 8001438:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800143a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800143e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001440:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001444:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001446:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800144a:	4618      	mov	r0, r3
 800144c:	f002 fa4c 	bl	80038e8 <HAL_RCC_OscConfig>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001456:	f000 f95b 	bl	8001710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800145a:	230f      	movs	r3, #15
 800145c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800145e:	2302      	movs	r3, #2
 8001460:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001466:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800146a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	2102      	movs	r1, #2
 8001476:	4618      	mov	r0, r3
 8001478:	f002 fcb8 	bl	8003dec <HAL_RCC_ClockConfig>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001482:	f000 f945 	bl	8001710 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001486:	2302      	movs	r3, #2
 8001488:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800148a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800148e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	4618      	mov	r0, r3
 8001494:	f002 fe38 	bl	8004108 <HAL_RCCEx_PeriphCLKConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800149e:	f000 f937 	bl	8001710 <Error_Handler>
  }
}
 80014a2:	bf00      	nop
 80014a4:	3750      	adds	r7, #80	@ 0x50
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014bc:	4b18      	ldr	r3, [pc, #96]	@ (8001520 <MX_ADC1_Init+0x74>)
 80014be:	4a19      	ldr	r2, [pc, #100]	@ (8001524 <MX_ADC1_Init+0x78>)
 80014c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014c2:	4b17      	ldr	r3, [pc, #92]	@ (8001520 <MX_ADC1_Init+0x74>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014c8:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <MX_ADC1_Init+0x74>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014ce:	4b14      	ldr	r3, [pc, #80]	@ (8001520 <MX_ADC1_Init+0x74>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014d4:	4b12      	ldr	r3, [pc, #72]	@ (8001520 <MX_ADC1_Init+0x74>)
 80014d6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80014da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014dc:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <MX_ADC1_Init+0x74>)
 80014de:	2200      	movs	r2, #0
 80014e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80014e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001520 <MX_ADC1_Init+0x74>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014e8:	480d      	ldr	r0, [pc, #52]	@ (8001520 <MX_ADC1_Init+0x74>)
 80014ea:	f000 fdc1 	bl	8002070 <HAL_ADC_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80014f4:	f000 f90c 	bl	8001710 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014f8:	2301      	movs	r3, #1
 80014fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014fc:	2301      	movs	r3, #1
 80014fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	4619      	mov	r1, r3
 8001508:	4805      	ldr	r0, [pc, #20]	@ (8001520 <MX_ADC1_Init+0x74>)
 800150a:	f001 f849 	bl	80025a0 <HAL_ADC_ConfigChannel>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001514:	f000 f8fc 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001518:	bf00      	nop
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000200 	.word	0x20000200
 8001524:	40012400 	.word	0x40012400

08001528 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800152c:	4b12      	ldr	r3, [pc, #72]	@ (8001578 <MX_I2C1_Init+0x50>)
 800152e:	4a13      	ldr	r2, [pc, #76]	@ (800157c <MX_I2C1_Init+0x54>)
 8001530:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001532:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <MX_I2C1_Init+0x50>)
 8001534:	4a12      	ldr	r2, [pc, #72]	@ (8001580 <MX_I2C1_Init+0x58>)
 8001536:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001538:	4b0f      	ldr	r3, [pc, #60]	@ (8001578 <MX_I2C1_Init+0x50>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800153e:	4b0e      	ldr	r3, [pc, #56]	@ (8001578 <MX_I2C1_Init+0x50>)
 8001540:	2200      	movs	r2, #0
 8001542:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001544:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <MX_I2C1_Init+0x50>)
 8001546:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800154a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800154c:	4b0a      	ldr	r3, [pc, #40]	@ (8001578 <MX_I2C1_Init+0x50>)
 800154e:	2200      	movs	r2, #0
 8001550:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001552:	4b09      	ldr	r3, [pc, #36]	@ (8001578 <MX_I2C1_Init+0x50>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001558:	4b07      	ldr	r3, [pc, #28]	@ (8001578 <MX_I2C1_Init+0x50>)
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800155e:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <MX_I2C1_Init+0x50>)
 8001560:	2200      	movs	r2, #0
 8001562:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001564:	4804      	ldr	r0, [pc, #16]	@ (8001578 <MX_I2C1_Init+0x50>)
 8001566:	f001 fd23 	bl	8002fb0 <HAL_I2C_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001570:	f000 f8ce 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000230 	.word	0x20000230
 800157c:	40005400 	.word	0x40005400
 8001580:	00061a80 	.word	0x00061a80

08001584 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158a:	f107 0308 	add.w	r3, r7, #8
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001598:	463b      	mov	r3, r7
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015a0:	4b1e      	ldr	r3, [pc, #120]	@ (800161c <MX_TIM1_Init+0x98>)
 80015a2:	4a1f      	ldr	r2, [pc, #124]	@ (8001620 <MX_TIM1_Init+0x9c>)
 80015a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80015a6:	4b1d      	ldr	r3, [pc, #116]	@ (800161c <MX_TIM1_Init+0x98>)
 80015a8:	2247      	movs	r2, #71	@ 0x47
 80015aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ac:	4b1b      	ldr	r3, [pc, #108]	@ (800161c <MX_TIM1_Init+0x98>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80015b2:	4b1a      	ldr	r3, [pc, #104]	@ (800161c <MX_TIM1_Init+0x98>)
 80015b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ba:	4b18      	ldr	r3, [pc, #96]	@ (800161c <MX_TIM1_Init+0x98>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015c0:	4b16      	ldr	r3, [pc, #88]	@ (800161c <MX_TIM1_Init+0x98>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c6:	4b15      	ldr	r3, [pc, #84]	@ (800161c <MX_TIM1_Init+0x98>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015cc:	4813      	ldr	r0, [pc, #76]	@ (800161c <MX_TIM1_Init+0x98>)
 80015ce:	f002 ff07 	bl	80043e0 <HAL_TIM_Base_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80015d8:	f000 f89a 	bl	8001710 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015e2:	f107 0308 	add.w	r3, r7, #8
 80015e6:	4619      	mov	r1, r3
 80015e8:	480c      	ldr	r0, [pc, #48]	@ (800161c <MX_TIM1_Init+0x98>)
 80015ea:	f002 ff93 	bl	8004514 <HAL_TIM_ConfigClockSource>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80015f4:	f000 f88c 	bl	8001710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f8:	2300      	movs	r3, #0
 80015fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001600:	463b      	mov	r3, r7
 8001602:	4619      	mov	r1, r3
 8001604:	4805      	ldr	r0, [pc, #20]	@ (800161c <MX_TIM1_Init+0x98>)
 8001606:	f003 f951 	bl	80048ac <HAL_TIMEx_MasterConfigSynchronization>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001610:	f000 f87e 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001614:	bf00      	nop
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000284 	.word	0x20000284
 8001620:	40012c00 	.word	0x40012c00

08001624 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001628:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <MX_USART1_UART_Init+0x4c>)
 800162a:	4a12      	ldr	r2, [pc, #72]	@ (8001674 <MX_USART1_UART_Init+0x50>)
 800162c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800162e:	4b10      	ldr	r3, [pc, #64]	@ (8001670 <MX_USART1_UART_Init+0x4c>)
 8001630:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001634:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001636:	4b0e      	ldr	r3, [pc, #56]	@ (8001670 <MX_USART1_UART_Init+0x4c>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800163c:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <MX_USART1_UART_Init+0x4c>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001642:	4b0b      	ldr	r3, [pc, #44]	@ (8001670 <MX_USART1_UART_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001648:	4b09      	ldr	r3, [pc, #36]	@ (8001670 <MX_USART1_UART_Init+0x4c>)
 800164a:	220c      	movs	r2, #12
 800164c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164e:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <MX_USART1_UART_Init+0x4c>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001654:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <MX_USART1_UART_Init+0x4c>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800165a:	4805      	ldr	r0, [pc, #20]	@ (8001670 <MX_USART1_UART_Init+0x4c>)
 800165c:	f003 f984 	bl	8004968 <HAL_UART_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001666:	f000 f853 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200002cc 	.word	0x200002cc
 8001674:	40013800 	.word	0x40013800

08001678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167e:	f107 0310 	add.w	r3, r7, #16
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800168c:	4b1e      	ldr	r3, [pc, #120]	@ (8001708 <MX_GPIO_Init+0x90>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	4a1d      	ldr	r2, [pc, #116]	@ (8001708 <MX_GPIO_Init+0x90>)
 8001692:	f043 0320 	orr.w	r3, r3, #32
 8001696:	6193      	str	r3, [r2, #24]
 8001698:	4b1b      	ldr	r3, [pc, #108]	@ (8001708 <MX_GPIO_Init+0x90>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	f003 0320 	and.w	r3, r3, #32
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a4:	4b18      	ldr	r3, [pc, #96]	@ (8001708 <MX_GPIO_Init+0x90>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	4a17      	ldr	r2, [pc, #92]	@ (8001708 <MX_GPIO_Init+0x90>)
 80016aa:	f043 0304 	orr.w	r3, r3, #4
 80016ae:	6193      	str	r3, [r2, #24]
 80016b0:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <MX_GPIO_Init+0x90>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016bc:	4b12      	ldr	r3, [pc, #72]	@ (8001708 <MX_GPIO_Init+0x90>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	4a11      	ldr	r2, [pc, #68]	@ (8001708 <MX_GPIO_Init+0x90>)
 80016c2:	f043 0308 	orr.w	r3, r3, #8
 80016c6:	6193      	str	r3, [r2, #24]
 80016c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001708 <MX_GPIO_Init+0x90>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80016d4:	2200      	movs	r2, #0
 80016d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016da:	480c      	ldr	r0, [pc, #48]	@ (800170c <MX_GPIO_Init+0x94>)
 80016dc:	f001 fc4f 	bl	8002f7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2302      	movs	r3, #2
 80016f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f2:	f107 0310 	add.w	r3, r7, #16
 80016f6:	4619      	mov	r1, r3
 80016f8:	4804      	ldr	r0, [pc, #16]	@ (800170c <MX_GPIO_Init+0x94>)
 80016fa:	f001 faa5 	bl	8002c48 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80016fe:	bf00      	nop
 8001700:	3720      	adds	r7, #32
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40021000 	.word	0x40021000
 800170c:	40010c00 	.word	0x40010c00

08001710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001714:	b672      	cpsid	i
}
 8001716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <Error_Handler+0x8>

0800171c <SSD1306_UpdateScreen>:

	/* Return OK */
	return 1;
}

void SSD1306_UpdateScreen(void) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001722:	2300      	movs	r3, #0
 8001724:	71fb      	strb	r3, [r7, #7]
 8001726:	e01d      	b.n	8001764 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	3b50      	subs	r3, #80	@ 0x50
 800172c:	b2db      	uxtb	r3, r3
 800172e:	461a      	mov	r2, r3
 8001730:	2100      	movs	r1, #0
 8001732:	2078      	movs	r0, #120	@ 0x78
 8001734:	f000 f9b6 	bl	8001aa4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001738:	2200      	movs	r2, #0
 800173a:	2100      	movs	r1, #0
 800173c:	2078      	movs	r0, #120	@ 0x78
 800173e:	f000 f9b1 	bl	8001aa4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001742:	2210      	movs	r2, #16
 8001744:	2100      	movs	r1, #0
 8001746:	2078      	movs	r0, #120	@ 0x78
 8001748:	f000 f9ac 	bl	8001aa4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	01db      	lsls	r3, r3, #7
 8001750:	4a08      	ldr	r2, [pc, #32]	@ (8001774 <SSD1306_UpdateScreen+0x58>)
 8001752:	441a      	add	r2, r3
 8001754:	2380      	movs	r3, #128	@ 0x80
 8001756:	2140      	movs	r1, #64	@ 0x40
 8001758:	2078      	movs	r0, #120	@ 0x78
 800175a:	f000 f93d 	bl	80019d8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	3301      	adds	r3, #1
 8001762:	71fb      	strb	r3, [r7, #7]
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	2b07      	cmp	r3, #7
 8001768:	d9de      	bls.n	8001728 <SSD1306_UpdateScreen+0xc>
	}
}
 800176a:	bf00      	nop
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	2000034c 	.word	0x2000034c

08001778 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <SSD1306_Fill+0x14>
 8001788:	2300      	movs	r3, #0
 800178a:	e000      	b.n	800178e <SSD1306_Fill+0x16>
 800178c:	23ff      	movs	r3, #255	@ 0xff
 800178e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001792:	4619      	mov	r1, r3
 8001794:	4803      	ldr	r0, [pc, #12]	@ (80017a4 <SSD1306_Fill+0x2c>)
 8001796:	f004 fd9c 	bl	80062d2 <memset>
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	2000034c 	.word	0x2000034c

080017a8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	80fb      	strh	r3, [r7, #6]
 80017b2:	460b      	mov	r3, r1
 80017b4:	80bb      	strh	r3, [r7, #4]
 80017b6:	4613      	mov	r3, r2
 80017b8:	70fb      	strb	r3, [r7, #3]
	if (
 80017ba:	88fb      	ldrh	r3, [r7, #6]
 80017bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80017be:	d848      	bhi.n	8001852 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80017c0:	88bb      	ldrh	r3, [r7, #4]
 80017c2:	2b3f      	cmp	r3, #63	@ 0x3f
 80017c4:	d845      	bhi.n	8001852 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80017c6:	4b25      	ldr	r3, [pc, #148]	@ (800185c <SSD1306_DrawPixel+0xb4>)
 80017c8:	791b      	ldrb	r3, [r3, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d006      	beq.n	80017dc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80017ce:	78fb      	ldrb	r3, [r7, #3]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	bf0c      	ite	eq
 80017d4:	2301      	moveq	r3, #1
 80017d6:	2300      	movne	r3, #0
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d11a      	bne.n	8001818 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80017e2:	88fa      	ldrh	r2, [r7, #6]
 80017e4:	88bb      	ldrh	r3, [r7, #4]
 80017e6:	08db      	lsrs	r3, r3, #3
 80017e8:	b298      	uxth	r0, r3
 80017ea:	4603      	mov	r3, r0
 80017ec:	01db      	lsls	r3, r3, #7
 80017ee:	4413      	add	r3, r2
 80017f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001860 <SSD1306_DrawPixel+0xb8>)
 80017f2:	5cd3      	ldrb	r3, [r2, r3]
 80017f4:	b25a      	sxtb	r2, r3
 80017f6:	88bb      	ldrh	r3, [r7, #4]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	2101      	movs	r1, #1
 80017fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001802:	b25b      	sxtb	r3, r3
 8001804:	4313      	orrs	r3, r2
 8001806:	b259      	sxtb	r1, r3
 8001808:	88fa      	ldrh	r2, [r7, #6]
 800180a:	4603      	mov	r3, r0
 800180c:	01db      	lsls	r3, r3, #7
 800180e:	4413      	add	r3, r2
 8001810:	b2c9      	uxtb	r1, r1
 8001812:	4a13      	ldr	r2, [pc, #76]	@ (8001860 <SSD1306_DrawPixel+0xb8>)
 8001814:	54d1      	strb	r1, [r2, r3]
 8001816:	e01d      	b.n	8001854 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001818:	88fa      	ldrh	r2, [r7, #6]
 800181a:	88bb      	ldrh	r3, [r7, #4]
 800181c:	08db      	lsrs	r3, r3, #3
 800181e:	b298      	uxth	r0, r3
 8001820:	4603      	mov	r3, r0
 8001822:	01db      	lsls	r3, r3, #7
 8001824:	4413      	add	r3, r2
 8001826:	4a0e      	ldr	r2, [pc, #56]	@ (8001860 <SSD1306_DrawPixel+0xb8>)
 8001828:	5cd3      	ldrb	r3, [r2, r3]
 800182a:	b25a      	sxtb	r2, r3
 800182c:	88bb      	ldrh	r3, [r7, #4]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	2101      	movs	r1, #1
 8001834:	fa01 f303 	lsl.w	r3, r1, r3
 8001838:	b25b      	sxtb	r3, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	b25b      	sxtb	r3, r3
 800183e:	4013      	ands	r3, r2
 8001840:	b259      	sxtb	r1, r3
 8001842:	88fa      	ldrh	r2, [r7, #6]
 8001844:	4603      	mov	r3, r0
 8001846:	01db      	lsls	r3, r3, #7
 8001848:	4413      	add	r3, r2
 800184a:	b2c9      	uxtb	r1, r1
 800184c:	4a04      	ldr	r2, [pc, #16]	@ (8001860 <SSD1306_DrawPixel+0xb8>)
 800184e:	54d1      	strb	r1, [r2, r3]
 8001850:	e000      	b.n	8001854 <SSD1306_DrawPixel+0xac>
		return;
 8001852:	bf00      	nop
	}
}
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	2000074c 	.word	0x2000074c
 8001860:	2000034c 	.word	0x2000034c

08001864 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	460a      	mov	r2, r1
 800186e:	80fb      	strh	r3, [r7, #6]
 8001870:	4613      	mov	r3, r2
 8001872:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001874:	4a05      	ldr	r2, [pc, #20]	@ (800188c <SSD1306_GotoXY+0x28>)
 8001876:	88fb      	ldrh	r3, [r7, #6]
 8001878:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800187a:	4a04      	ldr	r2, [pc, #16]	@ (800188c <SSD1306_GotoXY+0x28>)
 800187c:	88bb      	ldrh	r3, [r7, #4]
 800187e:	8053      	strh	r3, [r2, #2]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	2000074c 	.word	0x2000074c

08001890 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	6039      	str	r1, [r7, #0]
 800189a:	71fb      	strb	r3, [r7, #7]
 800189c:	4613      	mov	r3, r2
 800189e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80018a0:	4b39      	ldr	r3, [pc, #228]	@ (8001988 <SSD1306_Putc+0xf8>)
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	4413      	add	r3, r2
	if (
 80018ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80018ae:	dc07      	bgt.n	80018c0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80018b0:	4b35      	ldr	r3, [pc, #212]	@ (8001988 <SSD1306_Putc+0xf8>)
 80018b2:	885b      	ldrh	r3, [r3, #2]
 80018b4:	461a      	mov	r2, r3
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	785b      	ldrb	r3, [r3, #1]
 80018ba:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80018bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80018be:	dd01      	ble.n	80018c4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	e05d      	b.n	8001980 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	e04b      	b.n	8001962 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	3b20      	subs	r3, #32
 80018d2:	6839      	ldr	r1, [r7, #0]
 80018d4:	7849      	ldrb	r1, [r1, #1]
 80018d6:	fb01 f303 	mul.w	r3, r1, r3
 80018da:	4619      	mov	r1, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	440b      	add	r3, r1
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	4413      	add	r3, r2
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80018e8:	2300      	movs	r3, #0
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	e030      	b.n	8001950 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d010      	beq.n	8001920 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80018fe:	4b22      	ldr	r3, [pc, #136]	@ (8001988 <SSD1306_Putc+0xf8>)
 8001900:	881a      	ldrh	r2, [r3, #0]
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	b29b      	uxth	r3, r3
 8001906:	4413      	add	r3, r2
 8001908:	b298      	uxth	r0, r3
 800190a:	4b1f      	ldr	r3, [pc, #124]	@ (8001988 <SSD1306_Putc+0xf8>)
 800190c:	885a      	ldrh	r2, [r3, #2]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	b29b      	uxth	r3, r3
 8001912:	4413      	add	r3, r2
 8001914:	b29b      	uxth	r3, r3
 8001916:	79ba      	ldrb	r2, [r7, #6]
 8001918:	4619      	mov	r1, r3
 800191a:	f7ff ff45 	bl	80017a8 <SSD1306_DrawPixel>
 800191e:	e014      	b.n	800194a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001920:	4b19      	ldr	r3, [pc, #100]	@ (8001988 <SSD1306_Putc+0xf8>)
 8001922:	881a      	ldrh	r2, [r3, #0]
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	b29b      	uxth	r3, r3
 8001928:	4413      	add	r3, r2
 800192a:	b298      	uxth	r0, r3
 800192c:	4b16      	ldr	r3, [pc, #88]	@ (8001988 <SSD1306_Putc+0xf8>)
 800192e:	885a      	ldrh	r2, [r3, #2]
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	b29b      	uxth	r3, r3
 8001934:	4413      	add	r3, r2
 8001936:	b299      	uxth	r1, r3
 8001938:	79bb      	ldrb	r3, [r7, #6]
 800193a:	2b00      	cmp	r3, #0
 800193c:	bf0c      	ite	eq
 800193e:	2301      	moveq	r3, #1
 8001940:	2300      	movne	r3, #0
 8001942:	b2db      	uxtb	r3, r3
 8001944:	461a      	mov	r2, r3
 8001946:	f7ff ff2f 	bl	80017a8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	3301      	adds	r3, #1
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	461a      	mov	r2, r3
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	4293      	cmp	r3, r2
 800195a:	d3c8      	bcc.n	80018ee <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	3301      	adds	r3, #1
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	785b      	ldrb	r3, [r3, #1]
 8001966:	461a      	mov	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	4293      	cmp	r3, r2
 800196c:	d3ad      	bcc.n	80018ca <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800196e:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <SSD1306_Putc+0xf8>)
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	7812      	ldrb	r2, [r2, #0]
 8001976:	4413      	add	r3, r2
 8001978:	b29a      	uxth	r2, r3
 800197a:	4b03      	ldr	r3, [pc, #12]	@ (8001988 <SSD1306_Putc+0xf8>)
 800197c:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800197e:	79fb      	ldrb	r3, [r7, #7]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	2000074c 	.word	0x2000074c

0800198c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	4613      	mov	r3, r2
 8001998:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800199a:	e012      	b.n	80019c2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	79fa      	ldrb	r2, [r7, #7]
 80019a2:	68b9      	ldr	r1, [r7, #8]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff73 	bl	8001890 <SSD1306_Putc>
 80019aa:	4603      	mov	r3, r0
 80019ac:	461a      	mov	r2, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d002      	beq.n	80019bc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	e008      	b.n	80019ce <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	3301      	adds	r3, #1
 80019c0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1e8      	bne.n	800199c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	781b      	ldrb	r3, [r3, #0]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80019d8:	b590      	push	{r4, r7, lr}
 80019da:	b0c7      	sub	sp, #284	@ 0x11c
 80019dc:	af02      	add	r7, sp, #8
 80019de:	4604      	mov	r4, r0
 80019e0:	4608      	mov	r0, r1
 80019e2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80019e6:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80019ea:	600a      	str	r2, [r1, #0]
 80019ec:	4619      	mov	r1, r3
 80019ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80019f2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80019f6:	4622      	mov	r2, r4
 80019f8:	701a      	strb	r2, [r3, #0]
 80019fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80019fe:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001a02:	4602      	mov	r2, r0
 8001a04:	701a      	strb	r2, [r3, #0]
 8001a06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a0a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001a0e:	460a      	mov	r2, r1
 8001a10:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001a12:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a1a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001a1e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001a22:	7812      	ldrb	r2, [r2, #0]
 8001a24:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001a2c:	e015      	b.n	8001a5a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001a2e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001a32:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001a36:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001a3a:	6812      	ldr	r2, [r2, #0]
 8001a3c:	441a      	add	r2, r3
 8001a3e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001a42:	3301      	adds	r3, #1
 8001a44:	7811      	ldrb	r1, [r2, #0]
 8001a46:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001a4a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001a4e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001a50:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001a54:	3301      	adds	r3, #1
 8001a56:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001a5a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001a64:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001a68:	8812      	ldrh	r2, [r2, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d8df      	bhi.n	8001a2e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001a6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a72:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	b299      	uxth	r1, r3
 8001a7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a7e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	3301      	adds	r3, #1
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	f107 020c 	add.w	r2, r7, #12
 8001a8c:	200a      	movs	r0, #10
 8001a8e:	9000      	str	r0, [sp, #0]
 8001a90:	4803      	ldr	r0, [pc, #12]	@ (8001aa0 <ssd1306_I2C_WriteMulti+0xc8>)
 8001a92:	f001 fbd1 	bl	8003238 <HAL_I2C_Master_Transmit>
}
 8001a96:	bf00      	nop
 8001a98:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd90      	pop	{r4, r7, pc}
 8001aa0:	20000230 	.word	0x20000230

08001aa4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af02      	add	r7, sp, #8
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
 8001aae:	460b      	mov	r3, r1
 8001ab0:	71bb      	strb	r3, [r7, #6]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001ab6:	79bb      	ldrb	r3, [r7, #6]
 8001ab8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001aba:	797b      	ldrb	r3, [r7, #5]
 8001abc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	b299      	uxth	r1, r3
 8001ac2:	f107 020c 	add.w	r2, r7, #12
 8001ac6:	230a      	movs	r3, #10
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	2302      	movs	r3, #2
 8001acc:	4803      	ldr	r0, [pc, #12]	@ (8001adc <ssd1306_I2C_Write+0x38>)
 8001ace:	f001 fbb3 	bl	8003238 <HAL_I2C_Master_Transmit>
}
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000230 	.word	0x20000230

08001ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ae6:	4b15      	ldr	r3, [pc, #84]	@ (8001b3c <HAL_MspInit+0x5c>)
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	4a14      	ldr	r2, [pc, #80]	@ (8001b3c <HAL_MspInit+0x5c>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6193      	str	r3, [r2, #24]
 8001af2:	4b12      	ldr	r3, [pc, #72]	@ (8001b3c <HAL_MspInit+0x5c>)
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001afe:	4b0f      	ldr	r3, [pc, #60]	@ (8001b3c <HAL_MspInit+0x5c>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	4a0e      	ldr	r2, [pc, #56]	@ (8001b3c <HAL_MspInit+0x5c>)
 8001b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b08:	61d3      	str	r3, [r2, #28]
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b3c <HAL_MspInit+0x5c>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b12:	607b      	str	r3, [r7, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b16:	4b0a      	ldr	r3, [pc, #40]	@ (8001b40 <HAL_MspInit+0x60>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	4a04      	ldr	r2, [pc, #16]	@ (8001b40 <HAL_MspInit+0x60>)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b32:	bf00      	nop
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40010000 	.word	0x40010000

08001b44 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 0310 	add.w	r3, r7, #16
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a14      	ldr	r2, [pc, #80]	@ (8001bb0 <HAL_ADC_MspInit+0x6c>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d121      	bne.n	8001ba8 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b64:	4b13      	ldr	r3, [pc, #76]	@ (8001bb4 <HAL_ADC_MspInit+0x70>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	4a12      	ldr	r2, [pc, #72]	@ (8001bb4 <HAL_ADC_MspInit+0x70>)
 8001b6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b6e:	6193      	str	r3, [r2, #24]
 8001b70:	4b10      	ldr	r3, [pc, #64]	@ (8001bb4 <HAL_ADC_MspInit+0x70>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb4 <HAL_ADC_MspInit+0x70>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	4a0c      	ldr	r2, [pc, #48]	@ (8001bb4 <HAL_ADC_MspInit+0x70>)
 8001b82:	f043 0304 	orr.w	r3, r3, #4
 8001b86:	6193      	str	r3, [r2, #24]
 8001b88:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb4 <HAL_ADC_MspInit+0x70>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b94:	2302      	movs	r3, #2
 8001b96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9c:	f107 0310 	add.w	r3, r7, #16
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4805      	ldr	r0, [pc, #20]	@ (8001bb8 <HAL_ADC_MspInit+0x74>)
 8001ba4:	f001 f850 	bl	8002c48 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001ba8:	bf00      	nop
 8001baa:	3720      	adds	r7, #32
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40012400 	.word	0x40012400
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40010800 	.word	0x40010800

08001bbc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 0310 	add.w	r3, r7, #16
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a15      	ldr	r2, [pc, #84]	@ (8001c2c <HAL_I2C_MspInit+0x70>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d123      	bne.n	8001c24 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bdc:	4b14      	ldr	r3, [pc, #80]	@ (8001c30 <HAL_I2C_MspInit+0x74>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	4a13      	ldr	r2, [pc, #76]	@ (8001c30 <HAL_I2C_MspInit+0x74>)
 8001be2:	f043 0308 	orr.w	r3, r3, #8
 8001be6:	6193      	str	r3, [r2, #24]
 8001be8:	4b11      	ldr	r3, [pc, #68]	@ (8001c30 <HAL_I2C_MspInit+0x74>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	f003 0308 	and.w	r3, r3, #8
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bf4:	23c0      	movs	r3, #192	@ 0xc0
 8001bf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bf8:	2312      	movs	r3, #18
 8001bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c00:	f107 0310 	add.w	r3, r7, #16
 8001c04:	4619      	mov	r1, r3
 8001c06:	480b      	ldr	r0, [pc, #44]	@ (8001c34 <HAL_I2C_MspInit+0x78>)
 8001c08:	f001 f81e 	bl	8002c48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c0c:	4b08      	ldr	r3, [pc, #32]	@ (8001c30 <HAL_I2C_MspInit+0x74>)
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	4a07      	ldr	r2, [pc, #28]	@ (8001c30 <HAL_I2C_MspInit+0x74>)
 8001c12:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c16:	61d3      	str	r3, [r2, #28]
 8001c18:	4b05      	ldr	r3, [pc, #20]	@ (8001c30 <HAL_I2C_MspInit+0x74>)
 8001c1a:	69db      	ldr	r3, [r3, #28]
 8001c1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c24:	bf00      	nop
 8001c26:	3720      	adds	r7, #32
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40005400 	.word	0x40005400
 8001c30:	40021000 	.word	0x40021000
 8001c34:	40010c00 	.word	0x40010c00

08001c38 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a09      	ldr	r2, [pc, #36]	@ (8001c6c <HAL_TIM_Base_MspInit+0x34>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d10b      	bne.n	8001c62 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c4a:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <HAL_TIM_Base_MspInit+0x38>)
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	4a08      	ldr	r2, [pc, #32]	@ (8001c70 <HAL_TIM_Base_MspInit+0x38>)
 8001c50:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c54:	6193      	str	r3, [r2, #24]
 8001c56:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <HAL_TIM_Base_MspInit+0x38>)
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001c62:	bf00      	nop
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr
 8001c6c:	40012c00 	.word	0x40012c00
 8001c70:	40021000 	.word	0x40021000

08001c74 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 0310 	add.w	r3, r7, #16
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a20      	ldr	r2, [pc, #128]	@ (8001d10 <HAL_UART_MspInit+0x9c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d139      	bne.n	8001d08 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c94:	4b1f      	ldr	r3, [pc, #124]	@ (8001d14 <HAL_UART_MspInit+0xa0>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	4a1e      	ldr	r2, [pc, #120]	@ (8001d14 <HAL_UART_MspInit+0xa0>)
 8001c9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c9e:	6193      	str	r3, [r2, #24]
 8001ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d14 <HAL_UART_MspInit+0xa0>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cac:	4b19      	ldr	r3, [pc, #100]	@ (8001d14 <HAL_UART_MspInit+0xa0>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	4a18      	ldr	r2, [pc, #96]	@ (8001d14 <HAL_UART_MspInit+0xa0>)
 8001cb2:	f043 0304 	orr.w	r3, r3, #4
 8001cb6:	6193      	str	r3, [r2, #24]
 8001cb8:	4b16      	ldr	r3, [pc, #88]	@ (8001d14 <HAL_UART_MspInit+0xa0>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cc8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd2:	f107 0310 	add.w	r3, r7, #16
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	480f      	ldr	r0, [pc, #60]	@ (8001d18 <HAL_UART_MspInit+0xa4>)
 8001cda:	f000 ffb5 	bl	8002c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ce2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cec:	f107 0310 	add.w	r3, r7, #16
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4809      	ldr	r0, [pc, #36]	@ (8001d18 <HAL_UART_MspInit+0xa4>)
 8001cf4:	f000 ffa8 	bl	8002c48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	2025      	movs	r0, #37	@ 0x25
 8001cfe:	f000 feba 	bl	8002a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d02:	2025      	movs	r0, #37	@ 0x25
 8001d04:	f000 fed3 	bl	8002aae <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001d08:	bf00      	nop
 8001d0a:	3720      	adds	r7, #32
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40013800 	.word	0x40013800
 8001d14:	40021000 	.word	0x40021000
 8001d18:	40010800 	.word	0x40010800

08001d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d20:	bf00      	nop
 8001d22:	e7fd      	b.n	8001d20 <NMI_Handler+0x4>

08001d24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d28:	bf00      	nop
 8001d2a:	e7fd      	b.n	8001d28 <HardFault_Handler+0x4>

08001d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d30:	bf00      	nop
 8001d32:	e7fd      	b.n	8001d30 <MemManage_Handler+0x4>

08001d34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d38:	bf00      	nop
 8001d3a:	e7fd      	b.n	8001d38 <BusFault_Handler+0x4>

08001d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <UsageFault_Handler+0x4>

08001d44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr

08001d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d6c:	f000 f940 	bl	8001ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d70:	bf00      	nop
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d78:	4802      	ldr	r0, [pc, #8]	@ (8001d84 <USART1_IRQHandler+0x10>)
 8001d7a:	f002 ff67 	bl	8004c4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	200002cc 	.word	0x200002cc

08001d88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return 1;
 8001d8c:	2301      	movs	r3, #1
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr

08001d96 <_kill>:

int _kill(int pid, int sig)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001da0:	f004 fafc 	bl	800639c <__errno>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2216      	movs	r2, #22
 8001da8:	601a      	str	r2, [r3, #0]
  return -1;
 8001daa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <_exit>:

void _exit (int status)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dbe:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff ffe7 	bl	8001d96 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dc8:	bf00      	nop
 8001dca:	e7fd      	b.n	8001dc8 <_exit+0x12>

08001dcc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	e00a      	b.n	8001df4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dde:	f3af 8000 	nop.w
 8001de2:	4601      	mov	r1, r0
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	1c5a      	adds	r2, r3, #1
 8001de8:	60ba      	str	r2, [r7, #8]
 8001dea:	b2ca      	uxtb	r2, r1
 8001dec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	3301      	adds	r3, #1
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	dbf0      	blt.n	8001dde <_read+0x12>
  }

  return len;
 8001dfc:	687b      	ldr	r3, [r7, #4]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b086      	sub	sp, #24
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	60f8      	str	r0, [r7, #12]
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	e009      	b.n	8001e2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	1c5a      	adds	r2, r3, #1
 8001e1c:	60ba      	str	r2, [r7, #8]
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	dbf1      	blt.n	8001e18 <_write+0x12>
  }
  return len;
 8001e34:	687b      	ldr	r3, [r7, #4]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <_close>:

int _close(int file)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr

08001e54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e64:	605a      	str	r2, [r3, #4]
  return 0;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr

08001e72 <_isatty>:

int _isatty(int file)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e7a:	2301      	movs	r3, #1
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr

08001e86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b085      	sub	sp, #20
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	60f8      	str	r0, [r7, #12]
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr
	...

08001ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ea8:	4a14      	ldr	r2, [pc, #80]	@ (8001efc <_sbrk+0x5c>)
 8001eaa:	4b15      	ldr	r3, [pc, #84]	@ (8001f00 <_sbrk+0x60>)
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eb4:	4b13      	ldr	r3, [pc, #76]	@ (8001f04 <_sbrk+0x64>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d102      	bne.n	8001ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ebc:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <_sbrk+0x64>)
 8001ebe:	4a12      	ldr	r2, [pc, #72]	@ (8001f08 <_sbrk+0x68>)
 8001ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ec2:	4b10      	ldr	r3, [pc, #64]	@ (8001f04 <_sbrk+0x64>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d207      	bcs.n	8001ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ed0:	f004 fa64 	bl	800639c <__errno>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eda:	f04f 33ff 	mov.w	r3, #4294967295
 8001ede:	e009      	b.n	8001ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ee0:	4b08      	ldr	r3, [pc, #32]	@ (8001f04 <_sbrk+0x64>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ee6:	4b07      	ldr	r3, [pc, #28]	@ (8001f04 <_sbrk+0x64>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	4a05      	ldr	r2, [pc, #20]	@ (8001f04 <_sbrk+0x64>)
 8001ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20005000 	.word	0x20005000
 8001f00:	00000400 	.word	0x00000400
 8001f04:	20000754 	.word	0x20000754
 8001f08:	200008a8 	.word	0x200008a8

08001f0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f18:	f7ff fff8 	bl	8001f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f1c:	480b      	ldr	r0, [pc, #44]	@ (8001f4c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f1e:	490c      	ldr	r1, [pc, #48]	@ (8001f50 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f20:	4a0c      	ldr	r2, [pc, #48]	@ (8001f54 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f24:	e002      	b.n	8001f2c <LoopCopyDataInit>

08001f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f2a:	3304      	adds	r3, #4

08001f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f30:	d3f9      	bcc.n	8001f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f32:	4a09      	ldr	r2, [pc, #36]	@ (8001f58 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f34:	4c09      	ldr	r4, [pc, #36]	@ (8001f5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f38:	e001      	b.n	8001f3e <LoopFillZerobss>

08001f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f3c:	3204      	adds	r2, #4

08001f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f40:	d3fb      	bcc.n	8001f3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f42:	f004 fa31 	bl	80063a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f46:	f7ff fa27 	bl	8001398 <main>
  bx lr
 8001f4a:	4770      	bx	lr
  ldr r0, =_sdata
 8001f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f50:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001f54:	080090f8 	.word	0x080090f8
  ldr r2, =_sbss
 8001f58:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001f5c:	200008a8 	.word	0x200008a8

08001f60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f60:	e7fe      	b.n	8001f60 <ADC1_2_IRQHandler>
	...

08001f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f68:	4b08      	ldr	r3, [pc, #32]	@ (8001f8c <HAL_Init+0x28>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a07      	ldr	r2, [pc, #28]	@ (8001f8c <HAL_Init+0x28>)
 8001f6e:	f043 0310 	orr.w	r3, r3, #16
 8001f72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f74:	2003      	movs	r0, #3
 8001f76:	f000 fd73 	bl	8002a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f7a:	200f      	movs	r0, #15
 8001f7c:	f000 f808 	bl	8001f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f80:	f7ff fdae 	bl	8001ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40022000 	.word	0x40022000

08001f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f98:	4b12      	ldr	r3, [pc, #72]	@ (8001fe4 <HAL_InitTick+0x54>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b12      	ldr	r3, [pc, #72]	@ (8001fe8 <HAL_InitTick+0x58>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 fd8b 	bl	8002aca <HAL_SYSTICK_Config>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e00e      	b.n	8001fdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b0f      	cmp	r3, #15
 8001fc2:	d80a      	bhi.n	8001fda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fcc:	f000 fd53 	bl	8002a76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fd0:	4a06      	ldr	r2, [pc, #24]	@ (8001fec <HAL_InitTick+0x5c>)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	e000      	b.n	8001fdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000010 	.word	0x20000010
 8001fe8:	20000018 	.word	0x20000018
 8001fec:	20000014 	.word	0x20000014

08001ff0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff4:	4b05      	ldr	r3, [pc, #20]	@ (800200c <HAL_IncTick+0x1c>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4b05      	ldr	r3, [pc, #20]	@ (8002010 <HAL_IncTick+0x20>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4413      	add	r3, r2
 8002000:	4a03      	ldr	r2, [pc, #12]	@ (8002010 <HAL_IncTick+0x20>)
 8002002:	6013      	str	r3, [r2, #0]
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr
 800200c:	20000018 	.word	0x20000018
 8002010:	20000758 	.word	0x20000758

08002014 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return uwTick;
 8002018:	4b02      	ldr	r3, [pc, #8]	@ (8002024 <HAL_GetTick+0x10>)
 800201a:	681b      	ldr	r3, [r3, #0]
}
 800201c:	4618      	mov	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr
 8002024:	20000758 	.word	0x20000758

08002028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002030:	f7ff fff0 	bl	8002014 <HAL_GetTick>
 8002034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002040:	d005      	beq.n	800204e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002042:	4b0a      	ldr	r3, [pc, #40]	@ (800206c <HAL_Delay+0x44>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	461a      	mov	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4413      	add	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800204e:	bf00      	nop
 8002050:	f7ff ffe0 	bl	8002014 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	429a      	cmp	r2, r3
 800205e:	d8f7      	bhi.n	8002050 <HAL_Delay+0x28>
  {
  }
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000018 	.word	0x20000018

08002070 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e0be      	b.n	8002210 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209c:	2b00      	cmp	r3, #0
 800209e:	d109      	bne.n	80020b4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff fd48 	bl	8001b44 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 fbc5 	bl	8002844 <ADC_ConversionStop_Disable>
 80020ba:	4603      	mov	r3, r0
 80020bc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c2:	f003 0310 	and.w	r3, r3, #16
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f040 8099 	bne.w	80021fe <HAL_ADC_Init+0x18e>
 80020cc:	7dfb      	ldrb	r3, [r7, #23]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f040 8095 	bne.w	80021fe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80020dc:	f023 0302 	bic.w	r3, r3, #2
 80020e0:	f043 0202 	orr.w	r2, r3, #2
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020f0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	7b1b      	ldrb	r3, [r3, #12]
 80020f6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020f8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002108:	d003      	beq.n	8002112 <HAL_ADC_Init+0xa2>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d102      	bne.n	8002118 <HAL_ADC_Init+0xa8>
 8002112:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002116:	e000      	b.n	800211a <HAL_ADC_Init+0xaa>
 8002118:	2300      	movs	r3, #0
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	7d1b      	ldrb	r3, [r3, #20]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d119      	bne.n	800215c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	7b1b      	ldrb	r3, [r3, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d109      	bne.n	8002144 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	3b01      	subs	r3, #1
 8002136:	035a      	lsls	r2, r3, #13
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	e00b      	b.n	800215c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002148:	f043 0220 	orr.w	r2, r3, #32
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002154:	f043 0201 	orr.w	r2, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	430a      	orrs	r2, r1
 800216e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	4b28      	ldr	r3, [pc, #160]	@ (8002218 <HAL_ADC_Init+0x1a8>)
 8002178:	4013      	ands	r3, r2
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6812      	ldr	r2, [r2, #0]
 800217e:	68b9      	ldr	r1, [r7, #8]
 8002180:	430b      	orrs	r3, r1
 8002182:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800218c:	d003      	beq.n	8002196 <HAL_ADC_Init+0x126>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d104      	bne.n	80021a0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	3b01      	subs	r3, #1
 800219c:	051b      	lsls	r3, r3, #20
 800219e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	4b18      	ldr	r3, [pc, #96]	@ (800221c <HAL_ADC_Init+0x1ac>)
 80021bc:	4013      	ands	r3, r2
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d10b      	bne.n	80021dc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ce:	f023 0303 	bic.w	r3, r3, #3
 80021d2:	f043 0201 	orr.w	r2, r3, #1
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021da:	e018      	b.n	800220e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e0:	f023 0312 	bic.w	r3, r3, #18
 80021e4:	f043 0210 	orr.w	r2, r3, #16
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f0:	f043 0201 	orr.w	r2, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021fc:	e007      	b.n	800220e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002202:	f043 0210 	orr.w	r2, r3, #16
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800220e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	ffe1f7fd 	.word	0xffe1f7fd
 800221c:	ff1f0efe 	.word	0xff1f0efe

08002220 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002228:	2300      	movs	r3, #0
 800222a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_ADC_Start+0x1a>
 8002236:	2302      	movs	r3, #2
 8002238:	e098      	b.n	800236c <HAL_ADC_Start+0x14c>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 faa4 	bl	8002790 <ADC_Enable>
 8002248:	4603      	mov	r3, r0
 800224a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	2b00      	cmp	r3, #0
 8002250:	f040 8087 	bne.w	8002362 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002258:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800225c:	f023 0301 	bic.w	r3, r3, #1
 8002260:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a41      	ldr	r2, [pc, #260]	@ (8002374 <HAL_ADC_Start+0x154>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d105      	bne.n	800227e <HAL_ADC_Start+0x5e>
 8002272:	4b41      	ldr	r3, [pc, #260]	@ (8002378 <HAL_ADC_Start+0x158>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d115      	bne.n	80022aa <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002282:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002294:	2b00      	cmp	r3, #0
 8002296:	d026      	beq.n	80022e6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800229c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80022a0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022a8:	e01d      	b.n	80022e6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a2f      	ldr	r2, [pc, #188]	@ (8002378 <HAL_ADC_Start+0x158>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d004      	beq.n	80022ca <HAL_ADC_Start+0xaa>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002374 <HAL_ADC_Start+0x154>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d10d      	bne.n	80022e6 <HAL_ADC_Start+0xc6>
 80022ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002378 <HAL_ADC_Start+0x158>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d007      	beq.n	80022e6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022da:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80022de:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d006      	beq.n	8002300 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f6:	f023 0206 	bic.w	r2, r3, #6
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80022fe:	e002      	b.n	8002306 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f06f 0202 	mvn.w	r2, #2
 8002316:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002322:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002326:	d113      	bne.n	8002350 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800232c:	4a11      	ldr	r2, [pc, #68]	@ (8002374 <HAL_ADC_Start+0x154>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d105      	bne.n	800233e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002332:	4b11      	ldr	r3, [pc, #68]	@ (8002378 <HAL_ADC_Start+0x158>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800233a:	2b00      	cmp	r3, #0
 800233c:	d108      	bne.n	8002350 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800234c:	609a      	str	r2, [r3, #8]
 800234e:	e00c      	b.n	800236a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	e003      	b.n	800236a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800236a:	7bfb      	ldrb	r3, [r7, #15]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40012800 	.word	0x40012800
 8002378:	40012400 	.word	0x40012400

0800237c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800237c:	b590      	push	{r4, r7, lr}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002392:	f7ff fe3f 	bl	8002014 <HAL_GetTick>
 8002396:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00b      	beq.n	80023be <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023aa:	f043 0220 	orr.w	r2, r3, #32
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e0d3      	b.n	8002566 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d131      	bne.n	8002430 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d12a      	bne.n	8002430 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80023da:	e021      	b.n	8002420 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e2:	d01d      	beq.n	8002420 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d007      	beq.n	80023fa <HAL_ADC_PollForConversion+0x7e>
 80023ea:	f7ff fe13 	bl	8002014 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d212      	bcs.n	8002420 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10b      	bne.n	8002420 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240c:	f043 0204 	orr.w	r2, r3, #4
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e0a2      	b.n	8002566 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0d6      	beq.n	80023dc <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800242e:	e070      	b.n	8002512 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002430:	4b4f      	ldr	r3, [pc, #316]	@ (8002570 <HAL_ADC_PollForConversion+0x1f4>)
 8002432:	681c      	ldr	r4, [r3, #0]
 8002434:	2002      	movs	r0, #2
 8002436:	f001 ff1d 	bl	8004274 <HAL_RCCEx_GetPeriphCLKFreq>
 800243a:	4603      	mov	r3, r0
 800243c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6919      	ldr	r1, [r3, #16]
 8002446:	4b4b      	ldr	r3, [pc, #300]	@ (8002574 <HAL_ADC_PollForConversion+0x1f8>)
 8002448:	400b      	ands	r3, r1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d118      	bne.n	8002480 <HAL_ADC_PollForConversion+0x104>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68d9      	ldr	r1, [r3, #12]
 8002454:	4b48      	ldr	r3, [pc, #288]	@ (8002578 <HAL_ADC_PollForConversion+0x1fc>)
 8002456:	400b      	ands	r3, r1
 8002458:	2b00      	cmp	r3, #0
 800245a:	d111      	bne.n	8002480 <HAL_ADC_PollForConversion+0x104>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6919      	ldr	r1, [r3, #16]
 8002462:	4b46      	ldr	r3, [pc, #280]	@ (800257c <HAL_ADC_PollForConversion+0x200>)
 8002464:	400b      	ands	r3, r1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d108      	bne.n	800247c <HAL_ADC_PollForConversion+0x100>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68d9      	ldr	r1, [r3, #12]
 8002470:	4b43      	ldr	r3, [pc, #268]	@ (8002580 <HAL_ADC_PollForConversion+0x204>)
 8002472:	400b      	ands	r3, r1
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_ADC_PollForConversion+0x100>
 8002478:	2314      	movs	r3, #20
 800247a:	e020      	b.n	80024be <HAL_ADC_PollForConversion+0x142>
 800247c:	2329      	movs	r3, #41	@ 0x29
 800247e:	e01e      	b.n	80024be <HAL_ADC_PollForConversion+0x142>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6919      	ldr	r1, [r3, #16]
 8002486:	4b3d      	ldr	r3, [pc, #244]	@ (800257c <HAL_ADC_PollForConversion+0x200>)
 8002488:	400b      	ands	r3, r1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d106      	bne.n	800249c <HAL_ADC_PollForConversion+0x120>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68d9      	ldr	r1, [r3, #12]
 8002494:	4b3a      	ldr	r3, [pc, #232]	@ (8002580 <HAL_ADC_PollForConversion+0x204>)
 8002496:	400b      	ands	r3, r1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00d      	beq.n	80024b8 <HAL_ADC_PollForConversion+0x13c>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6919      	ldr	r1, [r3, #16]
 80024a2:	4b38      	ldr	r3, [pc, #224]	@ (8002584 <HAL_ADC_PollForConversion+0x208>)
 80024a4:	400b      	ands	r3, r1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d108      	bne.n	80024bc <HAL_ADC_PollForConversion+0x140>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68d9      	ldr	r1, [r3, #12]
 80024b0:	4b34      	ldr	r3, [pc, #208]	@ (8002584 <HAL_ADC_PollForConversion+0x208>)
 80024b2:	400b      	ands	r3, r1
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_ADC_PollForConversion+0x140>
 80024b8:	2354      	movs	r3, #84	@ 0x54
 80024ba:	e000      	b.n	80024be <HAL_ADC_PollForConversion+0x142>
 80024bc:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80024be:	fb02 f303 	mul.w	r3, r2, r3
 80024c2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80024c4:	e021      	b.n	800250a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024cc:	d01a      	beq.n	8002504 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d007      	beq.n	80024e4 <HAL_ADC_PollForConversion+0x168>
 80024d4:	f7ff fd9e 	bl	8002014 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d20f      	bcs.n	8002504 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d90b      	bls.n	8002504 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f0:	f043 0204 	orr.w	r2, r3, #4
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e030      	b.n	8002566 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	3301      	adds	r3, #1
 8002508:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	429a      	cmp	r2, r3
 8002510:	d8d9      	bhi.n	80024c6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f06f 0212 	mvn.w	r2, #18
 800251a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002520:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002532:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002536:	d115      	bne.n	8002564 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800253c:	2b00      	cmp	r3, #0
 800253e:	d111      	bne.n	8002564 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002544:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002550:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d105      	bne.n	8002564 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255c:	f043 0201 	orr.w	r2, r3, #1
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	371c      	adds	r7, #28
 800256a:	46bd      	mov	sp, r7
 800256c:	bd90      	pop	{r4, r7, pc}
 800256e:	bf00      	nop
 8002570:	20000010 	.word	0x20000010
 8002574:	24924924 	.word	0x24924924
 8002578:	00924924 	.word	0x00924924
 800257c:	12492492 	.word	0x12492492
 8002580:	00492492 	.word	0x00492492
 8002584:	00249249 	.word	0x00249249

08002588 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr

080025a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x20>
 80025bc:	2302      	movs	r3, #2
 80025be:	e0dc      	b.n	800277a <HAL_ADC_ConfigChannel+0x1da>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b06      	cmp	r3, #6
 80025ce:	d81c      	bhi.n	800260a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	3b05      	subs	r3, #5
 80025e2:	221f      	movs	r2, #31
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	4019      	ands	r1, r3
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	6818      	ldr	r0, [r3, #0]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	3b05      	subs	r3, #5
 80025fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	635a      	str	r2, [r3, #52]	@ 0x34
 8002608:	e03c      	b.n	8002684 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b0c      	cmp	r3, #12
 8002610:	d81c      	bhi.n	800264c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	3b23      	subs	r3, #35	@ 0x23
 8002624:	221f      	movs	r2, #31
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43db      	mvns	r3, r3
 800262c:	4019      	ands	r1, r3
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	4613      	mov	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	3b23      	subs	r3, #35	@ 0x23
 800263e:	fa00 f203 	lsl.w	r2, r0, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	631a      	str	r2, [r3, #48]	@ 0x30
 800264a:	e01b      	b.n	8002684 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	3b41      	subs	r3, #65	@ 0x41
 800265e:	221f      	movs	r2, #31
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	4019      	ands	r1, r3
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	6818      	ldr	r0, [r3, #0]
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	3b41      	subs	r3, #65	@ 0x41
 8002678:	fa00 f203 	lsl.w	r2, r0, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b09      	cmp	r3, #9
 800268a:	d91c      	bls.n	80026c6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68d9      	ldr	r1, [r3, #12]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	4613      	mov	r3, r2
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	4413      	add	r3, r2
 800269c:	3b1e      	subs	r3, #30
 800269e:	2207      	movs	r2, #7
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	4019      	ands	r1, r3
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	6898      	ldr	r0, [r3, #8]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4613      	mov	r3, r2
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	4413      	add	r3, r2
 80026b6:	3b1e      	subs	r3, #30
 80026b8:	fa00 f203 	lsl.w	r2, r0, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	60da      	str	r2, [r3, #12]
 80026c4:	e019      	b.n	80026fa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6919      	ldr	r1, [r3, #16]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4613      	mov	r3, r2
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	4413      	add	r3, r2
 80026d6:	2207      	movs	r2, #7
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	4019      	ands	r1, r3
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	6898      	ldr	r0, [r3, #8]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	4613      	mov	r3, r2
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	4413      	add	r3, r2
 80026ee:	fa00 f203 	lsl.w	r2, r0, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2b10      	cmp	r3, #16
 8002700:	d003      	beq.n	800270a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002706:	2b11      	cmp	r3, #17
 8002708:	d132      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a1d      	ldr	r2, [pc, #116]	@ (8002784 <HAL_ADC_ConfigChannel+0x1e4>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d125      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d126      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002730:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2b10      	cmp	r3, #16
 8002738:	d11a      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800273a:	4b13      	ldr	r3, [pc, #76]	@ (8002788 <HAL_ADC_ConfigChannel+0x1e8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a13      	ldr	r2, [pc, #76]	@ (800278c <HAL_ADC_ConfigChannel+0x1ec>)
 8002740:	fba2 2303 	umull	r2, r3, r2, r3
 8002744:	0c9a      	lsrs	r2, r3, #18
 8002746:	4613      	mov	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002750:	e002      	b.n	8002758 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	3b01      	subs	r3, #1
 8002756:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f9      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x1b2>
 800275e:	e007      	b.n	8002770 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002764:	f043 0220 	orr.w	r2, r3, #32
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002778:	7bfb      	ldrb	r3, [r7, #15]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr
 8002784:	40012400 	.word	0x40012400
 8002788:	20000010 	.word	0x20000010
 800278c:	431bde83 	.word	0x431bde83

08002790 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d040      	beq.n	8002830 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f042 0201 	orr.w	r2, r2, #1
 80027bc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027be:	4b1f      	ldr	r3, [pc, #124]	@ (800283c <ADC_Enable+0xac>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002840 <ADC_Enable+0xb0>)
 80027c4:	fba2 2303 	umull	r2, r3, r2, r3
 80027c8:	0c9b      	lsrs	r3, r3, #18
 80027ca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027cc:	e002      	b.n	80027d4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	3b01      	subs	r3, #1
 80027d2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f9      	bne.n	80027ce <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027da:	f7ff fc1b 	bl	8002014 <HAL_GetTick>
 80027de:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80027e0:	e01f      	b.n	8002822 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027e2:	f7ff fc17 	bl	8002014 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d918      	bls.n	8002822 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d011      	beq.n	8002822 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002802:	f043 0210 	orr.w	r2, r3, #16
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800280e:	f043 0201 	orr.w	r2, r3, #1
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e007      	b.n	8002832 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b01      	cmp	r3, #1
 800282e:	d1d8      	bne.n	80027e2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20000010 	.word	0x20000010
 8002840:	431bde83 	.word	0x431bde83

08002844 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b01      	cmp	r3, #1
 800285c:	d12e      	bne.n	80028bc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0201 	bic.w	r2, r2, #1
 800286c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800286e:	f7ff fbd1 	bl	8002014 <HAL_GetTick>
 8002872:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002874:	e01b      	b.n	80028ae <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002876:	f7ff fbcd 	bl	8002014 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d914      	bls.n	80028ae <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b01      	cmp	r3, #1
 8002890:	d10d      	bne.n	80028ae <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002896:	f043 0210 	orr.w	r2, r3, #16
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a2:	f043 0201 	orr.w	r2, r3, #1
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e007      	b.n	80028be <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d0dc      	beq.n	8002876 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028d8:	4b0c      	ldr	r3, [pc, #48]	@ (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028e4:	4013      	ands	r3, r2
 80028e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028fa:	4a04      	ldr	r2, [pc, #16]	@ (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	60d3      	str	r3, [r2, #12]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002914:	4b04      	ldr	r3, [pc, #16]	@ (8002928 <__NVIC_GetPriorityGrouping+0x18>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	0a1b      	lsrs	r3, r3, #8
 800291a:	f003 0307 	and.w	r3, r3, #7
}
 800291e:	4618      	mov	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	2b00      	cmp	r3, #0
 800293c:	db0b      	blt.n	8002956 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	f003 021f 	and.w	r2, r3, #31
 8002944:	4906      	ldr	r1, [pc, #24]	@ (8002960 <__NVIC_EnableIRQ+0x34>)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	095b      	lsrs	r3, r3, #5
 800294c:	2001      	movs	r0, #1
 800294e:	fa00 f202 	lsl.w	r2, r0, r2
 8002952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	e000e100 	.word	0xe000e100

08002964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	6039      	str	r1, [r7, #0]
 800296e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002974:	2b00      	cmp	r3, #0
 8002976:	db0a      	blt.n	800298e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	b2da      	uxtb	r2, r3
 800297c:	490c      	ldr	r1, [pc, #48]	@ (80029b0 <__NVIC_SetPriority+0x4c>)
 800297e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002982:	0112      	lsls	r2, r2, #4
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	440b      	add	r3, r1
 8002988:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800298c:	e00a      	b.n	80029a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	b2da      	uxtb	r2, r3
 8002992:	4908      	ldr	r1, [pc, #32]	@ (80029b4 <__NVIC_SetPriority+0x50>)
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	3b04      	subs	r3, #4
 800299c:	0112      	lsls	r2, r2, #4
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	440b      	add	r3, r1
 80029a2:	761a      	strb	r2, [r3, #24]
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	e000e100 	.word	0xe000e100
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b089      	sub	sp, #36	@ 0x24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f1c3 0307 	rsb	r3, r3, #7
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	bf28      	it	cs
 80029d6:	2304      	movcs	r3, #4
 80029d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	3304      	adds	r3, #4
 80029de:	2b06      	cmp	r3, #6
 80029e0:	d902      	bls.n	80029e8 <NVIC_EncodePriority+0x30>
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3b03      	subs	r3, #3
 80029e6:	e000      	b.n	80029ea <NVIC_EncodePriority+0x32>
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ec:	f04f 32ff 	mov.w	r2, #4294967295
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43da      	mvns	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	401a      	ands	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a00:	f04f 31ff 	mov.w	r1, #4294967295
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0a:	43d9      	mvns	r1, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a10:	4313      	orrs	r3, r2
         );
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3724      	adds	r7, #36	@ 0x24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr

08002a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a2c:	d301      	bcc.n	8002a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e00f      	b.n	8002a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a32:	4a0a      	ldr	r2, [pc, #40]	@ (8002a5c <SysTick_Config+0x40>)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a3a:	210f      	movs	r1, #15
 8002a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a40:	f7ff ff90 	bl	8002964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a44:	4b05      	ldr	r3, [pc, #20]	@ (8002a5c <SysTick_Config+0x40>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a4a:	4b04      	ldr	r3, [pc, #16]	@ (8002a5c <SysTick_Config+0x40>)
 8002a4c:	2207      	movs	r2, #7
 8002a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	e000e010 	.word	0xe000e010

08002a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff ff2d 	bl	80028c8 <__NVIC_SetPriorityGrouping>
}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b086      	sub	sp, #24
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
 8002a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a88:	f7ff ff42 	bl	8002910 <__NVIC_GetPriorityGrouping>
 8002a8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	68b9      	ldr	r1, [r7, #8]
 8002a92:	6978      	ldr	r0, [r7, #20]
 8002a94:	f7ff ff90 	bl	80029b8 <NVIC_EncodePriority>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff5f 	bl	8002964 <__NVIC_SetPriority>
}
 8002aa6:	bf00      	nop
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff ff35 	bl	800292c <__NVIC_EnableIRQ>
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff ffa2 	bl	8002a1c <SysTick_Config>
 8002ad8:	4603      	mov	r3, r0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b085      	sub	sp, #20
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d008      	beq.n	8002b0c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2204      	movs	r2, #4
 8002afe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e020      	b.n	8002b4e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 020e 	bic.w	r2, r2, #14
 8002b1a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0201 	bic.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b34:	2101      	movs	r1, #1
 8002b36:	fa01 f202 	lsl.w	r2, r1, r2
 8002b3a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d005      	beq.n	8002b7c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2204      	movs	r2, #4
 8002b74:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	73fb      	strb	r3, [r7, #15]
 8002b7a:	e051      	b.n	8002c20 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 020e 	bic.w	r2, r2, #14
 8002b8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0201 	bic.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a22      	ldr	r2, [pc, #136]	@ (8002c2c <HAL_DMA_Abort_IT+0xd4>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d029      	beq.n	8002bfa <HAL_DMA_Abort_IT+0xa2>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a21      	ldr	r2, [pc, #132]	@ (8002c30 <HAL_DMA_Abort_IT+0xd8>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d022      	beq.n	8002bf6 <HAL_DMA_Abort_IT+0x9e>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a1f      	ldr	r2, [pc, #124]	@ (8002c34 <HAL_DMA_Abort_IT+0xdc>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d01a      	beq.n	8002bf0 <HAL_DMA_Abort_IT+0x98>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a1e      	ldr	r2, [pc, #120]	@ (8002c38 <HAL_DMA_Abort_IT+0xe0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d012      	beq.n	8002bea <HAL_DMA_Abort_IT+0x92>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8002c3c <HAL_DMA_Abort_IT+0xe4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d00a      	beq.n	8002be4 <HAL_DMA_Abort_IT+0x8c>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c40 <HAL_DMA_Abort_IT+0xe8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d102      	bne.n	8002bde <HAL_DMA_Abort_IT+0x86>
 8002bd8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002bdc:	e00e      	b.n	8002bfc <HAL_DMA_Abort_IT+0xa4>
 8002bde:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002be2:	e00b      	b.n	8002bfc <HAL_DMA_Abort_IT+0xa4>
 8002be4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002be8:	e008      	b.n	8002bfc <HAL_DMA_Abort_IT+0xa4>
 8002bea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bee:	e005      	b.n	8002bfc <HAL_DMA_Abort_IT+0xa4>
 8002bf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bf4:	e002      	b.n	8002bfc <HAL_DMA_Abort_IT+0xa4>
 8002bf6:	2310      	movs	r3, #16
 8002bf8:	e000      	b.n	8002bfc <HAL_DMA_Abort_IT+0xa4>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	4a11      	ldr	r2, [pc, #68]	@ (8002c44 <HAL_DMA_Abort_IT+0xec>)
 8002bfe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	4798      	blx	r3
    } 
  }
  return status;
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40020008 	.word	0x40020008
 8002c30:	4002001c 	.word	0x4002001c
 8002c34:	40020030 	.word	0x40020030
 8002c38:	40020044 	.word	0x40020044
 8002c3c:	40020058 	.word	0x40020058
 8002c40:	4002006c 	.word	0x4002006c
 8002c44:	40020000 	.word	0x40020000

08002c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b08b      	sub	sp, #44	@ 0x2c
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c52:	2300      	movs	r3, #0
 8002c54:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c56:	2300      	movs	r3, #0
 8002c58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c5a:	e169      	b.n	8002f30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	69fa      	ldr	r2, [r7, #28]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	f040 8158 	bne.w	8002f2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	4a9a      	ldr	r2, [pc, #616]	@ (8002ee8 <HAL_GPIO_Init+0x2a0>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d05e      	beq.n	8002d42 <HAL_GPIO_Init+0xfa>
 8002c84:	4a98      	ldr	r2, [pc, #608]	@ (8002ee8 <HAL_GPIO_Init+0x2a0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d875      	bhi.n	8002d76 <HAL_GPIO_Init+0x12e>
 8002c8a:	4a98      	ldr	r2, [pc, #608]	@ (8002eec <HAL_GPIO_Init+0x2a4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d058      	beq.n	8002d42 <HAL_GPIO_Init+0xfa>
 8002c90:	4a96      	ldr	r2, [pc, #600]	@ (8002eec <HAL_GPIO_Init+0x2a4>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d86f      	bhi.n	8002d76 <HAL_GPIO_Init+0x12e>
 8002c96:	4a96      	ldr	r2, [pc, #600]	@ (8002ef0 <HAL_GPIO_Init+0x2a8>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d052      	beq.n	8002d42 <HAL_GPIO_Init+0xfa>
 8002c9c:	4a94      	ldr	r2, [pc, #592]	@ (8002ef0 <HAL_GPIO_Init+0x2a8>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d869      	bhi.n	8002d76 <HAL_GPIO_Init+0x12e>
 8002ca2:	4a94      	ldr	r2, [pc, #592]	@ (8002ef4 <HAL_GPIO_Init+0x2ac>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d04c      	beq.n	8002d42 <HAL_GPIO_Init+0xfa>
 8002ca8:	4a92      	ldr	r2, [pc, #584]	@ (8002ef4 <HAL_GPIO_Init+0x2ac>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d863      	bhi.n	8002d76 <HAL_GPIO_Init+0x12e>
 8002cae:	4a92      	ldr	r2, [pc, #584]	@ (8002ef8 <HAL_GPIO_Init+0x2b0>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d046      	beq.n	8002d42 <HAL_GPIO_Init+0xfa>
 8002cb4:	4a90      	ldr	r2, [pc, #576]	@ (8002ef8 <HAL_GPIO_Init+0x2b0>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d85d      	bhi.n	8002d76 <HAL_GPIO_Init+0x12e>
 8002cba:	2b12      	cmp	r3, #18
 8002cbc:	d82a      	bhi.n	8002d14 <HAL_GPIO_Init+0xcc>
 8002cbe:	2b12      	cmp	r3, #18
 8002cc0:	d859      	bhi.n	8002d76 <HAL_GPIO_Init+0x12e>
 8002cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8002cc8 <HAL_GPIO_Init+0x80>)
 8002cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc8:	08002d43 	.word	0x08002d43
 8002ccc:	08002d1d 	.word	0x08002d1d
 8002cd0:	08002d2f 	.word	0x08002d2f
 8002cd4:	08002d71 	.word	0x08002d71
 8002cd8:	08002d77 	.word	0x08002d77
 8002cdc:	08002d77 	.word	0x08002d77
 8002ce0:	08002d77 	.word	0x08002d77
 8002ce4:	08002d77 	.word	0x08002d77
 8002ce8:	08002d77 	.word	0x08002d77
 8002cec:	08002d77 	.word	0x08002d77
 8002cf0:	08002d77 	.word	0x08002d77
 8002cf4:	08002d77 	.word	0x08002d77
 8002cf8:	08002d77 	.word	0x08002d77
 8002cfc:	08002d77 	.word	0x08002d77
 8002d00:	08002d77 	.word	0x08002d77
 8002d04:	08002d77 	.word	0x08002d77
 8002d08:	08002d77 	.word	0x08002d77
 8002d0c:	08002d25 	.word	0x08002d25
 8002d10:	08002d39 	.word	0x08002d39
 8002d14:	4a79      	ldr	r2, [pc, #484]	@ (8002efc <HAL_GPIO_Init+0x2b4>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d013      	beq.n	8002d42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d1a:	e02c      	b.n	8002d76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	623b      	str	r3, [r7, #32]
          break;
 8002d22:	e029      	b.n	8002d78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	623b      	str	r3, [r7, #32]
          break;
 8002d2c:	e024      	b.n	8002d78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	3308      	adds	r3, #8
 8002d34:	623b      	str	r3, [r7, #32]
          break;
 8002d36:	e01f      	b.n	8002d78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	330c      	adds	r3, #12
 8002d3e:	623b      	str	r3, [r7, #32]
          break;
 8002d40:	e01a      	b.n	8002d78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d102      	bne.n	8002d50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d4a:	2304      	movs	r3, #4
 8002d4c:	623b      	str	r3, [r7, #32]
          break;
 8002d4e:	e013      	b.n	8002d78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d105      	bne.n	8002d64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d58:	2308      	movs	r3, #8
 8002d5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	611a      	str	r2, [r3, #16]
          break;
 8002d62:	e009      	b.n	8002d78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d64:	2308      	movs	r3, #8
 8002d66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	69fa      	ldr	r2, [r7, #28]
 8002d6c:	615a      	str	r2, [r3, #20]
          break;
 8002d6e:	e003      	b.n	8002d78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d70:	2300      	movs	r3, #0
 8002d72:	623b      	str	r3, [r7, #32]
          break;
 8002d74:	e000      	b.n	8002d78 <HAL_GPIO_Init+0x130>
          break;
 8002d76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	2bff      	cmp	r3, #255	@ 0xff
 8002d7c:	d801      	bhi.n	8002d82 <HAL_GPIO_Init+0x13a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	e001      	b.n	8002d86 <HAL_GPIO_Init+0x13e>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3304      	adds	r3, #4
 8002d86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	2bff      	cmp	r3, #255	@ 0xff
 8002d8c:	d802      	bhi.n	8002d94 <HAL_GPIO_Init+0x14c>
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	e002      	b.n	8002d9a <HAL_GPIO_Init+0x152>
 8002d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d96:	3b08      	subs	r3, #8
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	210f      	movs	r1, #15
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	fa01 f303 	lsl.w	r3, r1, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	401a      	ands	r2, r3
 8002dac:	6a39      	ldr	r1, [r7, #32]
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	fa01 f303 	lsl.w	r3, r1, r3
 8002db4:	431a      	orrs	r2, r3
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 80b1 	beq.w	8002f2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002dc8:	4b4d      	ldr	r3, [pc, #308]	@ (8002f00 <HAL_GPIO_Init+0x2b8>)
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	4a4c      	ldr	r2, [pc, #304]	@ (8002f00 <HAL_GPIO_Init+0x2b8>)
 8002dce:	f043 0301 	orr.w	r3, r3, #1
 8002dd2:	6193      	str	r3, [r2, #24]
 8002dd4:	4b4a      	ldr	r3, [pc, #296]	@ (8002f00 <HAL_GPIO_Init+0x2b8>)
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	60bb      	str	r3, [r7, #8]
 8002dde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002de0:	4a48      	ldr	r2, [pc, #288]	@ (8002f04 <HAL_GPIO_Init+0x2bc>)
 8002de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de4:	089b      	lsrs	r3, r3, #2
 8002de6:	3302      	adds	r3, #2
 8002de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df0:	f003 0303 	and.w	r3, r3, #3
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	220f      	movs	r2, #15
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	4013      	ands	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a40      	ldr	r2, [pc, #256]	@ (8002f08 <HAL_GPIO_Init+0x2c0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d013      	beq.n	8002e34 <HAL_GPIO_Init+0x1ec>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a3f      	ldr	r2, [pc, #252]	@ (8002f0c <HAL_GPIO_Init+0x2c4>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d00d      	beq.n	8002e30 <HAL_GPIO_Init+0x1e8>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a3e      	ldr	r2, [pc, #248]	@ (8002f10 <HAL_GPIO_Init+0x2c8>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d007      	beq.n	8002e2c <HAL_GPIO_Init+0x1e4>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a3d      	ldr	r2, [pc, #244]	@ (8002f14 <HAL_GPIO_Init+0x2cc>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d101      	bne.n	8002e28 <HAL_GPIO_Init+0x1e0>
 8002e24:	2303      	movs	r3, #3
 8002e26:	e006      	b.n	8002e36 <HAL_GPIO_Init+0x1ee>
 8002e28:	2304      	movs	r3, #4
 8002e2a:	e004      	b.n	8002e36 <HAL_GPIO_Init+0x1ee>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e002      	b.n	8002e36 <HAL_GPIO_Init+0x1ee>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <HAL_GPIO_Init+0x1ee>
 8002e34:	2300      	movs	r3, #0
 8002e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e38:	f002 0203 	and.w	r2, r2, #3
 8002e3c:	0092      	lsls	r2, r2, #2
 8002e3e:	4093      	lsls	r3, r2
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e46:	492f      	ldr	r1, [pc, #188]	@ (8002f04 <HAL_GPIO_Init+0x2bc>)
 8002e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4a:	089b      	lsrs	r3, r3, #2
 8002e4c:	3302      	adds	r3, #2
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d006      	beq.n	8002e6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e60:	4b2d      	ldr	r3, [pc, #180]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	492c      	ldr	r1, [pc, #176]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	608b      	str	r3, [r1, #8]
 8002e6c:	e006      	b.n	8002e7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e6e:	4b2a      	ldr	r3, [pc, #168]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	43db      	mvns	r3, r3
 8002e76:	4928      	ldr	r1, [pc, #160]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d006      	beq.n	8002e96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e88:	4b23      	ldr	r3, [pc, #140]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	4922      	ldr	r1, [pc, #136]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	60cb      	str	r3, [r1, #12]
 8002e94:	e006      	b.n	8002ea4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e96:	4b20      	ldr	r3, [pc, #128]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	491e      	ldr	r1, [pc, #120]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d006      	beq.n	8002ebe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002eb0:	4b19      	ldr	r3, [pc, #100]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	4918      	ldr	r1, [pc, #96]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	604b      	str	r3, [r1, #4]
 8002ebc:	e006      	b.n	8002ecc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ebe:	4b16      	ldr	r3, [pc, #88]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	4914      	ldr	r1, [pc, #80]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d021      	beq.n	8002f1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	490e      	ldr	r1, [pc, #56]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	600b      	str	r3, [r1, #0]
 8002ee4:	e021      	b.n	8002f2a <HAL_GPIO_Init+0x2e2>
 8002ee6:	bf00      	nop
 8002ee8:	10320000 	.word	0x10320000
 8002eec:	10310000 	.word	0x10310000
 8002ef0:	10220000 	.word	0x10220000
 8002ef4:	10210000 	.word	0x10210000
 8002ef8:	10120000 	.word	0x10120000
 8002efc:	10110000 	.word	0x10110000
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40010000 	.word	0x40010000
 8002f08:	40010800 	.word	0x40010800
 8002f0c:	40010c00 	.word	0x40010c00
 8002f10:	40011000 	.word	0x40011000
 8002f14:	40011400 	.word	0x40011400
 8002f18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f4c <HAL_GPIO_Init+0x304>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	43db      	mvns	r3, r3
 8002f24:	4909      	ldr	r1, [pc, #36]	@ (8002f4c <HAL_GPIO_Init+0x304>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f36:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f47f ae8e 	bne.w	8002c5c <HAL_GPIO_Init+0x14>
  }
}
 8002f40:	bf00      	nop
 8002f42:	bf00      	nop
 8002f44:	372c      	adds	r7, #44	@ 0x2c
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr
 8002f4c:	40010400 	.word	0x40010400

08002f50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	887b      	ldrh	r3, [r7, #2]
 8002f62:	4013      	ands	r3, r2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d002      	beq.n	8002f6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	73fb      	strb	r3, [r7, #15]
 8002f6c:	e001      	b.n	8002f72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc80      	pop	{r7}
 8002f7c:	4770      	bx	lr

08002f7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	460b      	mov	r3, r1
 8002f88:	807b      	strh	r3, [r7, #2]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f8e:	787b      	ldrb	r3, [r7, #1]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f94:	887a      	ldrh	r2, [r7, #2]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f9a:	e003      	b.n	8002fa4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f9c:	887b      	ldrh	r3, [r7, #2]
 8002f9e:	041a      	lsls	r2, r3, #16
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	611a      	str	r2, [r3, #16]
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr
	...

08002fb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e12b      	b.n	800321a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d106      	bne.n	8002fdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7fe fdf0 	bl	8001bbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2224      	movs	r2, #36	@ 0x24
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0201 	bic.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003002:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003012:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003014:	f001 f832 	bl	800407c <HAL_RCC_GetPCLK1Freq>
 8003018:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	4a81      	ldr	r2, [pc, #516]	@ (8003224 <HAL_I2C_Init+0x274>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d807      	bhi.n	8003034 <HAL_I2C_Init+0x84>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4a80      	ldr	r2, [pc, #512]	@ (8003228 <HAL_I2C_Init+0x278>)
 8003028:	4293      	cmp	r3, r2
 800302a:	bf94      	ite	ls
 800302c:	2301      	movls	r3, #1
 800302e:	2300      	movhi	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	e006      	b.n	8003042 <HAL_I2C_Init+0x92>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4a7d      	ldr	r2, [pc, #500]	@ (800322c <HAL_I2C_Init+0x27c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	bf94      	ite	ls
 800303c:	2301      	movls	r3, #1
 800303e:	2300      	movhi	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e0e7      	b.n	800321a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4a78      	ldr	r2, [pc, #480]	@ (8003230 <HAL_I2C_Init+0x280>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	0c9b      	lsrs	r3, r3, #18
 8003054:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	4a6a      	ldr	r2, [pc, #424]	@ (8003224 <HAL_I2C_Init+0x274>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d802      	bhi.n	8003084 <HAL_I2C_Init+0xd4>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	3301      	adds	r3, #1
 8003082:	e009      	b.n	8003098 <HAL_I2C_Init+0xe8>
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800308a:	fb02 f303 	mul.w	r3, r2, r3
 800308e:	4a69      	ldr	r2, [pc, #420]	@ (8003234 <HAL_I2C_Init+0x284>)
 8003090:	fba2 2303 	umull	r2, r3, r2, r3
 8003094:	099b      	lsrs	r3, r3, #6
 8003096:	3301      	adds	r3, #1
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6812      	ldr	r2, [r2, #0]
 800309c:	430b      	orrs	r3, r1
 800309e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80030aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	495c      	ldr	r1, [pc, #368]	@ (8003224 <HAL_I2C_Init+0x274>)
 80030b4:	428b      	cmp	r3, r1
 80030b6:	d819      	bhi.n	80030ec <HAL_I2C_Init+0x13c>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	1e59      	subs	r1, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80030c6:	1c59      	adds	r1, r3, #1
 80030c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030cc:	400b      	ands	r3, r1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00a      	beq.n	80030e8 <HAL_I2C_Init+0x138>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	1e59      	subs	r1, r3, #1
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80030e0:	3301      	adds	r3, #1
 80030e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e6:	e051      	b.n	800318c <HAL_I2C_Init+0x1dc>
 80030e8:	2304      	movs	r3, #4
 80030ea:	e04f      	b.n	800318c <HAL_I2C_Init+0x1dc>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d111      	bne.n	8003118 <HAL_I2C_Init+0x168>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	1e58      	subs	r0, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6859      	ldr	r1, [r3, #4]
 80030fc:	460b      	mov	r3, r1
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	440b      	add	r3, r1
 8003102:	fbb0 f3f3 	udiv	r3, r0, r3
 8003106:	3301      	adds	r3, #1
 8003108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800310c:	2b00      	cmp	r3, #0
 800310e:	bf0c      	ite	eq
 8003110:	2301      	moveq	r3, #1
 8003112:	2300      	movne	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	e012      	b.n	800313e <HAL_I2C_Init+0x18e>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	1e58      	subs	r0, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6859      	ldr	r1, [r3, #4]
 8003120:	460b      	mov	r3, r1
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	0099      	lsls	r1, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	fbb0 f3f3 	udiv	r3, r0, r3
 800312e:	3301      	adds	r3, #1
 8003130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003134:	2b00      	cmp	r3, #0
 8003136:	bf0c      	ite	eq
 8003138:	2301      	moveq	r3, #1
 800313a:	2300      	movne	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_I2C_Init+0x196>
 8003142:	2301      	movs	r3, #1
 8003144:	e022      	b.n	800318c <HAL_I2C_Init+0x1dc>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10e      	bne.n	800316c <HAL_I2C_Init+0x1bc>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	1e58      	subs	r0, r3, #1
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6859      	ldr	r1, [r3, #4]
 8003156:	460b      	mov	r3, r1
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	440b      	add	r3, r1
 800315c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003160:	3301      	adds	r3, #1
 8003162:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003166:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800316a:	e00f      	b.n	800318c <HAL_I2C_Init+0x1dc>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	1e58      	subs	r0, r3, #1
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6859      	ldr	r1, [r3, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	0099      	lsls	r1, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003182:	3301      	adds	r3, #1
 8003184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003188:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	6809      	ldr	r1, [r1, #0]
 8003190:	4313      	orrs	r3, r2
 8003192:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69da      	ldr	r2, [r3, #28]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80031ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6911      	ldr	r1, [r2, #16]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	68d2      	ldr	r2, [r2, #12]
 80031c6:	4311      	orrs	r1, r2
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6812      	ldr	r2, [r2, #0]
 80031cc:	430b      	orrs	r3, r1
 80031ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0201 	orr.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2220      	movs	r2, #32
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	000186a0 	.word	0x000186a0
 8003228:	001e847f 	.word	0x001e847f
 800322c:	003d08ff 	.word	0x003d08ff
 8003230:	431bde83 	.word	0x431bde83
 8003234:	10624dd3 	.word	0x10624dd3

08003238 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af02      	add	r7, sp, #8
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	607a      	str	r2, [r7, #4]
 8003242:	461a      	mov	r2, r3
 8003244:	460b      	mov	r3, r1
 8003246:	817b      	strh	r3, [r7, #10]
 8003248:	4613      	mov	r3, r2
 800324a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800324c:	f7fe fee2 	bl	8002014 <HAL_GetTick>
 8003250:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b20      	cmp	r3, #32
 800325c:	f040 80e0 	bne.w	8003420 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	2319      	movs	r3, #25
 8003266:	2201      	movs	r2, #1
 8003268:	4970      	ldr	r1, [pc, #448]	@ (800342c <HAL_I2C_Master_Transmit+0x1f4>)
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 f964 	bl	8003538 <I2C_WaitOnFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003276:	2302      	movs	r3, #2
 8003278:	e0d3      	b.n	8003422 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_I2C_Master_Transmit+0x50>
 8003284:	2302      	movs	r3, #2
 8003286:	e0cc      	b.n	8003422 <HAL_I2C_Master_Transmit+0x1ea>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b01      	cmp	r3, #1
 800329c:	d007      	beq.n	80032ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f042 0201 	orr.w	r2, r2, #1
 80032ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2221      	movs	r2, #33	@ 0x21
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2210      	movs	r2, #16
 80032ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	893a      	ldrh	r2, [r7, #8]
 80032de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4a50      	ldr	r2, [pc, #320]	@ (8003430 <HAL_I2C_Master_Transmit+0x1f8>)
 80032ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032f0:	8979      	ldrh	r1, [r7, #10]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	6a3a      	ldr	r2, [r7, #32]
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 f89c 	bl	8003434 <I2C_MasterRequestWrite>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e08d      	b.n	8003422 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003306:	2300      	movs	r3, #0
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	613b      	str	r3, [r7, #16]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800331c:	e066      	b.n	80033ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	6a39      	ldr	r1, [r7, #32]
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 fa22 	bl	800376c <I2C_WaitOnTXEFlagUntilTimeout>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00d      	beq.n	800334a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003332:	2b04      	cmp	r3, #4
 8003334:	d107      	bne.n	8003346 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003344:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e06b      	b.n	8003422 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334e:	781a      	ldrb	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003364:	b29b      	uxth	r3, r3
 8003366:	3b01      	subs	r3, #1
 8003368:	b29a      	uxth	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003372:	3b01      	subs	r3, #1
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b04      	cmp	r3, #4
 8003386:	d11b      	bne.n	80033c0 <HAL_I2C_Master_Transmit+0x188>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800338c:	2b00      	cmp	r3, #0
 800338e:	d017      	beq.n	80033c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003394:	781a      	ldrb	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	6a39      	ldr	r1, [r7, #32]
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 fa19 	bl	80037fc <I2C_WaitOnBTFFlagUntilTimeout>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00d      	beq.n	80033ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d107      	bne.n	80033e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e01a      	b.n	8003422 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d194      	bne.n	800331e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003402:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	e000      	b.n	8003422 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003420:	2302      	movs	r3, #2
  }
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	00100002 	.word	0x00100002
 8003430:	ffff0000 	.word	0xffff0000

08003434 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af02      	add	r7, sp, #8
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	607a      	str	r2, [r7, #4]
 800343e:	603b      	str	r3, [r7, #0]
 8003440:	460b      	mov	r3, r1
 8003442:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003448:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2b08      	cmp	r3, #8
 800344e:	d006      	beq.n	800345e <I2C_MasterRequestWrite+0x2a>
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d003      	beq.n	800345e <I2C_MasterRequestWrite+0x2a>
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800345c:	d108      	bne.n	8003470 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	e00b      	b.n	8003488 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003474:	2b12      	cmp	r3, #18
 8003476:	d107      	bne.n	8003488 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003486:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 f84f 	bl	8003538 <I2C_WaitOnFlagUntilTimeout>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00d      	beq.n	80034bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034ae:	d103      	bne.n	80034b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e035      	b.n	8003528 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034c4:	d108      	bne.n	80034d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034c6:	897b      	ldrh	r3, [r7, #10]
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	461a      	mov	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80034d4:	611a      	str	r2, [r3, #16]
 80034d6:	e01b      	b.n	8003510 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034d8:	897b      	ldrh	r3, [r7, #10]
 80034da:	11db      	asrs	r3, r3, #7
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	f003 0306 	and.w	r3, r3, #6
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	f063 030f 	orn	r3, r3, #15
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	490e      	ldr	r1, [pc, #56]	@ (8003530 <I2C_MasterRequestWrite+0xfc>)
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f898 	bl	800362c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e010      	b.n	8003528 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003506:	897b      	ldrh	r3, [r7, #10]
 8003508:	b2da      	uxtb	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	4907      	ldr	r1, [pc, #28]	@ (8003534 <I2C_MasterRequestWrite+0x100>)
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 f888 	bl	800362c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e000      	b.n	8003528 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	00010008 	.word	0x00010008
 8003534:	00010002 	.word	0x00010002

08003538 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	603b      	str	r3, [r7, #0]
 8003544:	4613      	mov	r3, r2
 8003546:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003548:	e048      	b.n	80035dc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003550:	d044      	beq.n	80035dc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003552:	f7fe fd5f 	bl	8002014 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d302      	bcc.n	8003568 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d139      	bne.n	80035dc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	0c1b      	lsrs	r3, r3, #16
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b01      	cmp	r3, #1
 8003570:	d10d      	bne.n	800358e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	43da      	mvns	r2, r3
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	4013      	ands	r3, r2
 800357e:	b29b      	uxth	r3, r3
 8003580:	2b00      	cmp	r3, #0
 8003582:	bf0c      	ite	eq
 8003584:	2301      	moveq	r3, #1
 8003586:	2300      	movne	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	461a      	mov	r2, r3
 800358c:	e00c      	b.n	80035a8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	43da      	mvns	r2, r3
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	4013      	ands	r3, r2
 800359a:	b29b      	uxth	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	bf0c      	ite	eq
 80035a0:	2301      	moveq	r3, #1
 80035a2:	2300      	movne	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	461a      	mov	r2, r3
 80035a8:	79fb      	ldrb	r3, [r7, #7]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d116      	bne.n	80035dc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c8:	f043 0220 	orr.w	r2, r3, #32
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e023      	b.n	8003624 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	0c1b      	lsrs	r3, r3, #16
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d10d      	bne.n	8003602 <I2C_WaitOnFlagUntilTimeout+0xca>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	43da      	mvns	r2, r3
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	4013      	ands	r3, r2
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	bf0c      	ite	eq
 80035f8:	2301      	moveq	r3, #1
 80035fa:	2300      	movne	r3, #0
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	461a      	mov	r2, r3
 8003600:	e00c      	b.n	800361c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	43da      	mvns	r2, r3
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	4013      	ands	r3, r2
 800360e:	b29b      	uxth	r3, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	bf0c      	ite	eq
 8003614:	2301      	moveq	r3, #1
 8003616:	2300      	movne	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	461a      	mov	r2, r3
 800361c:	79fb      	ldrb	r3, [r7, #7]
 800361e:	429a      	cmp	r2, r3
 8003620:	d093      	beq.n	800354a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800363a:	e071      	b.n	8003720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003646:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800364a:	d123      	bne.n	8003694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800365a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003664:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003680:	f043 0204 	orr.w	r2, r3, #4
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e067      	b.n	8003764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369a:	d041      	beq.n	8003720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800369c:	f7fe fcba 	bl	8002014 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d302      	bcc.n	80036b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d136      	bne.n	8003720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	0c1b      	lsrs	r3, r3, #16
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d10c      	bne.n	80036d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	43da      	mvns	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	4013      	ands	r3, r2
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	bf14      	ite	ne
 80036ce:	2301      	movne	r3, #1
 80036d0:	2300      	moveq	r3, #0
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	e00b      	b.n	80036ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	43da      	mvns	r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	4013      	ands	r3, r2
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bf14      	ite	ne
 80036e8:	2301      	movne	r3, #1
 80036ea:	2300      	moveq	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d016      	beq.n	8003720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370c:	f043 0220 	orr.w	r2, r3, #32
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e021      	b.n	8003764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	0c1b      	lsrs	r3, r3, #16
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b01      	cmp	r3, #1
 8003728:	d10c      	bne.n	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	43da      	mvns	r2, r3
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	4013      	ands	r3, r2
 8003736:	b29b      	uxth	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	bf14      	ite	ne
 800373c:	2301      	movne	r3, #1
 800373e:	2300      	moveq	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	e00b      	b.n	800375c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	43da      	mvns	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4013      	ands	r3, r2
 8003750:	b29b      	uxth	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	bf14      	ite	ne
 8003756:	2301      	movne	r3, #1
 8003758:	2300      	moveq	r3, #0
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	f47f af6d 	bne.w	800363c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003778:	e034      	b.n	80037e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 f886 	bl	800388c <I2C_IsAcknowledgeFailed>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e034      	b.n	80037f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003790:	d028      	beq.n	80037e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003792:	f7fe fc3f 	bl	8002014 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d302      	bcc.n	80037a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d11d      	bne.n	80037e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037b2:	2b80      	cmp	r3, #128	@ 0x80
 80037b4:	d016      	beq.n	80037e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d0:	f043 0220 	orr.w	r2, r3, #32
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e007      	b.n	80037f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ee:	2b80      	cmp	r3, #128	@ 0x80
 80037f0:	d1c3      	bne.n	800377a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003808:	e034      	b.n	8003874 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 f83e 	bl	800388c <I2C_IsAcknowledgeFailed>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e034      	b.n	8003884 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003820:	d028      	beq.n	8003874 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003822:	f7fe fbf7 	bl	8002014 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	429a      	cmp	r2, r3
 8003830:	d302      	bcc.n	8003838 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d11d      	bne.n	8003874 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	2b04      	cmp	r3, #4
 8003844:	d016      	beq.n	8003874 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003860:	f043 0220 	orr.w	r2, r3, #32
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e007      	b.n	8003884 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	f003 0304 	and.w	r3, r3, #4
 800387e:	2b04      	cmp	r3, #4
 8003880:	d1c3      	bne.n	800380a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800389e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038a2:	d11b      	bne.n	80038dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c8:	f043 0204 	orr.w	r2, r3, #4
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e000      	b.n	80038de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bc80      	pop	{r7}
 80038e6:	4770      	bx	lr

080038e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e272      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 8087 	beq.w	8003a16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003908:	4b92      	ldr	r3, [pc, #584]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f003 030c 	and.w	r3, r3, #12
 8003910:	2b04      	cmp	r3, #4
 8003912:	d00c      	beq.n	800392e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003914:	4b8f      	ldr	r3, [pc, #572]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f003 030c 	and.w	r3, r3, #12
 800391c:	2b08      	cmp	r3, #8
 800391e:	d112      	bne.n	8003946 <HAL_RCC_OscConfig+0x5e>
 8003920:	4b8c      	ldr	r3, [pc, #560]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800392c:	d10b      	bne.n	8003946 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800392e:	4b89      	ldr	r3, [pc, #548]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d06c      	beq.n	8003a14 <HAL_RCC_OscConfig+0x12c>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d168      	bne.n	8003a14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e24c      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800394e:	d106      	bne.n	800395e <HAL_RCC_OscConfig+0x76>
 8003950:	4b80      	ldr	r3, [pc, #512]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a7f      	ldr	r2, [pc, #508]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003956:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	e02e      	b.n	80039bc <HAL_RCC_OscConfig+0xd4>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10c      	bne.n	8003980 <HAL_RCC_OscConfig+0x98>
 8003966:	4b7b      	ldr	r3, [pc, #492]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a7a      	ldr	r2, [pc, #488]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 800396c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	4b78      	ldr	r3, [pc, #480]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a77      	ldr	r2, [pc, #476]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003978:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	e01d      	b.n	80039bc <HAL_RCC_OscConfig+0xd4>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003988:	d10c      	bne.n	80039a4 <HAL_RCC_OscConfig+0xbc>
 800398a:	4b72      	ldr	r3, [pc, #456]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a71      	ldr	r2, [pc, #452]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003990:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	4b6f      	ldr	r3, [pc, #444]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a6e      	ldr	r2, [pc, #440]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 800399c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	e00b      	b.n	80039bc <HAL_RCC_OscConfig+0xd4>
 80039a4:	4b6b      	ldr	r3, [pc, #428]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a6a      	ldr	r2, [pc, #424]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 80039aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	4b68      	ldr	r3, [pc, #416]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a67      	ldr	r2, [pc, #412]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 80039b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d013      	beq.n	80039ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c4:	f7fe fb26 	bl	8002014 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039cc:	f7fe fb22 	bl	8002014 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b64      	cmp	r3, #100	@ 0x64
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e200      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039de:	4b5d      	ldr	r3, [pc, #372]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f0      	beq.n	80039cc <HAL_RCC_OscConfig+0xe4>
 80039ea:	e014      	b.n	8003a16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ec:	f7fe fb12 	bl	8002014 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f4:	f7fe fb0e 	bl	8002014 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b64      	cmp	r3, #100	@ 0x64
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e1ec      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a06:	4b53      	ldr	r3, [pc, #332]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f0      	bne.n	80039f4 <HAL_RCC_OscConfig+0x10c>
 8003a12:	e000      	b.n	8003a16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d063      	beq.n	8003aea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a22:	4b4c      	ldr	r3, [pc, #304]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f003 030c 	and.w	r3, r3, #12
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00b      	beq.n	8003a46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a2e:	4b49      	ldr	r3, [pc, #292]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f003 030c 	and.w	r3, r3, #12
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d11c      	bne.n	8003a74 <HAL_RCC_OscConfig+0x18c>
 8003a3a:	4b46      	ldr	r3, [pc, #280]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d116      	bne.n	8003a74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a46:	4b43      	ldr	r3, [pc, #268]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d005      	beq.n	8003a5e <HAL_RCC_OscConfig+0x176>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d001      	beq.n	8003a5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e1c0      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5e:	4b3d      	ldr	r3, [pc, #244]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	4939      	ldr	r1, [pc, #228]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a72:	e03a      	b.n	8003aea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d020      	beq.n	8003abe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a7c:	4b36      	ldr	r3, [pc, #216]	@ (8003b58 <HAL_RCC_OscConfig+0x270>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a82:	f7fe fac7 	bl	8002014 <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a8a:	f7fe fac3 	bl	8002014 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e1a1      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a9c:	4b2d      	ldr	r3, [pc, #180]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0f0      	beq.n	8003a8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa8:	4b2a      	ldr	r3, [pc, #168]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	4927      	ldr	r1, [pc, #156]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	600b      	str	r3, [r1, #0]
 8003abc:	e015      	b.n	8003aea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003abe:	4b26      	ldr	r3, [pc, #152]	@ (8003b58 <HAL_RCC_OscConfig+0x270>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac4:	f7fe faa6 	bl	8002014 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003acc:	f7fe faa2 	bl	8002014 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e180      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ade:	4b1d      	ldr	r3, [pc, #116]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f0      	bne.n	8003acc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d03a      	beq.n	8003b6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d019      	beq.n	8003b32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003afe:	4b17      	ldr	r3, [pc, #92]	@ (8003b5c <HAL_RCC_OscConfig+0x274>)
 8003b00:	2201      	movs	r2, #1
 8003b02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b04:	f7fe fa86 	bl	8002014 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b0c:	f7fe fa82 	bl	8002014 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e160      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b54 <HAL_RCC_OscConfig+0x26c>)
 8003b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0f0      	beq.n	8003b0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b2a:	2001      	movs	r0, #1
 8003b2c:	f000 face 	bl	80040cc <RCC_Delay>
 8003b30:	e01c      	b.n	8003b6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b32:	4b0a      	ldr	r3, [pc, #40]	@ (8003b5c <HAL_RCC_OscConfig+0x274>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b38:	f7fe fa6c 	bl	8002014 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b3e:	e00f      	b.n	8003b60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b40:	f7fe fa68 	bl	8002014 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d908      	bls.n	8003b60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e146      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>
 8003b52:	bf00      	nop
 8003b54:	40021000 	.word	0x40021000
 8003b58:	42420000 	.word	0x42420000
 8003b5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b60:	4b92      	ldr	r3, [pc, #584]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1e9      	bne.n	8003b40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 80a6 	beq.w	8003cc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b7e:	4b8b      	ldr	r3, [pc, #556]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10d      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b8a:	4b88      	ldr	r3, [pc, #544]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	4a87      	ldr	r2, [pc, #540]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b94:	61d3      	str	r3, [r2, #28]
 8003b96:	4b85      	ldr	r3, [pc, #532]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba6:	4b82      	ldr	r3, [pc, #520]	@ (8003db0 <HAL_RCC_OscConfig+0x4c8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d118      	bne.n	8003be4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bb2:	4b7f      	ldr	r3, [pc, #508]	@ (8003db0 <HAL_RCC_OscConfig+0x4c8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a7e      	ldr	r2, [pc, #504]	@ (8003db0 <HAL_RCC_OscConfig+0x4c8>)
 8003bb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bbe:	f7fe fa29 	bl	8002014 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc6:	f7fe fa25 	bl	8002014 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b64      	cmp	r3, #100	@ 0x64
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e103      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd8:	4b75      	ldr	r3, [pc, #468]	@ (8003db0 <HAL_RCC_OscConfig+0x4c8>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0f0      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d106      	bne.n	8003bfa <HAL_RCC_OscConfig+0x312>
 8003bec:	4b6f      	ldr	r3, [pc, #444]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	4a6e      	ldr	r2, [pc, #440]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003bf2:	f043 0301 	orr.w	r3, r3, #1
 8003bf6:	6213      	str	r3, [r2, #32]
 8003bf8:	e02d      	b.n	8003c56 <HAL_RCC_OscConfig+0x36e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10c      	bne.n	8003c1c <HAL_RCC_OscConfig+0x334>
 8003c02:	4b6a      	ldr	r3, [pc, #424]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	4a69      	ldr	r2, [pc, #420]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003c08:	f023 0301 	bic.w	r3, r3, #1
 8003c0c:	6213      	str	r3, [r2, #32]
 8003c0e:	4b67      	ldr	r3, [pc, #412]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	4a66      	ldr	r2, [pc, #408]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003c14:	f023 0304 	bic.w	r3, r3, #4
 8003c18:	6213      	str	r3, [r2, #32]
 8003c1a:	e01c      	b.n	8003c56 <HAL_RCC_OscConfig+0x36e>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	2b05      	cmp	r3, #5
 8003c22:	d10c      	bne.n	8003c3e <HAL_RCC_OscConfig+0x356>
 8003c24:	4b61      	ldr	r3, [pc, #388]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	4a60      	ldr	r2, [pc, #384]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003c2a:	f043 0304 	orr.w	r3, r3, #4
 8003c2e:	6213      	str	r3, [r2, #32]
 8003c30:	4b5e      	ldr	r3, [pc, #376]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	4a5d      	ldr	r2, [pc, #372]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	6213      	str	r3, [r2, #32]
 8003c3c:	e00b      	b.n	8003c56 <HAL_RCC_OscConfig+0x36e>
 8003c3e:	4b5b      	ldr	r3, [pc, #364]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	4a5a      	ldr	r2, [pc, #360]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003c44:	f023 0301 	bic.w	r3, r3, #1
 8003c48:	6213      	str	r3, [r2, #32]
 8003c4a:	4b58      	ldr	r3, [pc, #352]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	4a57      	ldr	r2, [pc, #348]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003c50:	f023 0304 	bic.w	r3, r3, #4
 8003c54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d015      	beq.n	8003c8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c5e:	f7fe f9d9 	bl	8002014 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c64:	e00a      	b.n	8003c7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c66:	f7fe f9d5 	bl	8002014 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e0b1      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c7c:	4b4b      	ldr	r3, [pc, #300]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0ee      	beq.n	8003c66 <HAL_RCC_OscConfig+0x37e>
 8003c88:	e014      	b.n	8003cb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c8a:	f7fe f9c3 	bl	8002014 <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c90:	e00a      	b.n	8003ca8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c92:	f7fe f9bf 	bl	8002014 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e09b      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ca8:	4b40      	ldr	r3, [pc, #256]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1ee      	bne.n	8003c92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cb4:	7dfb      	ldrb	r3, [r7, #23]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d105      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cba:	4b3c      	ldr	r3, [pc, #240]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	4a3b      	ldr	r2, [pc, #236]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003cc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 8087 	beq.w	8003dde <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cd0:	4b36      	ldr	r3, [pc, #216]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f003 030c 	and.w	r3, r3, #12
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	d061      	beq.n	8003da0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d146      	bne.n	8003d72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce4:	4b33      	ldr	r3, [pc, #204]	@ (8003db4 <HAL_RCC_OscConfig+0x4cc>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cea:	f7fe f993 	bl	8002014 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf2:	f7fe f98f 	bl	8002014 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e06d      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d04:	4b29      	ldr	r3, [pc, #164]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1f0      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d18:	d108      	bne.n	8003d2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d1a:	4b24      	ldr	r3, [pc, #144]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	4921      	ldr	r1, [pc, #132]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d2c:	4b1f      	ldr	r3, [pc, #124]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a19      	ldr	r1, [r3, #32]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3c:	430b      	orrs	r3, r1
 8003d3e:	491b      	ldr	r1, [pc, #108]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d44:	4b1b      	ldr	r3, [pc, #108]	@ (8003db4 <HAL_RCC_OscConfig+0x4cc>)
 8003d46:	2201      	movs	r2, #1
 8003d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4a:	f7fe f963 	bl	8002014 <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d52:	f7fe f95f 	bl	8002014 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e03d      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d64:	4b11      	ldr	r3, [pc, #68]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0f0      	beq.n	8003d52 <HAL_RCC_OscConfig+0x46a>
 8003d70:	e035      	b.n	8003dde <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d72:	4b10      	ldr	r3, [pc, #64]	@ (8003db4 <HAL_RCC_OscConfig+0x4cc>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d78:	f7fe f94c 	bl	8002014 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d80:	f7fe f948 	bl	8002014 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e026      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d92:	4b06      	ldr	r3, [pc, #24]	@ (8003dac <HAL_RCC_OscConfig+0x4c4>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f0      	bne.n	8003d80 <HAL_RCC_OscConfig+0x498>
 8003d9e:	e01e      	b.n	8003dde <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	69db      	ldr	r3, [r3, #28]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d107      	bne.n	8003db8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e019      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>
 8003dac:	40021000 	.word	0x40021000
 8003db0:	40007000 	.word	0x40007000
 8003db4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003db8:	4b0b      	ldr	r3, [pc, #44]	@ (8003de8 <HAL_RCC_OscConfig+0x500>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d106      	bne.n	8003dda <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d001      	beq.n	8003dde <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e000      	b.n	8003de0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40021000 	.word	0x40021000

08003dec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d101      	bne.n	8003e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e0d0      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e00:	4b6a      	ldr	r3, [pc, #424]	@ (8003fac <HAL_RCC_ClockConfig+0x1c0>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d910      	bls.n	8003e30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e0e:	4b67      	ldr	r3, [pc, #412]	@ (8003fac <HAL_RCC_ClockConfig+0x1c0>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f023 0207 	bic.w	r2, r3, #7
 8003e16:	4965      	ldr	r1, [pc, #404]	@ (8003fac <HAL_RCC_ClockConfig+0x1c0>)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e1e:	4b63      	ldr	r3, [pc, #396]	@ (8003fac <HAL_RCC_ClockConfig+0x1c0>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0307 	and.w	r3, r3, #7
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d001      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e0b8      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d020      	beq.n	8003e7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d005      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e48:	4b59      	ldr	r3, [pc, #356]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	4a58      	ldr	r2, [pc, #352]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003e52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d005      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e60:	4b53      	ldr	r3, [pc, #332]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	4a52      	ldr	r2, [pc, #328]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e66:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003e6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e6c:	4b50      	ldr	r3, [pc, #320]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	494d      	ldr	r1, [pc, #308]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d040      	beq.n	8003f0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d107      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e92:	4b47      	ldr	r3, [pc, #284]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d115      	bne.n	8003eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e07f      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d107      	bne.n	8003eba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eaa:	4b41      	ldr	r3, [pc, #260]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d109      	bne.n	8003eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e073      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eba:	4b3d      	ldr	r3, [pc, #244]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e06b      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eca:	4b39      	ldr	r3, [pc, #228]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f023 0203 	bic.w	r2, r3, #3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	4936      	ldr	r1, [pc, #216]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003edc:	f7fe f89a 	bl	8002014 <HAL_GetTick>
 8003ee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee2:	e00a      	b.n	8003efa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ee4:	f7fe f896 	bl	8002014 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e053      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003efa:	4b2d      	ldr	r3, [pc, #180]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f003 020c 	and.w	r2, r3, #12
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d1eb      	bne.n	8003ee4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f0c:	4b27      	ldr	r3, [pc, #156]	@ (8003fac <HAL_RCC_ClockConfig+0x1c0>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0307 	and.w	r3, r3, #7
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d210      	bcs.n	8003f3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f1a:	4b24      	ldr	r3, [pc, #144]	@ (8003fac <HAL_RCC_ClockConfig+0x1c0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f023 0207 	bic.w	r2, r3, #7
 8003f22:	4922      	ldr	r1, [pc, #136]	@ (8003fac <HAL_RCC_ClockConfig+0x1c0>)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2a:	4b20      	ldr	r3, [pc, #128]	@ (8003fac <HAL_RCC_ClockConfig+0x1c0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0307 	and.w	r3, r3, #7
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d001      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e032      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d008      	beq.n	8003f5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f48:	4b19      	ldr	r3, [pc, #100]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	4916      	ldr	r1, [pc, #88]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d009      	beq.n	8003f7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f66:	4b12      	ldr	r3, [pc, #72]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	490e      	ldr	r1, [pc, #56]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f7a:	f000 f821 	bl	8003fc0 <HAL_RCC_GetSysClockFreq>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	091b      	lsrs	r3, r3, #4
 8003f86:	f003 030f 	and.w	r3, r3, #15
 8003f8a:	490a      	ldr	r1, [pc, #40]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f8c:	5ccb      	ldrb	r3, [r1, r3]
 8003f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f92:	4a09      	ldr	r2, [pc, #36]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1cc>)
 8003f94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f96:	4b09      	ldr	r3, [pc, #36]	@ (8003fbc <HAL_RCC_ClockConfig+0x1d0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fd fff8 	bl	8001f90 <HAL_InitTick>

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40022000 	.word	0x40022000
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	08008d3c 	.word	0x08008d3c
 8003fb8:	20000010 	.word	0x20000010
 8003fbc:	20000014 	.word	0x20000014

08003fc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b087      	sub	sp, #28
 8003fc4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60bb      	str	r3, [r7, #8]
 8003fce:	2300      	movs	r3, #0
 8003fd0:	617b      	str	r3, [r7, #20]
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003fda:	4b1e      	ldr	r3, [pc, #120]	@ (8004054 <HAL_RCC_GetSysClockFreq+0x94>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f003 030c 	and.w	r3, r3, #12
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d002      	beq.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x30>
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d003      	beq.n	8003ff6 <HAL_RCC_GetSysClockFreq+0x36>
 8003fee:	e027      	b.n	8004040 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ff0:	4b19      	ldr	r3, [pc, #100]	@ (8004058 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ff2:	613b      	str	r3, [r7, #16]
      break;
 8003ff4:	e027      	b.n	8004046 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	0c9b      	lsrs	r3, r3, #18
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	4a17      	ldr	r2, [pc, #92]	@ (800405c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004000:	5cd3      	ldrb	r3, [r2, r3]
 8004002:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d010      	beq.n	8004030 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800400e:	4b11      	ldr	r3, [pc, #68]	@ (8004054 <HAL_RCC_GetSysClockFreq+0x94>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	0c5b      	lsrs	r3, r3, #17
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	4a11      	ldr	r2, [pc, #68]	@ (8004060 <HAL_RCC_GetSysClockFreq+0xa0>)
 800401a:	5cd3      	ldrb	r3, [r2, r3]
 800401c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a0d      	ldr	r2, [pc, #52]	@ (8004058 <HAL_RCC_GetSysClockFreq+0x98>)
 8004022:	fb03 f202 	mul.w	r2, r3, r2
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	fbb2 f3f3 	udiv	r3, r2, r3
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	e004      	b.n	800403a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a0c      	ldr	r2, [pc, #48]	@ (8004064 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004034:	fb02 f303 	mul.w	r3, r2, r3
 8004038:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	613b      	str	r3, [r7, #16]
      break;
 800403e:	e002      	b.n	8004046 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004040:	4b05      	ldr	r3, [pc, #20]	@ (8004058 <HAL_RCC_GetSysClockFreq+0x98>)
 8004042:	613b      	str	r3, [r7, #16]
      break;
 8004044:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004046:	693b      	ldr	r3, [r7, #16]
}
 8004048:	4618      	mov	r0, r3
 800404a:	371c      	adds	r7, #28
 800404c:	46bd      	mov	sp, r7
 800404e:	bc80      	pop	{r7}
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40021000 	.word	0x40021000
 8004058:	007a1200 	.word	0x007a1200
 800405c:	08008d54 	.word	0x08008d54
 8004060:	08008d64 	.word	0x08008d64
 8004064:	003d0900 	.word	0x003d0900

08004068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800406c:	4b02      	ldr	r3, [pc, #8]	@ (8004078 <HAL_RCC_GetHCLKFreq+0x10>)
 800406e:	681b      	ldr	r3, [r3, #0]
}
 8004070:	4618      	mov	r0, r3
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr
 8004078:	20000010 	.word	0x20000010

0800407c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004080:	f7ff fff2 	bl	8004068 <HAL_RCC_GetHCLKFreq>
 8004084:	4602      	mov	r2, r0
 8004086:	4b05      	ldr	r3, [pc, #20]	@ (800409c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	0a1b      	lsrs	r3, r3, #8
 800408c:	f003 0307 	and.w	r3, r3, #7
 8004090:	4903      	ldr	r1, [pc, #12]	@ (80040a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004092:	5ccb      	ldrb	r3, [r1, r3]
 8004094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004098:	4618      	mov	r0, r3
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40021000 	.word	0x40021000
 80040a0:	08008d4c 	.word	0x08008d4c

080040a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040a8:	f7ff ffde 	bl	8004068 <HAL_RCC_GetHCLKFreq>
 80040ac:	4602      	mov	r2, r0
 80040ae:	4b05      	ldr	r3, [pc, #20]	@ (80040c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	0adb      	lsrs	r3, r3, #11
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	4903      	ldr	r1, [pc, #12]	@ (80040c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040ba:	5ccb      	ldrb	r3, [r1, r3]
 80040bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40021000 	.word	0x40021000
 80040c8:	08008d4c 	.word	0x08008d4c

080040cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004100 <RCC_Delay+0x34>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a0a      	ldr	r2, [pc, #40]	@ (8004104 <RCC_Delay+0x38>)
 80040da:	fba2 2303 	umull	r2, r3, r2, r3
 80040de:	0a5b      	lsrs	r3, r3, #9
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	fb02 f303 	mul.w	r3, r2, r3
 80040e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80040e8:	bf00      	nop
  }
  while (Delay --);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1e5a      	subs	r2, r3, #1
 80040ee:	60fa      	str	r2, [r7, #12]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1f9      	bne.n	80040e8 <RCC_Delay+0x1c>
}
 80040f4:	bf00      	nop
 80040f6:	bf00      	nop
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr
 8004100:	20000010 	.word	0x20000010
 8004104:	10624dd3 	.word	0x10624dd3

08004108 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	613b      	str	r3, [r7, #16]
 8004114:	2300      	movs	r3, #0
 8004116:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d07d      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004124:	2300      	movs	r3, #0
 8004126:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004128:	4b4f      	ldr	r3, [pc, #316]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10d      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004134:	4b4c      	ldr	r3, [pc, #304]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	4a4b      	ldr	r2, [pc, #300]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800413a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800413e:	61d3      	str	r3, [r2, #28]
 8004140:	4b49      	ldr	r3, [pc, #292]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004148:	60bb      	str	r3, [r7, #8]
 800414a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800414c:	2301      	movs	r3, #1
 800414e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004150:	4b46      	ldr	r3, [pc, #280]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004158:	2b00      	cmp	r3, #0
 800415a:	d118      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800415c:	4b43      	ldr	r3, [pc, #268]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a42      	ldr	r2, [pc, #264]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004162:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004166:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004168:	f7fd ff54 	bl	8002014 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416e:	e008      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004170:	f7fd ff50 	bl	8002014 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b64      	cmp	r3, #100	@ 0x64
 800417c:	d901      	bls.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e06d      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004182:	4b3a      	ldr	r3, [pc, #232]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0f0      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800418e:	4b36      	ldr	r3, [pc, #216]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004196:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d02e      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d027      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041ac:	4b2e      	ldr	r3, [pc, #184]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041b6:	4b2e      	ldr	r3, [pc, #184]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041b8:	2201      	movs	r2, #1
 80041ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041bc:	4b2c      	ldr	r3, [pc, #176]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041c2:	4a29      	ldr	r2, [pc, #164]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d014      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d2:	f7fd ff1f 	bl	8002014 <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d8:	e00a      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041da:	f7fd ff1b 	bl	8002014 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e036      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f0:	4b1d      	ldr	r3, [pc, #116]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0ee      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	4917      	ldr	r1, [pc, #92]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800420a:	4313      	orrs	r3, r2
 800420c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800420e:	7dfb      	ldrb	r3, [r7, #23]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d105      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004214:	4b14      	ldr	r3, [pc, #80]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	4a13      	ldr	r2, [pc, #76]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800421a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800421e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d008      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800422c:	4b0e      	ldr	r3, [pc, #56]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	490b      	ldr	r1, [pc, #44]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800423a:	4313      	orrs	r3, r2
 800423c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0310 	and.w	r3, r3, #16
 8004246:	2b00      	cmp	r3, #0
 8004248:	d008      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800424a:	4b07      	ldr	r3, [pc, #28]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	4904      	ldr	r1, [pc, #16]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004258:	4313      	orrs	r3, r2
 800425a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	40021000 	.word	0x40021000
 800426c:	40007000 	.word	0x40007000
 8004270:	42420440 	.word	0x42420440

08004274 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b088      	sub	sp, #32
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	2300      	movs	r3, #0
 8004282:	61fb      	str	r3, [r7, #28]
 8004284:	2300      	movs	r3, #0
 8004286:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	2300      	movs	r3, #0
 800428e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b10      	cmp	r3, #16
 8004294:	d00a      	beq.n	80042ac <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b10      	cmp	r3, #16
 800429a:	f200 808a 	bhi.w	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d045      	beq.n	8004330 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d075      	beq.n	8004396 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80042aa:	e082      	b.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80042ac:	4b46      	ldr	r3, [pc, #280]	@ (80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80042b2:	4b45      	ldr	r3, [pc, #276]	@ (80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d07b      	beq.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	0c9b      	lsrs	r3, r3, #18
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	4a41      	ldr	r2, [pc, #260]	@ (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80042c8:	5cd3      	ldrb	r3, [r2, r3]
 80042ca:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d015      	beq.n	8004302 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042d6:	4b3c      	ldr	r3, [pc, #240]	@ (80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	0c5b      	lsrs	r3, r3, #17
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	4a3b      	ldr	r2, [pc, #236]	@ (80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80042e2:	5cd3      	ldrb	r3, [r2, r3]
 80042e4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00d      	beq.n	800430c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80042f0:	4a38      	ldr	r2, [pc, #224]	@ (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	fb02 f303 	mul.w	r3, r2, r3
 80042fe:	61fb      	str	r3, [r7, #28]
 8004300:	e004      	b.n	800430c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	4a34      	ldr	r2, [pc, #208]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004306:	fb02 f303 	mul.w	r3, r2, r3
 800430a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800430c:	4b2e      	ldr	r3, [pc, #184]	@ (80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004314:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004318:	d102      	bne.n	8004320 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	61bb      	str	r3, [r7, #24]
      break;
 800431e:	e04a      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	005b      	lsls	r3, r3, #1
 8004324:	4a2d      	ldr	r2, [pc, #180]	@ (80043dc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004326:	fba2 2303 	umull	r2, r3, r2, r3
 800432a:	085b      	lsrs	r3, r3, #1
 800432c:	61bb      	str	r3, [r7, #24]
      break;
 800432e:	e042      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004330:	4b25      	ldr	r3, [pc, #148]	@ (80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800433c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004340:	d108      	bne.n	8004354 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800434c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004350:	61bb      	str	r3, [r7, #24]
 8004352:	e01f      	b.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800435a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800435e:	d109      	bne.n	8004374 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004360:	4b19      	ldr	r3, [pc, #100]	@ (80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800436c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004370:	61bb      	str	r3, [r7, #24]
 8004372:	e00f      	b.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800437a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800437e:	d11c      	bne.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004380:	4b11      	ldr	r3, [pc, #68]	@ (80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d016      	beq.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800438c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004390:	61bb      	str	r3, [r7, #24]
      break;
 8004392:	e012      	b.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004394:	e011      	b.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004396:	f7ff fe85 	bl	80040a4 <HAL_RCC_GetPCLK2Freq>
 800439a:	4602      	mov	r2, r0
 800439c:	4b0a      	ldr	r3, [pc, #40]	@ (80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	0b9b      	lsrs	r3, r3, #14
 80043a2:	f003 0303 	and.w	r3, r3, #3
 80043a6:	3301      	adds	r3, #1
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ae:	61bb      	str	r3, [r7, #24]
      break;
 80043b0:	e004      	b.n	80043bc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80043b2:	bf00      	nop
 80043b4:	e002      	b.n	80043bc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80043b6:	bf00      	nop
 80043b8:	e000      	b.n	80043bc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80043ba:	bf00      	nop
    }
  }
  return (frequency);
 80043bc:	69bb      	ldr	r3, [r7, #24]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3720      	adds	r7, #32
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	40021000 	.word	0x40021000
 80043cc:	08008d68 	.word	0x08008d68
 80043d0:	08008d78 	.word	0x08008d78
 80043d4:	007a1200 	.word	0x007a1200
 80043d8:	003d0900 	.word	0x003d0900
 80043dc:	aaaaaaab 	.word	0xaaaaaaab

080043e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e041      	b.n	8004476 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d106      	bne.n	800440c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fd fc16 	bl	8001c38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3304      	adds	r3, #4
 800441c:	4619      	mov	r1, r3
 800441e:	4610      	mov	r0, r2
 8004420:	f000 f940 	bl	80046a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
	...

08004480 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b01      	cmp	r3, #1
 8004492:	d001      	beq.n	8004498 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e032      	b.n	80044fe <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a18      	ldr	r2, [pc, #96]	@ (8004508 <HAL_TIM_Base_Start+0x88>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d00e      	beq.n	80044c8 <HAL_TIM_Base_Start+0x48>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044b2:	d009      	beq.n	80044c8 <HAL_TIM_Base_Start+0x48>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a14      	ldr	r2, [pc, #80]	@ (800450c <HAL_TIM_Base_Start+0x8c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d004      	beq.n	80044c8 <HAL_TIM_Base_Start+0x48>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a13      	ldr	r2, [pc, #76]	@ (8004510 <HAL_TIM_Base_Start+0x90>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d111      	bne.n	80044ec <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b06      	cmp	r3, #6
 80044d8:	d010      	beq.n	80044fc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f042 0201 	orr.w	r2, r2, #1
 80044e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ea:	e007      	b.n	80044fc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0201 	orr.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	bc80      	pop	{r7}
 8004506:	4770      	bx	lr
 8004508:	40012c00 	.word	0x40012c00
 800450c:	40000400 	.word	0x40000400
 8004510:	40000800 	.word	0x40000800

08004514 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004528:	2b01      	cmp	r3, #1
 800452a:	d101      	bne.n	8004530 <HAL_TIM_ConfigClockSource+0x1c>
 800452c:	2302      	movs	r3, #2
 800452e:	e0b4      	b.n	800469a <HAL_TIM_ConfigClockSource+0x186>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800454e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004556:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004568:	d03e      	beq.n	80045e8 <HAL_TIM_ConfigClockSource+0xd4>
 800456a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800456e:	f200 8087 	bhi.w	8004680 <HAL_TIM_ConfigClockSource+0x16c>
 8004572:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004576:	f000 8086 	beq.w	8004686 <HAL_TIM_ConfigClockSource+0x172>
 800457a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800457e:	d87f      	bhi.n	8004680 <HAL_TIM_ConfigClockSource+0x16c>
 8004580:	2b70      	cmp	r3, #112	@ 0x70
 8004582:	d01a      	beq.n	80045ba <HAL_TIM_ConfigClockSource+0xa6>
 8004584:	2b70      	cmp	r3, #112	@ 0x70
 8004586:	d87b      	bhi.n	8004680 <HAL_TIM_ConfigClockSource+0x16c>
 8004588:	2b60      	cmp	r3, #96	@ 0x60
 800458a:	d050      	beq.n	800462e <HAL_TIM_ConfigClockSource+0x11a>
 800458c:	2b60      	cmp	r3, #96	@ 0x60
 800458e:	d877      	bhi.n	8004680 <HAL_TIM_ConfigClockSource+0x16c>
 8004590:	2b50      	cmp	r3, #80	@ 0x50
 8004592:	d03c      	beq.n	800460e <HAL_TIM_ConfigClockSource+0xfa>
 8004594:	2b50      	cmp	r3, #80	@ 0x50
 8004596:	d873      	bhi.n	8004680 <HAL_TIM_ConfigClockSource+0x16c>
 8004598:	2b40      	cmp	r3, #64	@ 0x40
 800459a:	d058      	beq.n	800464e <HAL_TIM_ConfigClockSource+0x13a>
 800459c:	2b40      	cmp	r3, #64	@ 0x40
 800459e:	d86f      	bhi.n	8004680 <HAL_TIM_ConfigClockSource+0x16c>
 80045a0:	2b30      	cmp	r3, #48	@ 0x30
 80045a2:	d064      	beq.n	800466e <HAL_TIM_ConfigClockSource+0x15a>
 80045a4:	2b30      	cmp	r3, #48	@ 0x30
 80045a6:	d86b      	bhi.n	8004680 <HAL_TIM_ConfigClockSource+0x16c>
 80045a8:	2b20      	cmp	r3, #32
 80045aa:	d060      	beq.n	800466e <HAL_TIM_ConfigClockSource+0x15a>
 80045ac:	2b20      	cmp	r3, #32
 80045ae:	d867      	bhi.n	8004680 <HAL_TIM_ConfigClockSource+0x16c>
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d05c      	beq.n	800466e <HAL_TIM_ConfigClockSource+0x15a>
 80045b4:	2b10      	cmp	r3, #16
 80045b6:	d05a      	beq.n	800466e <HAL_TIM_ConfigClockSource+0x15a>
 80045b8:	e062      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045ca:	f000 f950 	bl	800486e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80045dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	609a      	str	r2, [r3, #8]
      break;
 80045e6:	e04f      	b.n	8004688 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045f8:	f000 f939 	bl	800486e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689a      	ldr	r2, [r3, #8]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800460a:	609a      	str	r2, [r3, #8]
      break;
 800460c:	e03c      	b.n	8004688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800461a:	461a      	mov	r2, r3
 800461c:	f000 f8b0 	bl	8004780 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2150      	movs	r1, #80	@ 0x50
 8004626:	4618      	mov	r0, r3
 8004628:	f000 f907 	bl	800483a <TIM_ITRx_SetConfig>
      break;
 800462c:	e02c      	b.n	8004688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800463a:	461a      	mov	r2, r3
 800463c:	f000 f8ce 	bl	80047dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2160      	movs	r1, #96	@ 0x60
 8004646:	4618      	mov	r0, r3
 8004648:	f000 f8f7 	bl	800483a <TIM_ITRx_SetConfig>
      break;
 800464c:	e01c      	b.n	8004688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800465a:	461a      	mov	r2, r3
 800465c:	f000 f890 	bl	8004780 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2140      	movs	r1, #64	@ 0x40
 8004666:	4618      	mov	r0, r3
 8004668:	f000 f8e7 	bl	800483a <TIM_ITRx_SetConfig>
      break;
 800466c:	e00c      	b.n	8004688 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4619      	mov	r1, r3
 8004678:	4610      	mov	r0, r2
 800467a:	f000 f8de 	bl	800483a <TIM_ITRx_SetConfig>
      break;
 800467e:	e003      	b.n	8004688 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	73fb      	strb	r3, [r7, #15]
      break;
 8004684:	e000      	b.n	8004688 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004686:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004698:	7bfb      	ldrb	r3, [r7, #15]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a2f      	ldr	r2, [pc, #188]	@ (8004774 <TIM_Base_SetConfig+0xd0>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d00b      	beq.n	80046d4 <TIM_Base_SetConfig+0x30>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046c2:	d007      	beq.n	80046d4 <TIM_Base_SetConfig+0x30>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a2c      	ldr	r2, [pc, #176]	@ (8004778 <TIM_Base_SetConfig+0xd4>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d003      	beq.n	80046d4 <TIM_Base_SetConfig+0x30>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a2b      	ldr	r2, [pc, #172]	@ (800477c <TIM_Base_SetConfig+0xd8>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d108      	bne.n	80046e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a22      	ldr	r2, [pc, #136]	@ (8004774 <TIM_Base_SetConfig+0xd0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d00b      	beq.n	8004706 <TIM_Base_SetConfig+0x62>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046f4:	d007      	beq.n	8004706 <TIM_Base_SetConfig+0x62>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a1f      	ldr	r2, [pc, #124]	@ (8004778 <TIM_Base_SetConfig+0xd4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d003      	beq.n	8004706 <TIM_Base_SetConfig+0x62>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a1e      	ldr	r2, [pc, #120]	@ (800477c <TIM_Base_SetConfig+0xd8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d108      	bne.n	8004718 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800470c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	4313      	orrs	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	4313      	orrs	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a0d      	ldr	r2, [pc, #52]	@ (8004774 <TIM_Base_SetConfig+0xd0>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d103      	bne.n	800474c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	691a      	ldr	r2, [r3, #16]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d005      	beq.n	800476a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	f023 0201 	bic.w	r2, r3, #1
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	611a      	str	r2, [r3, #16]
  }
}
 800476a:	bf00      	nop
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	bc80      	pop	{r7}
 8004772:	4770      	bx	lr
 8004774:	40012c00 	.word	0x40012c00
 8004778:	40000400 	.word	0x40000400
 800477c:	40000800 	.word	0x40000800

08004780 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	f023 0201 	bic.w	r2, r3, #1
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f023 030a 	bic.w	r3, r3, #10
 80047bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	621a      	str	r2, [r3, #32]
}
 80047d2:	bf00      	nop
 80047d4:	371c      	adds	r7, #28
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bc80      	pop	{r7}
 80047da:	4770      	bx	lr

080047dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047dc:	b480      	push	{r7}
 80047de:	b087      	sub	sp, #28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	f023 0210 	bic.w	r2, r3, #16
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004806:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	031b      	lsls	r3, r3, #12
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	4313      	orrs	r3, r2
 8004810:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004818:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	011b      	lsls	r3, r3, #4
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	4313      	orrs	r3, r2
 8004822:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	621a      	str	r2, [r3, #32]
}
 8004830:	bf00      	nop
 8004832:	371c      	adds	r7, #28
 8004834:	46bd      	mov	sp, r7
 8004836:	bc80      	pop	{r7}
 8004838:	4770      	bx	lr

0800483a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800483a:	b480      	push	{r7}
 800483c:	b085      	sub	sp, #20
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
 8004842:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004850:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4313      	orrs	r3, r2
 8004858:	f043 0307 	orr.w	r3, r3, #7
 800485c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	609a      	str	r2, [r3, #8]
}
 8004864:	bf00      	nop
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	bc80      	pop	{r7}
 800486c:	4770      	bx	lr

0800486e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800486e:	b480      	push	{r7}
 8004870:	b087      	sub	sp, #28
 8004872:	af00      	add	r7, sp, #0
 8004874:	60f8      	str	r0, [r7, #12]
 8004876:	60b9      	str	r1, [r7, #8]
 8004878:	607a      	str	r2, [r7, #4]
 800487a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004888:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	021a      	lsls	r2, r3, #8
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	431a      	orrs	r2, r3
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	4313      	orrs	r3, r2
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	4313      	orrs	r3, r2
 800489a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	609a      	str	r2, [r3, #8]
}
 80048a2:	bf00      	nop
 80048a4:	371c      	adds	r7, #28
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bc80      	pop	{r7}
 80048aa:	4770      	bx	lr

080048ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d101      	bne.n	80048c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048c0:	2302      	movs	r3, #2
 80048c2:	e046      	b.n	8004952 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a16      	ldr	r2, [pc, #88]	@ (800495c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d00e      	beq.n	8004926 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004910:	d009      	beq.n	8004926 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a12      	ldr	r2, [pc, #72]	@ (8004960 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d004      	beq.n	8004926 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a10      	ldr	r2, [pc, #64]	@ (8004964 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d10c      	bne.n	8004940 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800492c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	4313      	orrs	r3, r2
 8004936:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	bc80      	pop	{r7}
 800495a:	4770      	bx	lr
 800495c:	40012c00 	.word	0x40012c00
 8004960:	40000400 	.word	0x40000400
 8004964:	40000800 	.word	0x40000800

08004968 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e042      	b.n	8004a00 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d106      	bne.n	8004994 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7fd f970 	bl	8001c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2224      	movs	r2, #36	@ 0x24
 8004998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68da      	ldr	r2, [r3, #12]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 fdf9 	bl	80055a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691a      	ldr	r2, [r3, #16]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80049c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	695a      	ldr	r2, [r3, #20]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80049d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68da      	ldr	r2, [r3, #12]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2220      	movs	r2, #32
 80049ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2220      	movs	r2, #32
 80049f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b08a      	sub	sp, #40	@ 0x28
 8004a0c:	af02      	add	r7, sp, #8
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	603b      	str	r3, [r7, #0]
 8004a14:	4613      	mov	r3, r2
 8004a16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b20      	cmp	r3, #32
 8004a26:	d175      	bne.n	8004b14 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <HAL_UART_Transmit+0x2c>
 8004a2e:	88fb      	ldrh	r3, [r7, #6]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e06e      	b.n	8004b16 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2221      	movs	r2, #33	@ 0x21
 8004a42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a46:	f7fd fae5 	bl	8002014 <HAL_GetTick>
 8004a4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	88fa      	ldrh	r2, [r7, #6]
 8004a50:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	88fa      	ldrh	r2, [r7, #6]
 8004a56:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a60:	d108      	bne.n	8004a74 <HAL_UART_Transmit+0x6c>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d104      	bne.n	8004a74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	61bb      	str	r3, [r7, #24]
 8004a72:	e003      	b.n	8004a7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a7c:	e02e      	b.n	8004adc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2200      	movs	r2, #0
 8004a86:	2180      	movs	r1, #128	@ 0x80
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f000 fb97 	bl	80051bc <UART_WaitOnFlagUntilTimeout>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d005      	beq.n	8004aa0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2220      	movs	r2, #32
 8004a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e03a      	b.n	8004b16 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10b      	bne.n	8004abe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	881b      	ldrh	r3, [r3, #0]
 8004aaa:	461a      	mov	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ab4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	3302      	adds	r3, #2
 8004aba:	61bb      	str	r3, [r7, #24]
 8004abc:	e007      	b.n	8004ace <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	781a      	ldrb	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	3301      	adds	r3, #1
 8004acc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1cb      	bne.n	8004a7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	2200      	movs	r2, #0
 8004aee:	2140      	movs	r1, #64	@ 0x40
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f000 fb63 	bl	80051bc <UART_WaitOnFlagUntilTimeout>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d005      	beq.n	8004b08 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e006      	b.n	8004b16 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004b10:	2300      	movs	r3, #0
 8004b12:	e000      	b.n	8004b16 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004b14:	2302      	movs	r3, #2
  }
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3720      	adds	r7, #32
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b08a      	sub	sp, #40	@ 0x28
 8004b22:	af02      	add	r7, sp, #8
 8004b24:	60f8      	str	r0, [r7, #12]
 8004b26:	60b9      	str	r1, [r7, #8]
 8004b28:	603b      	str	r3, [r7, #0]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b20      	cmp	r3, #32
 8004b3c:	f040 8081 	bne.w	8004c42 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d002      	beq.n	8004b4c <HAL_UART_Receive+0x2e>
 8004b46:	88fb      	ldrh	r3, [r7, #6]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e079      	b.n	8004c44 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2222      	movs	r2, #34	@ 0x22
 8004b5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b64:	f7fd fa56 	bl	8002014 <HAL_GetTick>
 8004b68:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	88fa      	ldrh	r2, [r7, #6]
 8004b6e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	88fa      	ldrh	r2, [r7, #6]
 8004b74:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b7e:	d108      	bne.n	8004b92 <HAL_UART_Receive+0x74>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d104      	bne.n	8004b92 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	61bb      	str	r3, [r7, #24]
 8004b90:	e003      	b.n	8004b9a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b96:	2300      	movs	r3, #0
 8004b98:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004b9a:	e047      	b.n	8004c2c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	2120      	movs	r1, #32
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 fb08 	bl	80051bc <UART_WaitOnFlagUntilTimeout>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d005      	beq.n	8004bbe <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e042      	b.n	8004c44 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10c      	bne.n	8004bde <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	3302      	adds	r3, #2
 8004bda:	61bb      	str	r3, [r7, #24]
 8004bdc:	e01f      	b.n	8004c1e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004be6:	d007      	beq.n	8004bf8 <HAL_UART_Receive+0xda>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10a      	bne.n	8004c06 <HAL_UART_Receive+0xe8>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d106      	bne.n	8004c06 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	701a      	strb	r2, [r3, #0]
 8004c04:	e008      	b.n	8004c18 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	3b01      	subs	r3, #1
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1b2      	bne.n	8004b9c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	e000      	b.n	8004c44 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004c42:	2302      	movs	r3, #2
  }
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3720      	adds	r7, #32
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b0ba      	sub	sp, #232	@ 0xe8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c82:	f003 030f 	and.w	r3, r3, #15
 8004c86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004c8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10f      	bne.n	8004cb2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c96:	f003 0320 	and.w	r3, r3, #32
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d009      	beq.n	8004cb2 <HAL_UART_IRQHandler+0x66>
 8004c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ca2:	f003 0320 	and.w	r3, r3, #32
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fbbc 	bl	8005428 <UART_Receive_IT>
      return;
 8004cb0:	e25b      	b.n	800516a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004cb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f000 80de 	beq.w	8004e78 <HAL_UART_IRQHandler+0x22c>
 8004cbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d106      	bne.n	8004cd6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ccc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 80d1 	beq.w	8004e78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00b      	beq.n	8004cfa <HAL_UART_IRQHandler+0xae>
 8004ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d005      	beq.n	8004cfa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cf2:	f043 0201 	orr.w	r2, r3, #1
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cfe:	f003 0304 	and.w	r3, r3, #4
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00b      	beq.n	8004d1e <HAL_UART_IRQHandler+0xd2>
 8004d06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d005      	beq.n	8004d1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d16:	f043 0202 	orr.w	r2, r3, #2
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00b      	beq.n	8004d42 <HAL_UART_IRQHandler+0xf6>
 8004d2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d005      	beq.n	8004d42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d3a:	f043 0204 	orr.w	r2, r3, #4
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d011      	beq.n	8004d72 <HAL_UART_IRQHandler+0x126>
 8004d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d52:	f003 0320 	and.w	r3, r3, #32
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d105      	bne.n	8004d66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d005      	beq.n	8004d72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d6a:	f043 0208 	orr.w	r2, r3, #8
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f000 81f2 	beq.w	8005160 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d80:	f003 0320 	and.w	r3, r3, #32
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d008      	beq.n	8004d9a <HAL_UART_IRQHandler+0x14e>
 8004d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d8c:	f003 0320 	and.w	r3, r3, #32
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d002      	beq.n	8004d9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 fb47 	bl	8005428 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	bf14      	ite	ne
 8004da8:	2301      	movne	r3, #1
 8004daa:	2300      	moveq	r3, #0
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004db6:	f003 0308 	and.w	r3, r3, #8
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d103      	bne.n	8004dc6 <HAL_UART_IRQHandler+0x17a>
 8004dbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d04f      	beq.n	8004e66 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fa51 	bl	800526e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d041      	beq.n	8004e5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	3314      	adds	r3, #20
 8004de0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004de8:	e853 3f00 	ldrex	r3, [r3]
 8004dec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004df0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004df4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004df8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3314      	adds	r3, #20
 8004e02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004e06:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004e0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004e12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004e16:	e841 2300 	strex	r3, r2, [r1]
 8004e1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004e1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1d9      	bne.n	8004dda <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d013      	beq.n	8004e56 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e32:	4a7e      	ldr	r2, [pc, #504]	@ (800502c <HAL_UART_IRQHandler+0x3e0>)
 8004e34:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fd fe8c 	bl	8002b58 <HAL_DMA_Abort_IT>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d016      	beq.n	8004e74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e50:	4610      	mov	r0, r2
 8004e52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e54:	e00e      	b.n	8004e74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f99c 	bl	8005194 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e5c:	e00a      	b.n	8004e74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f998 	bl	8005194 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e64:	e006      	b.n	8004e74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f994 	bl	8005194 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004e72:	e175      	b.n	8005160 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e74:	bf00      	nop
    return;
 8004e76:	e173      	b.n	8005160 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	f040 814f 	bne.w	8005120 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e86:	f003 0310 	and.w	r3, r3, #16
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 8148 	beq.w	8005120 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e94:	f003 0310 	and.w	r3, r3, #16
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 8141 	beq.w	8005120 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60bb      	str	r3, [r7, #8]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	60bb      	str	r3, [r7, #8]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	60bb      	str	r3, [r7, #8]
 8004eb2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 80b6 	beq.w	8005030 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ed0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 8145 	beq.w	8005164 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ede:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	f080 813e 	bcs.w	8005164 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004eee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	2b20      	cmp	r3, #32
 8004ef8:	f000 8088 	beq.w	800500c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	330c      	adds	r3, #12
 8004f02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f06:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f0a:	e853 3f00 	ldrex	r3, [r3]
 8004f0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004f12:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f16:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f1a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	330c      	adds	r3, #12
 8004f24:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004f28:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f2c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f30:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f34:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f38:	e841 2300 	strex	r3, r2, [r1]
 8004f3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1d9      	bne.n	8004efc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	3314      	adds	r3, #20
 8004f4e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f52:	e853 3f00 	ldrex	r3, [r3]
 8004f56:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004f58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f5a:	f023 0301 	bic.w	r3, r3, #1
 8004f5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	3314      	adds	r3, #20
 8004f68:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f6c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004f70:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f72:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004f74:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004f78:	e841 2300 	strex	r3, r2, [r1]
 8004f7c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004f7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1e1      	bne.n	8004f48 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3314      	adds	r3, #20
 8004f8a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f8e:	e853 3f00 	ldrex	r3, [r3]
 8004f92:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004f94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3314      	adds	r3, #20
 8004fa4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004fa8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004faa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fac:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004fae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004fb0:	e841 2300 	strex	r3, r2, [r1]
 8004fb4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004fb6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1e3      	bne.n	8004f84 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	330c      	adds	r3, #12
 8004fd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fd4:	e853 3f00 	ldrex	r3, [r3]
 8004fd8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004fda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fdc:	f023 0310 	bic.w	r3, r3, #16
 8004fe0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	330c      	adds	r3, #12
 8004fea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004fee:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004ff0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ff4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ff6:	e841 2300 	strex	r3, r2, [r1]
 8004ffa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004ffc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1e3      	bne.n	8004fca <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005006:	4618      	mov	r0, r3
 8005008:	f7fd fd6b 	bl	8002ae2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2202      	movs	r2, #2
 8005010:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800501a:	b29b      	uxth	r3, r3
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	b29b      	uxth	r3, r3
 8005020:	4619      	mov	r1, r3
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f8bf 	bl	80051a6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005028:	e09c      	b.n	8005164 <HAL_UART_IRQHandler+0x518>
 800502a:	bf00      	nop
 800502c:	08005333 	.word	0x08005333
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005038:	b29b      	uxth	r3, r3
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005044:	b29b      	uxth	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 808e 	beq.w	8005168 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800504c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 8089 	beq.w	8005168 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	330c      	adds	r3, #12
 800505c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005060:	e853 3f00 	ldrex	r3, [r3]
 8005064:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005068:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800506c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	330c      	adds	r3, #12
 8005076:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800507a:	647a      	str	r2, [r7, #68]	@ 0x44
 800507c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005080:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005082:	e841 2300 	strex	r3, r2, [r1]
 8005086:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1e3      	bne.n	8005056 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	3314      	adds	r3, #20
 8005094:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005098:	e853 3f00 	ldrex	r3, [r3]
 800509c:	623b      	str	r3, [r7, #32]
   return(result);
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	f023 0301 	bic.w	r3, r3, #1
 80050a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3314      	adds	r3, #20
 80050ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80050b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80050b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050ba:	e841 2300 	strex	r3, r2, [r1]
 80050be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1e3      	bne.n	800508e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2220      	movs	r2, #32
 80050ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	330c      	adds	r3, #12
 80050da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	e853 3f00 	ldrex	r3, [r3]
 80050e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f023 0310 	bic.w	r3, r3, #16
 80050ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	330c      	adds	r3, #12
 80050f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80050f8:	61fa      	str	r2, [r7, #28]
 80050fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fc:	69b9      	ldr	r1, [r7, #24]
 80050fe:	69fa      	ldr	r2, [r7, #28]
 8005100:	e841 2300 	strex	r3, r2, [r1]
 8005104:	617b      	str	r3, [r7, #20]
   return(result);
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1e3      	bne.n	80050d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005112:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005116:	4619      	mov	r1, r3
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f844 	bl	80051a6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800511e:	e023      	b.n	8005168 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005124:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005128:	2b00      	cmp	r3, #0
 800512a:	d009      	beq.n	8005140 <HAL_UART_IRQHandler+0x4f4>
 800512c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005130:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005134:	2b00      	cmp	r3, #0
 8005136:	d003      	beq.n	8005140 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f90e 	bl	800535a <UART_Transmit_IT>
    return;
 800513e:	e014      	b.n	800516a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00e      	beq.n	800516a <HAL_UART_IRQHandler+0x51e>
 800514c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005154:	2b00      	cmp	r3, #0
 8005156:	d008      	beq.n	800516a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f94d 	bl	80053f8 <UART_EndTransmit_IT>
    return;
 800515e:	e004      	b.n	800516a <HAL_UART_IRQHandler+0x51e>
    return;
 8005160:	bf00      	nop
 8005162:	e002      	b.n	800516a <HAL_UART_IRQHandler+0x51e>
      return;
 8005164:	bf00      	nop
 8005166:	e000      	b.n	800516a <HAL_UART_IRQHandler+0x51e>
      return;
 8005168:	bf00      	nop
  }
}
 800516a:	37e8      	adds	r7, #232	@ 0xe8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	bc80      	pop	{r7}
 8005180:	4770      	bx	lr

08005182 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005182:	b480      	push	{r7}
 8005184:	b083      	sub	sp, #12
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800518a:	bf00      	nop
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	bc80      	pop	{r7}
 8005192:	4770      	bx	lr

08005194 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bc80      	pop	{r7}
 80051a4:	4770      	bx	lr

080051a6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b083      	sub	sp, #12
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
 80051ae:	460b      	mov	r3, r1
 80051b0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051b2:	bf00      	nop
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bc80      	pop	{r7}
 80051ba:	4770      	bx	lr

080051bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	603b      	str	r3, [r7, #0]
 80051c8:	4613      	mov	r3, r2
 80051ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051cc:	e03b      	b.n	8005246 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d4:	d037      	beq.n	8005246 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051d6:	f7fc ff1d 	bl	8002014 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	6a3a      	ldr	r2, [r7, #32]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d302      	bcc.n	80051ec <UART_WaitOnFlagUntilTimeout+0x30>
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e03a      	b.n	8005266 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	f003 0304 	and.w	r3, r3, #4
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d023      	beq.n	8005246 <UART_WaitOnFlagUntilTimeout+0x8a>
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2b80      	cmp	r3, #128	@ 0x80
 8005202:	d020      	beq.n	8005246 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	2b40      	cmp	r3, #64	@ 0x40
 8005208:	d01d      	beq.n	8005246 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0308 	and.w	r3, r3, #8
 8005214:	2b08      	cmp	r3, #8
 8005216:	d116      	bne.n	8005246 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005218:	2300      	movs	r3, #0
 800521a:	617b      	str	r3, [r7, #20]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	617b      	str	r3, [r7, #20]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	617b      	str	r3, [r7, #20]
 800522c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 f81d 	bl	800526e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2208      	movs	r2, #8
 8005238:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e00f      	b.n	8005266 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4013      	ands	r3, r2
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	429a      	cmp	r2, r3
 8005254:	bf0c      	ite	eq
 8005256:	2301      	moveq	r3, #1
 8005258:	2300      	movne	r3, #0
 800525a:	b2db      	uxtb	r3, r3
 800525c:	461a      	mov	r2, r3
 800525e:	79fb      	ldrb	r3, [r7, #7]
 8005260:	429a      	cmp	r2, r3
 8005262:	d0b4      	beq.n	80051ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3718      	adds	r7, #24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800526e:	b480      	push	{r7}
 8005270:	b095      	sub	sp, #84	@ 0x54
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	330c      	adds	r3, #12
 800527c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005280:	e853 3f00 	ldrex	r3, [r3]
 8005284:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005288:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800528c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	330c      	adds	r3, #12
 8005294:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005296:	643a      	str	r2, [r7, #64]	@ 0x40
 8005298:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800529c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800529e:	e841 2300 	strex	r3, r2, [r1]
 80052a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1e5      	bne.n	8005276 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	3314      	adds	r3, #20
 80052b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	e853 3f00 	ldrex	r3, [r3]
 80052b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	f023 0301 	bic.w	r3, r3, #1
 80052c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3314      	adds	r3, #20
 80052c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052d2:	e841 2300 	strex	r3, r2, [r1]
 80052d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1e5      	bne.n	80052aa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d119      	bne.n	800531a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	330c      	adds	r3, #12
 80052ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	e853 3f00 	ldrex	r3, [r3]
 80052f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	f023 0310 	bic.w	r3, r3, #16
 80052fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	330c      	adds	r3, #12
 8005304:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005306:	61ba      	str	r2, [r7, #24]
 8005308:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530a:	6979      	ldr	r1, [r7, #20]
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	e841 2300 	strex	r3, r2, [r1]
 8005312:	613b      	str	r3, [r7, #16]
   return(result);
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1e5      	bne.n	80052e6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2220      	movs	r2, #32
 800531e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005328:	bf00      	nop
 800532a:	3754      	adds	r7, #84	@ 0x54
 800532c:	46bd      	mov	sp, r7
 800532e:	bc80      	pop	{r7}
 8005330:	4770      	bx	lr

08005332 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b084      	sub	sp, #16
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f7ff ff21 	bl	8005194 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005352:	bf00      	nop
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800535a:	b480      	push	{r7}
 800535c:	b085      	sub	sp, #20
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b21      	cmp	r3, #33	@ 0x21
 800536c:	d13e      	bne.n	80053ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005376:	d114      	bne.n	80053a2 <UART_Transmit_IT+0x48>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d110      	bne.n	80053a2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	881b      	ldrh	r3, [r3, #0]
 800538a:	461a      	mov	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005394:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	1c9a      	adds	r2, r3, #2
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	621a      	str	r2, [r3, #32]
 80053a0:	e008      	b.n	80053b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	1c59      	adds	r1, r3, #1
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	6211      	str	r1, [r2, #32]
 80053ac:	781a      	ldrb	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	3b01      	subs	r3, #1
 80053bc:	b29b      	uxth	r3, r3
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	4619      	mov	r1, r3
 80053c2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10f      	bne.n	80053e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68da      	ldr	r2, [r3, #12]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80053d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68da      	ldr	r2, [r3, #12]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053e8:	2300      	movs	r3, #0
 80053ea:	e000      	b.n	80053ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053ec:	2302      	movs	r3, #2
  }
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bc80      	pop	{r7}
 80053f6:	4770      	bx	lr

080053f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68da      	ldr	r2, [r3, #12]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800540e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2220      	movs	r2, #32
 8005414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f7ff fea9 	bl	8005170 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b08c      	sub	sp, #48	@ 0x30
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b22      	cmp	r3, #34	@ 0x22
 800543a:	f040 80ae 	bne.w	800559a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005446:	d117      	bne.n	8005478 <UART_Receive_IT+0x50>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d113      	bne.n	8005478 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005450:	2300      	movs	r3, #0
 8005452:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005458:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	b29b      	uxth	r3, r3
 8005462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005466:	b29a      	uxth	r2, r3
 8005468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800546a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005470:	1c9a      	adds	r2, r3, #2
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	629a      	str	r2, [r3, #40]	@ 0x28
 8005476:	e026      	b.n	80054c6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800547c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800547e:	2300      	movs	r3, #0
 8005480:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800548a:	d007      	beq.n	800549c <UART_Receive_IT+0x74>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10a      	bne.n	80054aa <UART_Receive_IT+0x82>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d106      	bne.n	80054aa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a6:	701a      	strb	r2, [r3, #0]
 80054a8:	e008      	b.n	80054bc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ba:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	3b01      	subs	r3, #1
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	4619      	mov	r1, r3
 80054d4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d15d      	bne.n	8005596 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68da      	ldr	r2, [r3, #12]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 0220 	bic.w	r2, r2, #32
 80054e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68da      	ldr	r2, [r3, #12]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80054f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	695a      	ldr	r2, [r3, #20]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 0201 	bic.w	r2, r2, #1
 8005508:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2220      	movs	r2, #32
 800550e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800551c:	2b01      	cmp	r3, #1
 800551e:	d135      	bne.n	800558c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	330c      	adds	r3, #12
 800552c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	e853 3f00 	ldrex	r3, [r3]
 8005534:	613b      	str	r3, [r7, #16]
   return(result);
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	f023 0310 	bic.w	r3, r3, #16
 800553c:	627b      	str	r3, [r7, #36]	@ 0x24
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	330c      	adds	r3, #12
 8005544:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005546:	623a      	str	r2, [r7, #32]
 8005548:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554a:	69f9      	ldr	r1, [r7, #28]
 800554c:	6a3a      	ldr	r2, [r7, #32]
 800554e:	e841 2300 	strex	r3, r2, [r1]
 8005552:	61bb      	str	r3, [r7, #24]
   return(result);
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1e5      	bne.n	8005526 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0310 	and.w	r3, r3, #16
 8005564:	2b10      	cmp	r3, #16
 8005566:	d10a      	bne.n	800557e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005568:	2300      	movs	r3, #0
 800556a:	60fb      	str	r3, [r7, #12]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	60fb      	str	r3, [r7, #12]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	60fb      	str	r3, [r7, #12]
 800557c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005582:	4619      	mov	r1, r3
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7ff fe0e 	bl	80051a6 <HAL_UARTEx_RxEventCallback>
 800558a:	e002      	b.n	8005592 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7ff fdf8 	bl	8005182 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005592:	2300      	movs	r3, #0
 8005594:	e002      	b.n	800559c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005596:	2300      	movs	r3, #0
 8005598:	e000      	b.n	800559c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800559a:	2302      	movs	r3, #2
  }
}
 800559c:	4618      	mov	r0, r3
 800559e:	3730      	adds	r7, #48	@ 0x30
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68da      	ldr	r2, [r3, #12]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	689a      	ldr	r2, [r3, #8]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	431a      	orrs	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80055de:	f023 030c 	bic.w	r3, r3, #12
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	6812      	ldr	r2, [r2, #0]
 80055e6:	68b9      	ldr	r1, [r7, #8]
 80055e8:	430b      	orrs	r3, r1
 80055ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	699a      	ldr	r2, [r3, #24]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a2c      	ldr	r2, [pc, #176]	@ (80056b8 <UART_SetConfig+0x114>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d103      	bne.n	8005614 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800560c:	f7fe fd4a 	bl	80040a4 <HAL_RCC_GetPCLK2Freq>
 8005610:	60f8      	str	r0, [r7, #12]
 8005612:	e002      	b.n	800561a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005614:	f7fe fd32 	bl	800407c <HAL_RCC_GetPCLK1Freq>
 8005618:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	4613      	mov	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4413      	add	r3, r2
 8005622:	009a      	lsls	r2, r3, #2
 8005624:	441a      	add	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005630:	4a22      	ldr	r2, [pc, #136]	@ (80056bc <UART_SetConfig+0x118>)
 8005632:	fba2 2303 	umull	r2, r3, r2, r3
 8005636:	095b      	lsrs	r3, r3, #5
 8005638:	0119      	lsls	r1, r3, #4
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	4613      	mov	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	009a      	lsls	r2, r3, #2
 8005644:	441a      	add	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005650:	4b1a      	ldr	r3, [pc, #104]	@ (80056bc <UART_SetConfig+0x118>)
 8005652:	fba3 0302 	umull	r0, r3, r3, r2
 8005656:	095b      	lsrs	r3, r3, #5
 8005658:	2064      	movs	r0, #100	@ 0x64
 800565a:	fb00 f303 	mul.w	r3, r0, r3
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	011b      	lsls	r3, r3, #4
 8005662:	3332      	adds	r3, #50	@ 0x32
 8005664:	4a15      	ldr	r2, [pc, #84]	@ (80056bc <UART_SetConfig+0x118>)
 8005666:	fba2 2303 	umull	r2, r3, r2, r3
 800566a:	095b      	lsrs	r3, r3, #5
 800566c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005670:	4419      	add	r1, r3
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	4613      	mov	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	009a      	lsls	r2, r3, #2
 800567c:	441a      	add	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	fbb2 f2f3 	udiv	r2, r2, r3
 8005688:	4b0c      	ldr	r3, [pc, #48]	@ (80056bc <UART_SetConfig+0x118>)
 800568a:	fba3 0302 	umull	r0, r3, r3, r2
 800568e:	095b      	lsrs	r3, r3, #5
 8005690:	2064      	movs	r0, #100	@ 0x64
 8005692:	fb00 f303 	mul.w	r3, r0, r3
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	011b      	lsls	r3, r3, #4
 800569a:	3332      	adds	r3, #50	@ 0x32
 800569c:	4a07      	ldr	r2, [pc, #28]	@ (80056bc <UART_SetConfig+0x118>)
 800569e:	fba2 2303 	umull	r2, r3, r2, r3
 80056a2:	095b      	lsrs	r3, r3, #5
 80056a4:	f003 020f 	and.w	r2, r3, #15
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	440a      	add	r2, r1
 80056ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80056b0:	bf00      	nop
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	40013800 	.word	0x40013800
 80056bc:	51eb851f 	.word	0x51eb851f

080056c0 <atoi>:
 80056c0:	220a      	movs	r2, #10
 80056c2:	2100      	movs	r1, #0
 80056c4:	f000 b87a 	b.w	80057bc <strtol>

080056c8 <_strtol_l.isra.0>:
 80056c8:	2b24      	cmp	r3, #36	@ 0x24
 80056ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056ce:	4686      	mov	lr, r0
 80056d0:	4690      	mov	r8, r2
 80056d2:	d801      	bhi.n	80056d8 <_strtol_l.isra.0+0x10>
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d106      	bne.n	80056e6 <_strtol_l.isra.0+0x1e>
 80056d8:	f000 fe60 	bl	800639c <__errno>
 80056dc:	2316      	movs	r3, #22
 80056de:	6003      	str	r3, [r0, #0]
 80056e0:	2000      	movs	r0, #0
 80056e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056e6:	460d      	mov	r5, r1
 80056e8:	4833      	ldr	r0, [pc, #204]	@ (80057b8 <_strtol_l.isra.0+0xf0>)
 80056ea:	462a      	mov	r2, r5
 80056ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80056f0:	5d06      	ldrb	r6, [r0, r4]
 80056f2:	f016 0608 	ands.w	r6, r6, #8
 80056f6:	d1f8      	bne.n	80056ea <_strtol_l.isra.0+0x22>
 80056f8:	2c2d      	cmp	r4, #45	@ 0x2d
 80056fa:	d110      	bne.n	800571e <_strtol_l.isra.0+0x56>
 80056fc:	2601      	movs	r6, #1
 80056fe:	782c      	ldrb	r4, [r5, #0]
 8005700:	1c95      	adds	r5, r2, #2
 8005702:	f033 0210 	bics.w	r2, r3, #16
 8005706:	d115      	bne.n	8005734 <_strtol_l.isra.0+0x6c>
 8005708:	2c30      	cmp	r4, #48	@ 0x30
 800570a:	d10d      	bne.n	8005728 <_strtol_l.isra.0+0x60>
 800570c:	782a      	ldrb	r2, [r5, #0]
 800570e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005712:	2a58      	cmp	r2, #88	@ 0x58
 8005714:	d108      	bne.n	8005728 <_strtol_l.isra.0+0x60>
 8005716:	786c      	ldrb	r4, [r5, #1]
 8005718:	3502      	adds	r5, #2
 800571a:	2310      	movs	r3, #16
 800571c:	e00a      	b.n	8005734 <_strtol_l.isra.0+0x6c>
 800571e:	2c2b      	cmp	r4, #43	@ 0x2b
 8005720:	bf04      	itt	eq
 8005722:	782c      	ldrbeq	r4, [r5, #0]
 8005724:	1c95      	addeq	r5, r2, #2
 8005726:	e7ec      	b.n	8005702 <_strtol_l.isra.0+0x3a>
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1f6      	bne.n	800571a <_strtol_l.isra.0+0x52>
 800572c:	2c30      	cmp	r4, #48	@ 0x30
 800572e:	bf14      	ite	ne
 8005730:	230a      	movne	r3, #10
 8005732:	2308      	moveq	r3, #8
 8005734:	2200      	movs	r2, #0
 8005736:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800573a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800573e:	fbbc f9f3 	udiv	r9, ip, r3
 8005742:	4610      	mov	r0, r2
 8005744:	fb03 ca19 	mls	sl, r3, r9, ip
 8005748:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800574c:	2f09      	cmp	r7, #9
 800574e:	d80f      	bhi.n	8005770 <_strtol_l.isra.0+0xa8>
 8005750:	463c      	mov	r4, r7
 8005752:	42a3      	cmp	r3, r4
 8005754:	dd1b      	ble.n	800578e <_strtol_l.isra.0+0xc6>
 8005756:	1c57      	adds	r7, r2, #1
 8005758:	d007      	beq.n	800576a <_strtol_l.isra.0+0xa2>
 800575a:	4581      	cmp	r9, r0
 800575c:	d314      	bcc.n	8005788 <_strtol_l.isra.0+0xc0>
 800575e:	d101      	bne.n	8005764 <_strtol_l.isra.0+0x9c>
 8005760:	45a2      	cmp	sl, r4
 8005762:	db11      	blt.n	8005788 <_strtol_l.isra.0+0xc0>
 8005764:	2201      	movs	r2, #1
 8005766:	fb00 4003 	mla	r0, r0, r3, r4
 800576a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800576e:	e7eb      	b.n	8005748 <_strtol_l.isra.0+0x80>
 8005770:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005774:	2f19      	cmp	r7, #25
 8005776:	d801      	bhi.n	800577c <_strtol_l.isra.0+0xb4>
 8005778:	3c37      	subs	r4, #55	@ 0x37
 800577a:	e7ea      	b.n	8005752 <_strtol_l.isra.0+0x8a>
 800577c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005780:	2f19      	cmp	r7, #25
 8005782:	d804      	bhi.n	800578e <_strtol_l.isra.0+0xc6>
 8005784:	3c57      	subs	r4, #87	@ 0x57
 8005786:	e7e4      	b.n	8005752 <_strtol_l.isra.0+0x8a>
 8005788:	f04f 32ff 	mov.w	r2, #4294967295
 800578c:	e7ed      	b.n	800576a <_strtol_l.isra.0+0xa2>
 800578e:	1c53      	adds	r3, r2, #1
 8005790:	d108      	bne.n	80057a4 <_strtol_l.isra.0+0xdc>
 8005792:	2322      	movs	r3, #34	@ 0x22
 8005794:	4660      	mov	r0, ip
 8005796:	f8ce 3000 	str.w	r3, [lr]
 800579a:	f1b8 0f00 	cmp.w	r8, #0
 800579e:	d0a0      	beq.n	80056e2 <_strtol_l.isra.0+0x1a>
 80057a0:	1e69      	subs	r1, r5, #1
 80057a2:	e006      	b.n	80057b2 <_strtol_l.isra.0+0xea>
 80057a4:	b106      	cbz	r6, 80057a8 <_strtol_l.isra.0+0xe0>
 80057a6:	4240      	negs	r0, r0
 80057a8:	f1b8 0f00 	cmp.w	r8, #0
 80057ac:	d099      	beq.n	80056e2 <_strtol_l.isra.0+0x1a>
 80057ae:	2a00      	cmp	r2, #0
 80057b0:	d1f6      	bne.n	80057a0 <_strtol_l.isra.0+0xd8>
 80057b2:	f8c8 1000 	str.w	r1, [r8]
 80057b6:	e794      	b.n	80056e2 <_strtol_l.isra.0+0x1a>
 80057b8:	08008d7b 	.word	0x08008d7b

080057bc <strtol>:
 80057bc:	4613      	mov	r3, r2
 80057be:	460a      	mov	r2, r1
 80057c0:	4601      	mov	r1, r0
 80057c2:	4802      	ldr	r0, [pc, #8]	@ (80057cc <strtol+0x10>)
 80057c4:	6800      	ldr	r0, [r0, #0]
 80057c6:	f7ff bf7f 	b.w	80056c8 <_strtol_l.isra.0>
 80057ca:	bf00      	nop
 80057cc:	20000028 	.word	0x20000028

080057d0 <__cvt>:
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057d6:	461d      	mov	r5, r3
 80057d8:	bfbb      	ittet	lt
 80057da:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80057de:	461d      	movlt	r5, r3
 80057e0:	2300      	movge	r3, #0
 80057e2:	232d      	movlt	r3, #45	@ 0x2d
 80057e4:	b088      	sub	sp, #32
 80057e6:	4614      	mov	r4, r2
 80057e8:	bfb8      	it	lt
 80057ea:	4614      	movlt	r4, r2
 80057ec:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80057ee:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80057f0:	7013      	strb	r3, [r2, #0]
 80057f2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80057f4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80057f8:	f023 0820 	bic.w	r8, r3, #32
 80057fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005800:	d005      	beq.n	800580e <__cvt+0x3e>
 8005802:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005806:	d100      	bne.n	800580a <__cvt+0x3a>
 8005808:	3601      	adds	r6, #1
 800580a:	2302      	movs	r3, #2
 800580c:	e000      	b.n	8005810 <__cvt+0x40>
 800580e:	2303      	movs	r3, #3
 8005810:	aa07      	add	r2, sp, #28
 8005812:	9204      	str	r2, [sp, #16]
 8005814:	aa06      	add	r2, sp, #24
 8005816:	e9cd a202 	strd	sl, r2, [sp, #8]
 800581a:	e9cd 3600 	strd	r3, r6, [sp]
 800581e:	4622      	mov	r2, r4
 8005820:	462b      	mov	r3, r5
 8005822:	f000 fe81 	bl	8006528 <_dtoa_r>
 8005826:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800582a:	4607      	mov	r7, r0
 800582c:	d119      	bne.n	8005862 <__cvt+0x92>
 800582e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005830:	07db      	lsls	r3, r3, #31
 8005832:	d50e      	bpl.n	8005852 <__cvt+0x82>
 8005834:	eb00 0906 	add.w	r9, r0, r6
 8005838:	2200      	movs	r2, #0
 800583a:	2300      	movs	r3, #0
 800583c:	4620      	mov	r0, r4
 800583e:	4629      	mov	r1, r5
 8005840:	f7fb f8b2 	bl	80009a8 <__aeabi_dcmpeq>
 8005844:	b108      	cbz	r0, 800584a <__cvt+0x7a>
 8005846:	f8cd 901c 	str.w	r9, [sp, #28]
 800584a:	2230      	movs	r2, #48	@ 0x30
 800584c:	9b07      	ldr	r3, [sp, #28]
 800584e:	454b      	cmp	r3, r9
 8005850:	d31e      	bcc.n	8005890 <__cvt+0xc0>
 8005852:	4638      	mov	r0, r7
 8005854:	9b07      	ldr	r3, [sp, #28]
 8005856:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005858:	1bdb      	subs	r3, r3, r7
 800585a:	6013      	str	r3, [r2, #0]
 800585c:	b008      	add	sp, #32
 800585e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005862:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005866:	eb00 0906 	add.w	r9, r0, r6
 800586a:	d1e5      	bne.n	8005838 <__cvt+0x68>
 800586c:	7803      	ldrb	r3, [r0, #0]
 800586e:	2b30      	cmp	r3, #48	@ 0x30
 8005870:	d10a      	bne.n	8005888 <__cvt+0xb8>
 8005872:	2200      	movs	r2, #0
 8005874:	2300      	movs	r3, #0
 8005876:	4620      	mov	r0, r4
 8005878:	4629      	mov	r1, r5
 800587a:	f7fb f895 	bl	80009a8 <__aeabi_dcmpeq>
 800587e:	b918      	cbnz	r0, 8005888 <__cvt+0xb8>
 8005880:	f1c6 0601 	rsb	r6, r6, #1
 8005884:	f8ca 6000 	str.w	r6, [sl]
 8005888:	f8da 3000 	ldr.w	r3, [sl]
 800588c:	4499      	add	r9, r3
 800588e:	e7d3      	b.n	8005838 <__cvt+0x68>
 8005890:	1c59      	adds	r1, r3, #1
 8005892:	9107      	str	r1, [sp, #28]
 8005894:	701a      	strb	r2, [r3, #0]
 8005896:	e7d9      	b.n	800584c <__cvt+0x7c>

08005898 <__exponent>:
 8005898:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800589a:	2900      	cmp	r1, #0
 800589c:	bfb6      	itet	lt
 800589e:	232d      	movlt	r3, #45	@ 0x2d
 80058a0:	232b      	movge	r3, #43	@ 0x2b
 80058a2:	4249      	neglt	r1, r1
 80058a4:	2909      	cmp	r1, #9
 80058a6:	7002      	strb	r2, [r0, #0]
 80058a8:	7043      	strb	r3, [r0, #1]
 80058aa:	dd29      	ble.n	8005900 <__exponent+0x68>
 80058ac:	f10d 0307 	add.w	r3, sp, #7
 80058b0:	461d      	mov	r5, r3
 80058b2:	270a      	movs	r7, #10
 80058b4:	fbb1 f6f7 	udiv	r6, r1, r7
 80058b8:	461a      	mov	r2, r3
 80058ba:	fb07 1416 	mls	r4, r7, r6, r1
 80058be:	3430      	adds	r4, #48	@ 0x30
 80058c0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80058c4:	460c      	mov	r4, r1
 80058c6:	2c63      	cmp	r4, #99	@ 0x63
 80058c8:	4631      	mov	r1, r6
 80058ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80058ce:	dcf1      	bgt.n	80058b4 <__exponent+0x1c>
 80058d0:	3130      	adds	r1, #48	@ 0x30
 80058d2:	1e94      	subs	r4, r2, #2
 80058d4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80058d8:	4623      	mov	r3, r4
 80058da:	1c41      	adds	r1, r0, #1
 80058dc:	42ab      	cmp	r3, r5
 80058de:	d30a      	bcc.n	80058f6 <__exponent+0x5e>
 80058e0:	f10d 0309 	add.w	r3, sp, #9
 80058e4:	1a9b      	subs	r3, r3, r2
 80058e6:	42ac      	cmp	r4, r5
 80058e8:	bf88      	it	hi
 80058ea:	2300      	movhi	r3, #0
 80058ec:	3302      	adds	r3, #2
 80058ee:	4403      	add	r3, r0
 80058f0:	1a18      	subs	r0, r3, r0
 80058f2:	b003      	add	sp, #12
 80058f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058f6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80058fa:	f801 6f01 	strb.w	r6, [r1, #1]!
 80058fe:	e7ed      	b.n	80058dc <__exponent+0x44>
 8005900:	2330      	movs	r3, #48	@ 0x30
 8005902:	3130      	adds	r1, #48	@ 0x30
 8005904:	7083      	strb	r3, [r0, #2]
 8005906:	70c1      	strb	r1, [r0, #3]
 8005908:	1d03      	adds	r3, r0, #4
 800590a:	e7f1      	b.n	80058f0 <__exponent+0x58>

0800590c <_printf_float>:
 800590c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005910:	b091      	sub	sp, #68	@ 0x44
 8005912:	460c      	mov	r4, r1
 8005914:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005918:	4616      	mov	r6, r2
 800591a:	461f      	mov	r7, r3
 800591c:	4605      	mov	r5, r0
 800591e:	f000 fcf3 	bl	8006308 <_localeconv_r>
 8005922:	6803      	ldr	r3, [r0, #0]
 8005924:	4618      	mov	r0, r3
 8005926:	9308      	str	r3, [sp, #32]
 8005928:	f7fa fc12 	bl	8000150 <strlen>
 800592c:	2300      	movs	r3, #0
 800592e:	930e      	str	r3, [sp, #56]	@ 0x38
 8005930:	f8d8 3000 	ldr.w	r3, [r8]
 8005934:	9009      	str	r0, [sp, #36]	@ 0x24
 8005936:	3307      	adds	r3, #7
 8005938:	f023 0307 	bic.w	r3, r3, #7
 800593c:	f103 0208 	add.w	r2, r3, #8
 8005940:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005944:	f8d4 b000 	ldr.w	fp, [r4]
 8005948:	f8c8 2000 	str.w	r2, [r8]
 800594c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005950:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005954:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005956:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800595a:	f04f 32ff 	mov.w	r2, #4294967295
 800595e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005962:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005966:	4b9c      	ldr	r3, [pc, #624]	@ (8005bd8 <_printf_float+0x2cc>)
 8005968:	f7fb f850 	bl	8000a0c <__aeabi_dcmpun>
 800596c:	bb70      	cbnz	r0, 80059cc <_printf_float+0xc0>
 800596e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005972:	f04f 32ff 	mov.w	r2, #4294967295
 8005976:	4b98      	ldr	r3, [pc, #608]	@ (8005bd8 <_printf_float+0x2cc>)
 8005978:	f7fb f82a 	bl	80009d0 <__aeabi_dcmple>
 800597c:	bb30      	cbnz	r0, 80059cc <_printf_float+0xc0>
 800597e:	2200      	movs	r2, #0
 8005980:	2300      	movs	r3, #0
 8005982:	4640      	mov	r0, r8
 8005984:	4649      	mov	r1, r9
 8005986:	f7fb f819 	bl	80009bc <__aeabi_dcmplt>
 800598a:	b110      	cbz	r0, 8005992 <_printf_float+0x86>
 800598c:	232d      	movs	r3, #45	@ 0x2d
 800598e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005992:	4a92      	ldr	r2, [pc, #584]	@ (8005bdc <_printf_float+0x2d0>)
 8005994:	4b92      	ldr	r3, [pc, #584]	@ (8005be0 <_printf_float+0x2d4>)
 8005996:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800599a:	bf8c      	ite	hi
 800599c:	4690      	movhi	r8, r2
 800599e:	4698      	movls	r8, r3
 80059a0:	2303      	movs	r3, #3
 80059a2:	f04f 0900 	mov.w	r9, #0
 80059a6:	6123      	str	r3, [r4, #16]
 80059a8:	f02b 0304 	bic.w	r3, fp, #4
 80059ac:	6023      	str	r3, [r4, #0]
 80059ae:	4633      	mov	r3, r6
 80059b0:	4621      	mov	r1, r4
 80059b2:	4628      	mov	r0, r5
 80059b4:	9700      	str	r7, [sp, #0]
 80059b6:	aa0f      	add	r2, sp, #60	@ 0x3c
 80059b8:	f000 f9d4 	bl	8005d64 <_printf_common>
 80059bc:	3001      	adds	r0, #1
 80059be:	f040 8090 	bne.w	8005ae2 <_printf_float+0x1d6>
 80059c2:	f04f 30ff 	mov.w	r0, #4294967295
 80059c6:	b011      	add	sp, #68	@ 0x44
 80059c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059cc:	4642      	mov	r2, r8
 80059ce:	464b      	mov	r3, r9
 80059d0:	4640      	mov	r0, r8
 80059d2:	4649      	mov	r1, r9
 80059d4:	f7fb f81a 	bl	8000a0c <__aeabi_dcmpun>
 80059d8:	b148      	cbz	r0, 80059ee <_printf_float+0xe2>
 80059da:	464b      	mov	r3, r9
 80059dc:	2b00      	cmp	r3, #0
 80059de:	bfb8      	it	lt
 80059e0:	232d      	movlt	r3, #45	@ 0x2d
 80059e2:	4a80      	ldr	r2, [pc, #512]	@ (8005be4 <_printf_float+0x2d8>)
 80059e4:	bfb8      	it	lt
 80059e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80059ea:	4b7f      	ldr	r3, [pc, #508]	@ (8005be8 <_printf_float+0x2dc>)
 80059ec:	e7d3      	b.n	8005996 <_printf_float+0x8a>
 80059ee:	6863      	ldr	r3, [r4, #4]
 80059f0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80059f4:	1c5a      	adds	r2, r3, #1
 80059f6:	d13f      	bne.n	8005a78 <_printf_float+0x16c>
 80059f8:	2306      	movs	r3, #6
 80059fa:	6063      	str	r3, [r4, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005a02:	6023      	str	r3, [r4, #0]
 8005a04:	9206      	str	r2, [sp, #24]
 8005a06:	aa0e      	add	r2, sp, #56	@ 0x38
 8005a08:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005a0c:	aa0d      	add	r2, sp, #52	@ 0x34
 8005a0e:	9203      	str	r2, [sp, #12]
 8005a10:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005a14:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005a18:	6863      	ldr	r3, [r4, #4]
 8005a1a:	4642      	mov	r2, r8
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	4628      	mov	r0, r5
 8005a20:	464b      	mov	r3, r9
 8005a22:	910a      	str	r1, [sp, #40]	@ 0x28
 8005a24:	f7ff fed4 	bl	80057d0 <__cvt>
 8005a28:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005a2a:	4680      	mov	r8, r0
 8005a2c:	2947      	cmp	r1, #71	@ 0x47
 8005a2e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005a30:	d128      	bne.n	8005a84 <_printf_float+0x178>
 8005a32:	1cc8      	adds	r0, r1, #3
 8005a34:	db02      	blt.n	8005a3c <_printf_float+0x130>
 8005a36:	6863      	ldr	r3, [r4, #4]
 8005a38:	4299      	cmp	r1, r3
 8005a3a:	dd40      	ble.n	8005abe <_printf_float+0x1b2>
 8005a3c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005a40:	fa5f fa8a 	uxtb.w	sl, sl
 8005a44:	4652      	mov	r2, sl
 8005a46:	3901      	subs	r1, #1
 8005a48:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005a4c:	910d      	str	r1, [sp, #52]	@ 0x34
 8005a4e:	f7ff ff23 	bl	8005898 <__exponent>
 8005a52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005a54:	4681      	mov	r9, r0
 8005a56:	1813      	adds	r3, r2, r0
 8005a58:	2a01      	cmp	r2, #1
 8005a5a:	6123      	str	r3, [r4, #16]
 8005a5c:	dc02      	bgt.n	8005a64 <_printf_float+0x158>
 8005a5e:	6822      	ldr	r2, [r4, #0]
 8005a60:	07d2      	lsls	r2, r2, #31
 8005a62:	d501      	bpl.n	8005a68 <_printf_float+0x15c>
 8005a64:	3301      	adds	r3, #1
 8005a66:	6123      	str	r3, [r4, #16]
 8005a68:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d09e      	beq.n	80059ae <_printf_float+0xa2>
 8005a70:	232d      	movs	r3, #45	@ 0x2d
 8005a72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a76:	e79a      	b.n	80059ae <_printf_float+0xa2>
 8005a78:	2947      	cmp	r1, #71	@ 0x47
 8005a7a:	d1bf      	bne.n	80059fc <_printf_float+0xf0>
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1bd      	bne.n	80059fc <_printf_float+0xf0>
 8005a80:	2301      	movs	r3, #1
 8005a82:	e7ba      	b.n	80059fa <_printf_float+0xee>
 8005a84:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a88:	d9dc      	bls.n	8005a44 <_printf_float+0x138>
 8005a8a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005a8e:	d118      	bne.n	8005ac2 <_printf_float+0x1b6>
 8005a90:	2900      	cmp	r1, #0
 8005a92:	6863      	ldr	r3, [r4, #4]
 8005a94:	dd0b      	ble.n	8005aae <_printf_float+0x1a2>
 8005a96:	6121      	str	r1, [r4, #16]
 8005a98:	b913      	cbnz	r3, 8005aa0 <_printf_float+0x194>
 8005a9a:	6822      	ldr	r2, [r4, #0]
 8005a9c:	07d0      	lsls	r0, r2, #31
 8005a9e:	d502      	bpl.n	8005aa6 <_printf_float+0x19a>
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	440b      	add	r3, r1
 8005aa4:	6123      	str	r3, [r4, #16]
 8005aa6:	f04f 0900 	mov.w	r9, #0
 8005aaa:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005aac:	e7dc      	b.n	8005a68 <_printf_float+0x15c>
 8005aae:	b913      	cbnz	r3, 8005ab6 <_printf_float+0x1aa>
 8005ab0:	6822      	ldr	r2, [r4, #0]
 8005ab2:	07d2      	lsls	r2, r2, #31
 8005ab4:	d501      	bpl.n	8005aba <_printf_float+0x1ae>
 8005ab6:	3302      	adds	r3, #2
 8005ab8:	e7f4      	b.n	8005aa4 <_printf_float+0x198>
 8005aba:	2301      	movs	r3, #1
 8005abc:	e7f2      	b.n	8005aa4 <_printf_float+0x198>
 8005abe:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005ac2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ac4:	4299      	cmp	r1, r3
 8005ac6:	db05      	blt.n	8005ad4 <_printf_float+0x1c8>
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	6121      	str	r1, [r4, #16]
 8005acc:	07d8      	lsls	r0, r3, #31
 8005ace:	d5ea      	bpl.n	8005aa6 <_printf_float+0x19a>
 8005ad0:	1c4b      	adds	r3, r1, #1
 8005ad2:	e7e7      	b.n	8005aa4 <_printf_float+0x198>
 8005ad4:	2900      	cmp	r1, #0
 8005ad6:	bfcc      	ite	gt
 8005ad8:	2201      	movgt	r2, #1
 8005ada:	f1c1 0202 	rsble	r2, r1, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	e7e0      	b.n	8005aa4 <_printf_float+0x198>
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	055a      	lsls	r2, r3, #21
 8005ae6:	d407      	bmi.n	8005af8 <_printf_float+0x1ec>
 8005ae8:	6923      	ldr	r3, [r4, #16]
 8005aea:	4642      	mov	r2, r8
 8005aec:	4631      	mov	r1, r6
 8005aee:	4628      	mov	r0, r5
 8005af0:	47b8      	blx	r7
 8005af2:	3001      	adds	r0, #1
 8005af4:	d12b      	bne.n	8005b4e <_printf_float+0x242>
 8005af6:	e764      	b.n	80059c2 <_printf_float+0xb6>
 8005af8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005afc:	f240 80dc 	bls.w	8005cb8 <_printf_float+0x3ac>
 8005b00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005b04:	2200      	movs	r2, #0
 8005b06:	2300      	movs	r3, #0
 8005b08:	f7fa ff4e 	bl	80009a8 <__aeabi_dcmpeq>
 8005b0c:	2800      	cmp	r0, #0
 8005b0e:	d033      	beq.n	8005b78 <_printf_float+0x26c>
 8005b10:	2301      	movs	r3, #1
 8005b12:	4631      	mov	r1, r6
 8005b14:	4628      	mov	r0, r5
 8005b16:	4a35      	ldr	r2, [pc, #212]	@ (8005bec <_printf_float+0x2e0>)
 8005b18:	47b8      	blx	r7
 8005b1a:	3001      	adds	r0, #1
 8005b1c:	f43f af51 	beq.w	80059c2 <_printf_float+0xb6>
 8005b20:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005b24:	4543      	cmp	r3, r8
 8005b26:	db02      	blt.n	8005b2e <_printf_float+0x222>
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	07d8      	lsls	r0, r3, #31
 8005b2c:	d50f      	bpl.n	8005b4e <_printf_float+0x242>
 8005b2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005b32:	4631      	mov	r1, r6
 8005b34:	4628      	mov	r0, r5
 8005b36:	47b8      	blx	r7
 8005b38:	3001      	adds	r0, #1
 8005b3a:	f43f af42 	beq.w	80059c2 <_printf_float+0xb6>
 8005b3e:	f04f 0900 	mov.w	r9, #0
 8005b42:	f108 38ff 	add.w	r8, r8, #4294967295
 8005b46:	f104 0a1a 	add.w	sl, r4, #26
 8005b4a:	45c8      	cmp	r8, r9
 8005b4c:	dc09      	bgt.n	8005b62 <_printf_float+0x256>
 8005b4e:	6823      	ldr	r3, [r4, #0]
 8005b50:	079b      	lsls	r3, r3, #30
 8005b52:	f100 8102 	bmi.w	8005d5a <_printf_float+0x44e>
 8005b56:	68e0      	ldr	r0, [r4, #12]
 8005b58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b5a:	4298      	cmp	r0, r3
 8005b5c:	bfb8      	it	lt
 8005b5e:	4618      	movlt	r0, r3
 8005b60:	e731      	b.n	80059c6 <_printf_float+0xba>
 8005b62:	2301      	movs	r3, #1
 8005b64:	4652      	mov	r2, sl
 8005b66:	4631      	mov	r1, r6
 8005b68:	4628      	mov	r0, r5
 8005b6a:	47b8      	blx	r7
 8005b6c:	3001      	adds	r0, #1
 8005b6e:	f43f af28 	beq.w	80059c2 <_printf_float+0xb6>
 8005b72:	f109 0901 	add.w	r9, r9, #1
 8005b76:	e7e8      	b.n	8005b4a <_printf_float+0x23e>
 8005b78:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	dc38      	bgt.n	8005bf0 <_printf_float+0x2e4>
 8005b7e:	2301      	movs	r3, #1
 8005b80:	4631      	mov	r1, r6
 8005b82:	4628      	mov	r0, r5
 8005b84:	4a19      	ldr	r2, [pc, #100]	@ (8005bec <_printf_float+0x2e0>)
 8005b86:	47b8      	blx	r7
 8005b88:	3001      	adds	r0, #1
 8005b8a:	f43f af1a 	beq.w	80059c2 <_printf_float+0xb6>
 8005b8e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005b92:	ea59 0303 	orrs.w	r3, r9, r3
 8005b96:	d102      	bne.n	8005b9e <_printf_float+0x292>
 8005b98:	6823      	ldr	r3, [r4, #0]
 8005b9a:	07d9      	lsls	r1, r3, #31
 8005b9c:	d5d7      	bpl.n	8005b4e <_printf_float+0x242>
 8005b9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005ba2:	4631      	mov	r1, r6
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	47b8      	blx	r7
 8005ba8:	3001      	adds	r0, #1
 8005baa:	f43f af0a 	beq.w	80059c2 <_printf_float+0xb6>
 8005bae:	f04f 0a00 	mov.w	sl, #0
 8005bb2:	f104 0b1a 	add.w	fp, r4, #26
 8005bb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005bb8:	425b      	negs	r3, r3
 8005bba:	4553      	cmp	r3, sl
 8005bbc:	dc01      	bgt.n	8005bc2 <_printf_float+0x2b6>
 8005bbe:	464b      	mov	r3, r9
 8005bc0:	e793      	b.n	8005aea <_printf_float+0x1de>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	465a      	mov	r2, fp
 8005bc6:	4631      	mov	r1, r6
 8005bc8:	4628      	mov	r0, r5
 8005bca:	47b8      	blx	r7
 8005bcc:	3001      	adds	r0, #1
 8005bce:	f43f aef8 	beq.w	80059c2 <_printf_float+0xb6>
 8005bd2:	f10a 0a01 	add.w	sl, sl, #1
 8005bd6:	e7ee      	b.n	8005bb6 <_printf_float+0x2aa>
 8005bd8:	7fefffff 	.word	0x7fefffff
 8005bdc:	08008e7f 	.word	0x08008e7f
 8005be0:	08008e7b 	.word	0x08008e7b
 8005be4:	08008e87 	.word	0x08008e87
 8005be8:	08008e83 	.word	0x08008e83
 8005bec:	08008e8b 	.word	0x08008e8b
 8005bf0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005bf2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005bf6:	4553      	cmp	r3, sl
 8005bf8:	bfa8      	it	ge
 8005bfa:	4653      	movge	r3, sl
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	4699      	mov	r9, r3
 8005c00:	dc36      	bgt.n	8005c70 <_printf_float+0x364>
 8005c02:	f04f 0b00 	mov.w	fp, #0
 8005c06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c0a:	f104 021a 	add.w	r2, r4, #26
 8005c0e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005c10:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c12:	eba3 0309 	sub.w	r3, r3, r9
 8005c16:	455b      	cmp	r3, fp
 8005c18:	dc31      	bgt.n	8005c7e <_printf_float+0x372>
 8005c1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c1c:	459a      	cmp	sl, r3
 8005c1e:	dc3a      	bgt.n	8005c96 <_printf_float+0x38a>
 8005c20:	6823      	ldr	r3, [r4, #0]
 8005c22:	07da      	lsls	r2, r3, #31
 8005c24:	d437      	bmi.n	8005c96 <_printf_float+0x38a>
 8005c26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c28:	ebaa 0903 	sub.w	r9, sl, r3
 8005c2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c2e:	ebaa 0303 	sub.w	r3, sl, r3
 8005c32:	4599      	cmp	r9, r3
 8005c34:	bfa8      	it	ge
 8005c36:	4699      	movge	r9, r3
 8005c38:	f1b9 0f00 	cmp.w	r9, #0
 8005c3c:	dc33      	bgt.n	8005ca6 <_printf_float+0x39a>
 8005c3e:	f04f 0800 	mov.w	r8, #0
 8005c42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c46:	f104 0b1a 	add.w	fp, r4, #26
 8005c4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c4c:	ebaa 0303 	sub.w	r3, sl, r3
 8005c50:	eba3 0309 	sub.w	r3, r3, r9
 8005c54:	4543      	cmp	r3, r8
 8005c56:	f77f af7a 	ble.w	8005b4e <_printf_float+0x242>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	465a      	mov	r2, fp
 8005c5e:	4631      	mov	r1, r6
 8005c60:	4628      	mov	r0, r5
 8005c62:	47b8      	blx	r7
 8005c64:	3001      	adds	r0, #1
 8005c66:	f43f aeac 	beq.w	80059c2 <_printf_float+0xb6>
 8005c6a:	f108 0801 	add.w	r8, r8, #1
 8005c6e:	e7ec      	b.n	8005c4a <_printf_float+0x33e>
 8005c70:	4642      	mov	r2, r8
 8005c72:	4631      	mov	r1, r6
 8005c74:	4628      	mov	r0, r5
 8005c76:	47b8      	blx	r7
 8005c78:	3001      	adds	r0, #1
 8005c7a:	d1c2      	bne.n	8005c02 <_printf_float+0x2f6>
 8005c7c:	e6a1      	b.n	80059c2 <_printf_float+0xb6>
 8005c7e:	2301      	movs	r3, #1
 8005c80:	4631      	mov	r1, r6
 8005c82:	4628      	mov	r0, r5
 8005c84:	920a      	str	r2, [sp, #40]	@ 0x28
 8005c86:	47b8      	blx	r7
 8005c88:	3001      	adds	r0, #1
 8005c8a:	f43f ae9a 	beq.w	80059c2 <_printf_float+0xb6>
 8005c8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005c90:	f10b 0b01 	add.w	fp, fp, #1
 8005c94:	e7bb      	b.n	8005c0e <_printf_float+0x302>
 8005c96:	4631      	mov	r1, r6
 8005c98:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	47b8      	blx	r7
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	d1c0      	bne.n	8005c26 <_printf_float+0x31a>
 8005ca4:	e68d      	b.n	80059c2 <_printf_float+0xb6>
 8005ca6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ca8:	464b      	mov	r3, r9
 8005caa:	4631      	mov	r1, r6
 8005cac:	4628      	mov	r0, r5
 8005cae:	4442      	add	r2, r8
 8005cb0:	47b8      	blx	r7
 8005cb2:	3001      	adds	r0, #1
 8005cb4:	d1c3      	bne.n	8005c3e <_printf_float+0x332>
 8005cb6:	e684      	b.n	80059c2 <_printf_float+0xb6>
 8005cb8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005cbc:	f1ba 0f01 	cmp.w	sl, #1
 8005cc0:	dc01      	bgt.n	8005cc6 <_printf_float+0x3ba>
 8005cc2:	07db      	lsls	r3, r3, #31
 8005cc4:	d536      	bpl.n	8005d34 <_printf_float+0x428>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	4642      	mov	r2, r8
 8005cca:	4631      	mov	r1, r6
 8005ccc:	4628      	mov	r0, r5
 8005cce:	47b8      	blx	r7
 8005cd0:	3001      	adds	r0, #1
 8005cd2:	f43f ae76 	beq.w	80059c2 <_printf_float+0xb6>
 8005cd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005cda:	4631      	mov	r1, r6
 8005cdc:	4628      	mov	r0, r5
 8005cde:	47b8      	blx	r7
 8005ce0:	3001      	adds	r0, #1
 8005ce2:	f43f ae6e 	beq.w	80059c2 <_printf_float+0xb6>
 8005ce6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005cea:	2200      	movs	r2, #0
 8005cec:	2300      	movs	r3, #0
 8005cee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005cf2:	f7fa fe59 	bl	80009a8 <__aeabi_dcmpeq>
 8005cf6:	b9c0      	cbnz	r0, 8005d2a <_printf_float+0x41e>
 8005cf8:	4653      	mov	r3, sl
 8005cfa:	f108 0201 	add.w	r2, r8, #1
 8005cfe:	4631      	mov	r1, r6
 8005d00:	4628      	mov	r0, r5
 8005d02:	47b8      	blx	r7
 8005d04:	3001      	adds	r0, #1
 8005d06:	d10c      	bne.n	8005d22 <_printf_float+0x416>
 8005d08:	e65b      	b.n	80059c2 <_printf_float+0xb6>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	465a      	mov	r2, fp
 8005d0e:	4631      	mov	r1, r6
 8005d10:	4628      	mov	r0, r5
 8005d12:	47b8      	blx	r7
 8005d14:	3001      	adds	r0, #1
 8005d16:	f43f ae54 	beq.w	80059c2 <_printf_float+0xb6>
 8005d1a:	f108 0801 	add.w	r8, r8, #1
 8005d1e:	45d0      	cmp	r8, sl
 8005d20:	dbf3      	blt.n	8005d0a <_printf_float+0x3fe>
 8005d22:	464b      	mov	r3, r9
 8005d24:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005d28:	e6e0      	b.n	8005aec <_printf_float+0x1e0>
 8005d2a:	f04f 0800 	mov.w	r8, #0
 8005d2e:	f104 0b1a 	add.w	fp, r4, #26
 8005d32:	e7f4      	b.n	8005d1e <_printf_float+0x412>
 8005d34:	2301      	movs	r3, #1
 8005d36:	4642      	mov	r2, r8
 8005d38:	e7e1      	b.n	8005cfe <_printf_float+0x3f2>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	464a      	mov	r2, r9
 8005d3e:	4631      	mov	r1, r6
 8005d40:	4628      	mov	r0, r5
 8005d42:	47b8      	blx	r7
 8005d44:	3001      	adds	r0, #1
 8005d46:	f43f ae3c 	beq.w	80059c2 <_printf_float+0xb6>
 8005d4a:	f108 0801 	add.w	r8, r8, #1
 8005d4e:	68e3      	ldr	r3, [r4, #12]
 8005d50:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005d52:	1a5b      	subs	r3, r3, r1
 8005d54:	4543      	cmp	r3, r8
 8005d56:	dcf0      	bgt.n	8005d3a <_printf_float+0x42e>
 8005d58:	e6fd      	b.n	8005b56 <_printf_float+0x24a>
 8005d5a:	f04f 0800 	mov.w	r8, #0
 8005d5e:	f104 0919 	add.w	r9, r4, #25
 8005d62:	e7f4      	b.n	8005d4e <_printf_float+0x442>

08005d64 <_printf_common>:
 8005d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d68:	4616      	mov	r6, r2
 8005d6a:	4698      	mov	r8, r3
 8005d6c:	688a      	ldr	r2, [r1, #8]
 8005d6e:	690b      	ldr	r3, [r1, #16]
 8005d70:	4607      	mov	r7, r0
 8005d72:	4293      	cmp	r3, r2
 8005d74:	bfb8      	it	lt
 8005d76:	4613      	movlt	r3, r2
 8005d78:	6033      	str	r3, [r6, #0]
 8005d7a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d7e:	460c      	mov	r4, r1
 8005d80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d84:	b10a      	cbz	r2, 8005d8a <_printf_common+0x26>
 8005d86:	3301      	adds	r3, #1
 8005d88:	6033      	str	r3, [r6, #0]
 8005d8a:	6823      	ldr	r3, [r4, #0]
 8005d8c:	0699      	lsls	r1, r3, #26
 8005d8e:	bf42      	ittt	mi
 8005d90:	6833      	ldrmi	r3, [r6, #0]
 8005d92:	3302      	addmi	r3, #2
 8005d94:	6033      	strmi	r3, [r6, #0]
 8005d96:	6825      	ldr	r5, [r4, #0]
 8005d98:	f015 0506 	ands.w	r5, r5, #6
 8005d9c:	d106      	bne.n	8005dac <_printf_common+0x48>
 8005d9e:	f104 0a19 	add.w	sl, r4, #25
 8005da2:	68e3      	ldr	r3, [r4, #12]
 8005da4:	6832      	ldr	r2, [r6, #0]
 8005da6:	1a9b      	subs	r3, r3, r2
 8005da8:	42ab      	cmp	r3, r5
 8005daa:	dc2b      	bgt.n	8005e04 <_printf_common+0xa0>
 8005dac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005db0:	6822      	ldr	r2, [r4, #0]
 8005db2:	3b00      	subs	r3, #0
 8005db4:	bf18      	it	ne
 8005db6:	2301      	movne	r3, #1
 8005db8:	0692      	lsls	r2, r2, #26
 8005dba:	d430      	bmi.n	8005e1e <_printf_common+0xba>
 8005dbc:	4641      	mov	r1, r8
 8005dbe:	4638      	mov	r0, r7
 8005dc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005dc4:	47c8      	blx	r9
 8005dc6:	3001      	adds	r0, #1
 8005dc8:	d023      	beq.n	8005e12 <_printf_common+0xae>
 8005dca:	6823      	ldr	r3, [r4, #0]
 8005dcc:	6922      	ldr	r2, [r4, #16]
 8005dce:	f003 0306 	and.w	r3, r3, #6
 8005dd2:	2b04      	cmp	r3, #4
 8005dd4:	bf14      	ite	ne
 8005dd6:	2500      	movne	r5, #0
 8005dd8:	6833      	ldreq	r3, [r6, #0]
 8005dda:	f04f 0600 	mov.w	r6, #0
 8005dde:	bf08      	it	eq
 8005de0:	68e5      	ldreq	r5, [r4, #12]
 8005de2:	f104 041a 	add.w	r4, r4, #26
 8005de6:	bf08      	it	eq
 8005de8:	1aed      	subeq	r5, r5, r3
 8005dea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005dee:	bf08      	it	eq
 8005df0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005df4:	4293      	cmp	r3, r2
 8005df6:	bfc4      	itt	gt
 8005df8:	1a9b      	subgt	r3, r3, r2
 8005dfa:	18ed      	addgt	r5, r5, r3
 8005dfc:	42b5      	cmp	r5, r6
 8005dfe:	d11a      	bne.n	8005e36 <_printf_common+0xd2>
 8005e00:	2000      	movs	r0, #0
 8005e02:	e008      	b.n	8005e16 <_printf_common+0xb2>
 8005e04:	2301      	movs	r3, #1
 8005e06:	4652      	mov	r2, sl
 8005e08:	4641      	mov	r1, r8
 8005e0a:	4638      	mov	r0, r7
 8005e0c:	47c8      	blx	r9
 8005e0e:	3001      	adds	r0, #1
 8005e10:	d103      	bne.n	8005e1a <_printf_common+0xb6>
 8005e12:	f04f 30ff 	mov.w	r0, #4294967295
 8005e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e1a:	3501      	adds	r5, #1
 8005e1c:	e7c1      	b.n	8005da2 <_printf_common+0x3e>
 8005e1e:	2030      	movs	r0, #48	@ 0x30
 8005e20:	18e1      	adds	r1, r4, r3
 8005e22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e26:	1c5a      	adds	r2, r3, #1
 8005e28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e2c:	4422      	add	r2, r4
 8005e2e:	3302      	adds	r3, #2
 8005e30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e34:	e7c2      	b.n	8005dbc <_printf_common+0x58>
 8005e36:	2301      	movs	r3, #1
 8005e38:	4622      	mov	r2, r4
 8005e3a:	4641      	mov	r1, r8
 8005e3c:	4638      	mov	r0, r7
 8005e3e:	47c8      	blx	r9
 8005e40:	3001      	adds	r0, #1
 8005e42:	d0e6      	beq.n	8005e12 <_printf_common+0xae>
 8005e44:	3601      	adds	r6, #1
 8005e46:	e7d9      	b.n	8005dfc <_printf_common+0x98>

08005e48 <_printf_i>:
 8005e48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e4c:	7e0f      	ldrb	r7, [r1, #24]
 8005e4e:	4691      	mov	r9, r2
 8005e50:	2f78      	cmp	r7, #120	@ 0x78
 8005e52:	4680      	mov	r8, r0
 8005e54:	460c      	mov	r4, r1
 8005e56:	469a      	mov	sl, r3
 8005e58:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e5e:	d807      	bhi.n	8005e70 <_printf_i+0x28>
 8005e60:	2f62      	cmp	r7, #98	@ 0x62
 8005e62:	d80a      	bhi.n	8005e7a <_printf_i+0x32>
 8005e64:	2f00      	cmp	r7, #0
 8005e66:	f000 80d1 	beq.w	800600c <_printf_i+0x1c4>
 8005e6a:	2f58      	cmp	r7, #88	@ 0x58
 8005e6c:	f000 80b8 	beq.w	8005fe0 <_printf_i+0x198>
 8005e70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e78:	e03a      	b.n	8005ef0 <_printf_i+0xa8>
 8005e7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e7e:	2b15      	cmp	r3, #21
 8005e80:	d8f6      	bhi.n	8005e70 <_printf_i+0x28>
 8005e82:	a101      	add	r1, pc, #4	@ (adr r1, 8005e88 <_printf_i+0x40>)
 8005e84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e88:	08005ee1 	.word	0x08005ee1
 8005e8c:	08005ef5 	.word	0x08005ef5
 8005e90:	08005e71 	.word	0x08005e71
 8005e94:	08005e71 	.word	0x08005e71
 8005e98:	08005e71 	.word	0x08005e71
 8005e9c:	08005e71 	.word	0x08005e71
 8005ea0:	08005ef5 	.word	0x08005ef5
 8005ea4:	08005e71 	.word	0x08005e71
 8005ea8:	08005e71 	.word	0x08005e71
 8005eac:	08005e71 	.word	0x08005e71
 8005eb0:	08005e71 	.word	0x08005e71
 8005eb4:	08005ff3 	.word	0x08005ff3
 8005eb8:	08005f1f 	.word	0x08005f1f
 8005ebc:	08005fad 	.word	0x08005fad
 8005ec0:	08005e71 	.word	0x08005e71
 8005ec4:	08005e71 	.word	0x08005e71
 8005ec8:	08006015 	.word	0x08006015
 8005ecc:	08005e71 	.word	0x08005e71
 8005ed0:	08005f1f 	.word	0x08005f1f
 8005ed4:	08005e71 	.word	0x08005e71
 8005ed8:	08005e71 	.word	0x08005e71
 8005edc:	08005fb5 	.word	0x08005fb5
 8005ee0:	6833      	ldr	r3, [r6, #0]
 8005ee2:	1d1a      	adds	r2, r3, #4
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6032      	str	r2, [r6, #0]
 8005ee8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005eec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e09c      	b.n	800602e <_printf_i+0x1e6>
 8005ef4:	6833      	ldr	r3, [r6, #0]
 8005ef6:	6820      	ldr	r0, [r4, #0]
 8005ef8:	1d19      	adds	r1, r3, #4
 8005efa:	6031      	str	r1, [r6, #0]
 8005efc:	0606      	lsls	r6, r0, #24
 8005efe:	d501      	bpl.n	8005f04 <_printf_i+0xbc>
 8005f00:	681d      	ldr	r5, [r3, #0]
 8005f02:	e003      	b.n	8005f0c <_printf_i+0xc4>
 8005f04:	0645      	lsls	r5, r0, #25
 8005f06:	d5fb      	bpl.n	8005f00 <_printf_i+0xb8>
 8005f08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f0c:	2d00      	cmp	r5, #0
 8005f0e:	da03      	bge.n	8005f18 <_printf_i+0xd0>
 8005f10:	232d      	movs	r3, #45	@ 0x2d
 8005f12:	426d      	negs	r5, r5
 8005f14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f18:	230a      	movs	r3, #10
 8005f1a:	4858      	ldr	r0, [pc, #352]	@ (800607c <_printf_i+0x234>)
 8005f1c:	e011      	b.n	8005f42 <_printf_i+0xfa>
 8005f1e:	6821      	ldr	r1, [r4, #0]
 8005f20:	6833      	ldr	r3, [r6, #0]
 8005f22:	0608      	lsls	r0, r1, #24
 8005f24:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f28:	d402      	bmi.n	8005f30 <_printf_i+0xe8>
 8005f2a:	0649      	lsls	r1, r1, #25
 8005f2c:	bf48      	it	mi
 8005f2e:	b2ad      	uxthmi	r5, r5
 8005f30:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f32:	6033      	str	r3, [r6, #0]
 8005f34:	bf14      	ite	ne
 8005f36:	230a      	movne	r3, #10
 8005f38:	2308      	moveq	r3, #8
 8005f3a:	4850      	ldr	r0, [pc, #320]	@ (800607c <_printf_i+0x234>)
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f42:	6866      	ldr	r6, [r4, #4]
 8005f44:	2e00      	cmp	r6, #0
 8005f46:	60a6      	str	r6, [r4, #8]
 8005f48:	db05      	blt.n	8005f56 <_printf_i+0x10e>
 8005f4a:	6821      	ldr	r1, [r4, #0]
 8005f4c:	432e      	orrs	r6, r5
 8005f4e:	f021 0104 	bic.w	r1, r1, #4
 8005f52:	6021      	str	r1, [r4, #0]
 8005f54:	d04b      	beq.n	8005fee <_printf_i+0x1a6>
 8005f56:	4616      	mov	r6, r2
 8005f58:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f5c:	fb03 5711 	mls	r7, r3, r1, r5
 8005f60:	5dc7      	ldrb	r7, [r0, r7]
 8005f62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f66:	462f      	mov	r7, r5
 8005f68:	42bb      	cmp	r3, r7
 8005f6a:	460d      	mov	r5, r1
 8005f6c:	d9f4      	bls.n	8005f58 <_printf_i+0x110>
 8005f6e:	2b08      	cmp	r3, #8
 8005f70:	d10b      	bne.n	8005f8a <_printf_i+0x142>
 8005f72:	6823      	ldr	r3, [r4, #0]
 8005f74:	07df      	lsls	r7, r3, #31
 8005f76:	d508      	bpl.n	8005f8a <_printf_i+0x142>
 8005f78:	6923      	ldr	r3, [r4, #16]
 8005f7a:	6861      	ldr	r1, [r4, #4]
 8005f7c:	4299      	cmp	r1, r3
 8005f7e:	bfde      	ittt	le
 8005f80:	2330      	movle	r3, #48	@ 0x30
 8005f82:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f86:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f8a:	1b92      	subs	r2, r2, r6
 8005f8c:	6122      	str	r2, [r4, #16]
 8005f8e:	464b      	mov	r3, r9
 8005f90:	4621      	mov	r1, r4
 8005f92:	4640      	mov	r0, r8
 8005f94:	f8cd a000 	str.w	sl, [sp]
 8005f98:	aa03      	add	r2, sp, #12
 8005f9a:	f7ff fee3 	bl	8005d64 <_printf_common>
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	d14a      	bne.n	8006038 <_printf_i+0x1f0>
 8005fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa6:	b004      	add	sp, #16
 8005fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fac:	6823      	ldr	r3, [r4, #0]
 8005fae:	f043 0320 	orr.w	r3, r3, #32
 8005fb2:	6023      	str	r3, [r4, #0]
 8005fb4:	2778      	movs	r7, #120	@ 0x78
 8005fb6:	4832      	ldr	r0, [pc, #200]	@ (8006080 <_printf_i+0x238>)
 8005fb8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005fbc:	6823      	ldr	r3, [r4, #0]
 8005fbe:	6831      	ldr	r1, [r6, #0]
 8005fc0:	061f      	lsls	r7, r3, #24
 8005fc2:	f851 5b04 	ldr.w	r5, [r1], #4
 8005fc6:	d402      	bmi.n	8005fce <_printf_i+0x186>
 8005fc8:	065f      	lsls	r7, r3, #25
 8005fca:	bf48      	it	mi
 8005fcc:	b2ad      	uxthmi	r5, r5
 8005fce:	6031      	str	r1, [r6, #0]
 8005fd0:	07d9      	lsls	r1, r3, #31
 8005fd2:	bf44      	itt	mi
 8005fd4:	f043 0320 	orrmi.w	r3, r3, #32
 8005fd8:	6023      	strmi	r3, [r4, #0]
 8005fda:	b11d      	cbz	r5, 8005fe4 <_printf_i+0x19c>
 8005fdc:	2310      	movs	r3, #16
 8005fde:	e7ad      	b.n	8005f3c <_printf_i+0xf4>
 8005fe0:	4826      	ldr	r0, [pc, #152]	@ (800607c <_printf_i+0x234>)
 8005fe2:	e7e9      	b.n	8005fb8 <_printf_i+0x170>
 8005fe4:	6823      	ldr	r3, [r4, #0]
 8005fe6:	f023 0320 	bic.w	r3, r3, #32
 8005fea:	6023      	str	r3, [r4, #0]
 8005fec:	e7f6      	b.n	8005fdc <_printf_i+0x194>
 8005fee:	4616      	mov	r6, r2
 8005ff0:	e7bd      	b.n	8005f6e <_printf_i+0x126>
 8005ff2:	6833      	ldr	r3, [r6, #0]
 8005ff4:	6825      	ldr	r5, [r4, #0]
 8005ff6:	1d18      	adds	r0, r3, #4
 8005ff8:	6961      	ldr	r1, [r4, #20]
 8005ffa:	6030      	str	r0, [r6, #0]
 8005ffc:	062e      	lsls	r6, r5, #24
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	d501      	bpl.n	8006006 <_printf_i+0x1be>
 8006002:	6019      	str	r1, [r3, #0]
 8006004:	e002      	b.n	800600c <_printf_i+0x1c4>
 8006006:	0668      	lsls	r0, r5, #25
 8006008:	d5fb      	bpl.n	8006002 <_printf_i+0x1ba>
 800600a:	8019      	strh	r1, [r3, #0]
 800600c:	2300      	movs	r3, #0
 800600e:	4616      	mov	r6, r2
 8006010:	6123      	str	r3, [r4, #16]
 8006012:	e7bc      	b.n	8005f8e <_printf_i+0x146>
 8006014:	6833      	ldr	r3, [r6, #0]
 8006016:	2100      	movs	r1, #0
 8006018:	1d1a      	adds	r2, r3, #4
 800601a:	6032      	str	r2, [r6, #0]
 800601c:	681e      	ldr	r6, [r3, #0]
 800601e:	6862      	ldr	r2, [r4, #4]
 8006020:	4630      	mov	r0, r6
 8006022:	f000 f9e8 	bl	80063f6 <memchr>
 8006026:	b108      	cbz	r0, 800602c <_printf_i+0x1e4>
 8006028:	1b80      	subs	r0, r0, r6
 800602a:	6060      	str	r0, [r4, #4]
 800602c:	6863      	ldr	r3, [r4, #4]
 800602e:	6123      	str	r3, [r4, #16]
 8006030:	2300      	movs	r3, #0
 8006032:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006036:	e7aa      	b.n	8005f8e <_printf_i+0x146>
 8006038:	4632      	mov	r2, r6
 800603a:	4649      	mov	r1, r9
 800603c:	4640      	mov	r0, r8
 800603e:	6923      	ldr	r3, [r4, #16]
 8006040:	47d0      	blx	sl
 8006042:	3001      	adds	r0, #1
 8006044:	d0ad      	beq.n	8005fa2 <_printf_i+0x15a>
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	079b      	lsls	r3, r3, #30
 800604a:	d413      	bmi.n	8006074 <_printf_i+0x22c>
 800604c:	68e0      	ldr	r0, [r4, #12]
 800604e:	9b03      	ldr	r3, [sp, #12]
 8006050:	4298      	cmp	r0, r3
 8006052:	bfb8      	it	lt
 8006054:	4618      	movlt	r0, r3
 8006056:	e7a6      	b.n	8005fa6 <_printf_i+0x15e>
 8006058:	2301      	movs	r3, #1
 800605a:	4632      	mov	r2, r6
 800605c:	4649      	mov	r1, r9
 800605e:	4640      	mov	r0, r8
 8006060:	47d0      	blx	sl
 8006062:	3001      	adds	r0, #1
 8006064:	d09d      	beq.n	8005fa2 <_printf_i+0x15a>
 8006066:	3501      	adds	r5, #1
 8006068:	68e3      	ldr	r3, [r4, #12]
 800606a:	9903      	ldr	r1, [sp, #12]
 800606c:	1a5b      	subs	r3, r3, r1
 800606e:	42ab      	cmp	r3, r5
 8006070:	dcf2      	bgt.n	8006058 <_printf_i+0x210>
 8006072:	e7eb      	b.n	800604c <_printf_i+0x204>
 8006074:	2500      	movs	r5, #0
 8006076:	f104 0619 	add.w	r6, r4, #25
 800607a:	e7f5      	b.n	8006068 <_printf_i+0x220>
 800607c:	08008e8d 	.word	0x08008e8d
 8006080:	08008e9e 	.word	0x08008e9e

08006084 <std>:
 8006084:	2300      	movs	r3, #0
 8006086:	b510      	push	{r4, lr}
 8006088:	4604      	mov	r4, r0
 800608a:	e9c0 3300 	strd	r3, r3, [r0]
 800608e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006092:	6083      	str	r3, [r0, #8]
 8006094:	8181      	strh	r1, [r0, #12]
 8006096:	6643      	str	r3, [r0, #100]	@ 0x64
 8006098:	81c2      	strh	r2, [r0, #14]
 800609a:	6183      	str	r3, [r0, #24]
 800609c:	4619      	mov	r1, r3
 800609e:	2208      	movs	r2, #8
 80060a0:	305c      	adds	r0, #92	@ 0x5c
 80060a2:	f000 f916 	bl	80062d2 <memset>
 80060a6:	4b0d      	ldr	r3, [pc, #52]	@ (80060dc <std+0x58>)
 80060a8:	6224      	str	r4, [r4, #32]
 80060aa:	6263      	str	r3, [r4, #36]	@ 0x24
 80060ac:	4b0c      	ldr	r3, [pc, #48]	@ (80060e0 <std+0x5c>)
 80060ae:	62a3      	str	r3, [r4, #40]	@ 0x28
 80060b0:	4b0c      	ldr	r3, [pc, #48]	@ (80060e4 <std+0x60>)
 80060b2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80060b4:	4b0c      	ldr	r3, [pc, #48]	@ (80060e8 <std+0x64>)
 80060b6:	6323      	str	r3, [r4, #48]	@ 0x30
 80060b8:	4b0c      	ldr	r3, [pc, #48]	@ (80060ec <std+0x68>)
 80060ba:	429c      	cmp	r4, r3
 80060bc:	d006      	beq.n	80060cc <std+0x48>
 80060be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80060c2:	4294      	cmp	r4, r2
 80060c4:	d002      	beq.n	80060cc <std+0x48>
 80060c6:	33d0      	adds	r3, #208	@ 0xd0
 80060c8:	429c      	cmp	r4, r3
 80060ca:	d105      	bne.n	80060d8 <std+0x54>
 80060cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80060d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060d4:	f000 b98c 	b.w	80063f0 <__retarget_lock_init_recursive>
 80060d8:	bd10      	pop	{r4, pc}
 80060da:	bf00      	nop
 80060dc:	0800624d 	.word	0x0800624d
 80060e0:	0800626f 	.word	0x0800626f
 80060e4:	080062a7 	.word	0x080062a7
 80060e8:	080062cb 	.word	0x080062cb
 80060ec:	2000075c 	.word	0x2000075c

080060f0 <stdio_exit_handler>:
 80060f0:	4a02      	ldr	r2, [pc, #8]	@ (80060fc <stdio_exit_handler+0xc>)
 80060f2:	4903      	ldr	r1, [pc, #12]	@ (8006100 <stdio_exit_handler+0x10>)
 80060f4:	4803      	ldr	r0, [pc, #12]	@ (8006104 <stdio_exit_handler+0x14>)
 80060f6:	f000 b869 	b.w	80061cc <_fwalk_sglue>
 80060fa:	bf00      	nop
 80060fc:	2000001c 	.word	0x2000001c
 8006100:	08007d71 	.word	0x08007d71
 8006104:	2000002c 	.word	0x2000002c

08006108 <cleanup_stdio>:
 8006108:	6841      	ldr	r1, [r0, #4]
 800610a:	4b0c      	ldr	r3, [pc, #48]	@ (800613c <cleanup_stdio+0x34>)
 800610c:	b510      	push	{r4, lr}
 800610e:	4299      	cmp	r1, r3
 8006110:	4604      	mov	r4, r0
 8006112:	d001      	beq.n	8006118 <cleanup_stdio+0x10>
 8006114:	f001 fe2c 	bl	8007d70 <_fflush_r>
 8006118:	68a1      	ldr	r1, [r4, #8]
 800611a:	4b09      	ldr	r3, [pc, #36]	@ (8006140 <cleanup_stdio+0x38>)
 800611c:	4299      	cmp	r1, r3
 800611e:	d002      	beq.n	8006126 <cleanup_stdio+0x1e>
 8006120:	4620      	mov	r0, r4
 8006122:	f001 fe25 	bl	8007d70 <_fflush_r>
 8006126:	68e1      	ldr	r1, [r4, #12]
 8006128:	4b06      	ldr	r3, [pc, #24]	@ (8006144 <cleanup_stdio+0x3c>)
 800612a:	4299      	cmp	r1, r3
 800612c:	d004      	beq.n	8006138 <cleanup_stdio+0x30>
 800612e:	4620      	mov	r0, r4
 8006130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006134:	f001 be1c 	b.w	8007d70 <_fflush_r>
 8006138:	bd10      	pop	{r4, pc}
 800613a:	bf00      	nop
 800613c:	2000075c 	.word	0x2000075c
 8006140:	200007c4 	.word	0x200007c4
 8006144:	2000082c 	.word	0x2000082c

08006148 <global_stdio_init.part.0>:
 8006148:	b510      	push	{r4, lr}
 800614a:	4b0b      	ldr	r3, [pc, #44]	@ (8006178 <global_stdio_init.part.0+0x30>)
 800614c:	4c0b      	ldr	r4, [pc, #44]	@ (800617c <global_stdio_init.part.0+0x34>)
 800614e:	4a0c      	ldr	r2, [pc, #48]	@ (8006180 <global_stdio_init.part.0+0x38>)
 8006150:	4620      	mov	r0, r4
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	2104      	movs	r1, #4
 8006156:	2200      	movs	r2, #0
 8006158:	f7ff ff94 	bl	8006084 <std>
 800615c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006160:	2201      	movs	r2, #1
 8006162:	2109      	movs	r1, #9
 8006164:	f7ff ff8e 	bl	8006084 <std>
 8006168:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800616c:	2202      	movs	r2, #2
 800616e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006172:	2112      	movs	r1, #18
 8006174:	f7ff bf86 	b.w	8006084 <std>
 8006178:	20000894 	.word	0x20000894
 800617c:	2000075c 	.word	0x2000075c
 8006180:	080060f1 	.word	0x080060f1

08006184 <__sfp_lock_acquire>:
 8006184:	4801      	ldr	r0, [pc, #4]	@ (800618c <__sfp_lock_acquire+0x8>)
 8006186:	f000 b934 	b.w	80063f2 <__retarget_lock_acquire_recursive>
 800618a:	bf00      	nop
 800618c:	2000089d 	.word	0x2000089d

08006190 <__sfp_lock_release>:
 8006190:	4801      	ldr	r0, [pc, #4]	@ (8006198 <__sfp_lock_release+0x8>)
 8006192:	f000 b92f 	b.w	80063f4 <__retarget_lock_release_recursive>
 8006196:	bf00      	nop
 8006198:	2000089d 	.word	0x2000089d

0800619c <__sinit>:
 800619c:	b510      	push	{r4, lr}
 800619e:	4604      	mov	r4, r0
 80061a0:	f7ff fff0 	bl	8006184 <__sfp_lock_acquire>
 80061a4:	6a23      	ldr	r3, [r4, #32]
 80061a6:	b11b      	cbz	r3, 80061b0 <__sinit+0x14>
 80061a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061ac:	f7ff bff0 	b.w	8006190 <__sfp_lock_release>
 80061b0:	4b04      	ldr	r3, [pc, #16]	@ (80061c4 <__sinit+0x28>)
 80061b2:	6223      	str	r3, [r4, #32]
 80061b4:	4b04      	ldr	r3, [pc, #16]	@ (80061c8 <__sinit+0x2c>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1f5      	bne.n	80061a8 <__sinit+0xc>
 80061bc:	f7ff ffc4 	bl	8006148 <global_stdio_init.part.0>
 80061c0:	e7f2      	b.n	80061a8 <__sinit+0xc>
 80061c2:	bf00      	nop
 80061c4:	08006109 	.word	0x08006109
 80061c8:	20000894 	.word	0x20000894

080061cc <_fwalk_sglue>:
 80061cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061d0:	4607      	mov	r7, r0
 80061d2:	4688      	mov	r8, r1
 80061d4:	4614      	mov	r4, r2
 80061d6:	2600      	movs	r6, #0
 80061d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061dc:	f1b9 0901 	subs.w	r9, r9, #1
 80061e0:	d505      	bpl.n	80061ee <_fwalk_sglue+0x22>
 80061e2:	6824      	ldr	r4, [r4, #0]
 80061e4:	2c00      	cmp	r4, #0
 80061e6:	d1f7      	bne.n	80061d8 <_fwalk_sglue+0xc>
 80061e8:	4630      	mov	r0, r6
 80061ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061ee:	89ab      	ldrh	r3, [r5, #12]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d907      	bls.n	8006204 <_fwalk_sglue+0x38>
 80061f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061f8:	3301      	adds	r3, #1
 80061fa:	d003      	beq.n	8006204 <_fwalk_sglue+0x38>
 80061fc:	4629      	mov	r1, r5
 80061fe:	4638      	mov	r0, r7
 8006200:	47c0      	blx	r8
 8006202:	4306      	orrs	r6, r0
 8006204:	3568      	adds	r5, #104	@ 0x68
 8006206:	e7e9      	b.n	80061dc <_fwalk_sglue+0x10>

08006208 <siprintf>:
 8006208:	b40e      	push	{r1, r2, r3}
 800620a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800620e:	b510      	push	{r4, lr}
 8006210:	2400      	movs	r4, #0
 8006212:	b09d      	sub	sp, #116	@ 0x74
 8006214:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006216:	9002      	str	r0, [sp, #8]
 8006218:	9006      	str	r0, [sp, #24]
 800621a:	9107      	str	r1, [sp, #28]
 800621c:	9104      	str	r1, [sp, #16]
 800621e:	4809      	ldr	r0, [pc, #36]	@ (8006244 <siprintf+0x3c>)
 8006220:	4909      	ldr	r1, [pc, #36]	@ (8006248 <siprintf+0x40>)
 8006222:	f853 2b04 	ldr.w	r2, [r3], #4
 8006226:	9105      	str	r1, [sp, #20]
 8006228:	6800      	ldr	r0, [r0, #0]
 800622a:	a902      	add	r1, sp, #8
 800622c:	9301      	str	r3, [sp, #4]
 800622e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006230:	f001 fc22 	bl	8007a78 <_svfiprintf_r>
 8006234:	9b02      	ldr	r3, [sp, #8]
 8006236:	701c      	strb	r4, [r3, #0]
 8006238:	b01d      	add	sp, #116	@ 0x74
 800623a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800623e:	b003      	add	sp, #12
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	20000028 	.word	0x20000028
 8006248:	ffff0208 	.word	0xffff0208

0800624c <__sread>:
 800624c:	b510      	push	{r4, lr}
 800624e:	460c      	mov	r4, r1
 8006250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006254:	f000 f87e 	bl	8006354 <_read_r>
 8006258:	2800      	cmp	r0, #0
 800625a:	bfab      	itete	ge
 800625c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800625e:	89a3      	ldrhlt	r3, [r4, #12]
 8006260:	181b      	addge	r3, r3, r0
 8006262:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006266:	bfac      	ite	ge
 8006268:	6563      	strge	r3, [r4, #84]	@ 0x54
 800626a:	81a3      	strhlt	r3, [r4, #12]
 800626c:	bd10      	pop	{r4, pc}

0800626e <__swrite>:
 800626e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006272:	461f      	mov	r7, r3
 8006274:	898b      	ldrh	r3, [r1, #12]
 8006276:	4605      	mov	r5, r0
 8006278:	05db      	lsls	r3, r3, #23
 800627a:	460c      	mov	r4, r1
 800627c:	4616      	mov	r6, r2
 800627e:	d505      	bpl.n	800628c <__swrite+0x1e>
 8006280:	2302      	movs	r3, #2
 8006282:	2200      	movs	r2, #0
 8006284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006288:	f000 f852 	bl	8006330 <_lseek_r>
 800628c:	89a3      	ldrh	r3, [r4, #12]
 800628e:	4632      	mov	r2, r6
 8006290:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006294:	81a3      	strh	r3, [r4, #12]
 8006296:	4628      	mov	r0, r5
 8006298:	463b      	mov	r3, r7
 800629a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800629e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062a2:	f000 b869 	b.w	8006378 <_write_r>

080062a6 <__sseek>:
 80062a6:	b510      	push	{r4, lr}
 80062a8:	460c      	mov	r4, r1
 80062aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062ae:	f000 f83f 	bl	8006330 <_lseek_r>
 80062b2:	1c43      	adds	r3, r0, #1
 80062b4:	89a3      	ldrh	r3, [r4, #12]
 80062b6:	bf15      	itete	ne
 80062b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80062ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80062be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80062c2:	81a3      	strheq	r3, [r4, #12]
 80062c4:	bf18      	it	ne
 80062c6:	81a3      	strhne	r3, [r4, #12]
 80062c8:	bd10      	pop	{r4, pc}

080062ca <__sclose>:
 80062ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062ce:	f000 b81f 	b.w	8006310 <_close_r>

080062d2 <memset>:
 80062d2:	4603      	mov	r3, r0
 80062d4:	4402      	add	r2, r0
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d100      	bne.n	80062dc <memset+0xa>
 80062da:	4770      	bx	lr
 80062dc:	f803 1b01 	strb.w	r1, [r3], #1
 80062e0:	e7f9      	b.n	80062d6 <memset+0x4>

080062e2 <strncmp>:
 80062e2:	b510      	push	{r4, lr}
 80062e4:	b16a      	cbz	r2, 8006302 <strncmp+0x20>
 80062e6:	3901      	subs	r1, #1
 80062e8:	1884      	adds	r4, r0, r2
 80062ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062ee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d103      	bne.n	80062fe <strncmp+0x1c>
 80062f6:	42a0      	cmp	r0, r4
 80062f8:	d001      	beq.n	80062fe <strncmp+0x1c>
 80062fa:	2a00      	cmp	r2, #0
 80062fc:	d1f5      	bne.n	80062ea <strncmp+0x8>
 80062fe:	1ad0      	subs	r0, r2, r3
 8006300:	bd10      	pop	{r4, pc}
 8006302:	4610      	mov	r0, r2
 8006304:	e7fc      	b.n	8006300 <strncmp+0x1e>
	...

08006308 <_localeconv_r>:
 8006308:	4800      	ldr	r0, [pc, #0]	@ (800630c <_localeconv_r+0x4>)
 800630a:	4770      	bx	lr
 800630c:	20000168 	.word	0x20000168

08006310 <_close_r>:
 8006310:	b538      	push	{r3, r4, r5, lr}
 8006312:	2300      	movs	r3, #0
 8006314:	4d05      	ldr	r5, [pc, #20]	@ (800632c <_close_r+0x1c>)
 8006316:	4604      	mov	r4, r0
 8006318:	4608      	mov	r0, r1
 800631a:	602b      	str	r3, [r5, #0]
 800631c:	f7fb fd8f 	bl	8001e3e <_close>
 8006320:	1c43      	adds	r3, r0, #1
 8006322:	d102      	bne.n	800632a <_close_r+0x1a>
 8006324:	682b      	ldr	r3, [r5, #0]
 8006326:	b103      	cbz	r3, 800632a <_close_r+0x1a>
 8006328:	6023      	str	r3, [r4, #0]
 800632a:	bd38      	pop	{r3, r4, r5, pc}
 800632c:	20000898 	.word	0x20000898

08006330 <_lseek_r>:
 8006330:	b538      	push	{r3, r4, r5, lr}
 8006332:	4604      	mov	r4, r0
 8006334:	4608      	mov	r0, r1
 8006336:	4611      	mov	r1, r2
 8006338:	2200      	movs	r2, #0
 800633a:	4d05      	ldr	r5, [pc, #20]	@ (8006350 <_lseek_r+0x20>)
 800633c:	602a      	str	r2, [r5, #0]
 800633e:	461a      	mov	r2, r3
 8006340:	f7fb fda1 	bl	8001e86 <_lseek>
 8006344:	1c43      	adds	r3, r0, #1
 8006346:	d102      	bne.n	800634e <_lseek_r+0x1e>
 8006348:	682b      	ldr	r3, [r5, #0]
 800634a:	b103      	cbz	r3, 800634e <_lseek_r+0x1e>
 800634c:	6023      	str	r3, [r4, #0]
 800634e:	bd38      	pop	{r3, r4, r5, pc}
 8006350:	20000898 	.word	0x20000898

08006354 <_read_r>:
 8006354:	b538      	push	{r3, r4, r5, lr}
 8006356:	4604      	mov	r4, r0
 8006358:	4608      	mov	r0, r1
 800635a:	4611      	mov	r1, r2
 800635c:	2200      	movs	r2, #0
 800635e:	4d05      	ldr	r5, [pc, #20]	@ (8006374 <_read_r+0x20>)
 8006360:	602a      	str	r2, [r5, #0]
 8006362:	461a      	mov	r2, r3
 8006364:	f7fb fd32 	bl	8001dcc <_read>
 8006368:	1c43      	adds	r3, r0, #1
 800636a:	d102      	bne.n	8006372 <_read_r+0x1e>
 800636c:	682b      	ldr	r3, [r5, #0]
 800636e:	b103      	cbz	r3, 8006372 <_read_r+0x1e>
 8006370:	6023      	str	r3, [r4, #0]
 8006372:	bd38      	pop	{r3, r4, r5, pc}
 8006374:	20000898 	.word	0x20000898

08006378 <_write_r>:
 8006378:	b538      	push	{r3, r4, r5, lr}
 800637a:	4604      	mov	r4, r0
 800637c:	4608      	mov	r0, r1
 800637e:	4611      	mov	r1, r2
 8006380:	2200      	movs	r2, #0
 8006382:	4d05      	ldr	r5, [pc, #20]	@ (8006398 <_write_r+0x20>)
 8006384:	602a      	str	r2, [r5, #0]
 8006386:	461a      	mov	r2, r3
 8006388:	f7fb fd3d 	bl	8001e06 <_write>
 800638c:	1c43      	adds	r3, r0, #1
 800638e:	d102      	bne.n	8006396 <_write_r+0x1e>
 8006390:	682b      	ldr	r3, [r5, #0]
 8006392:	b103      	cbz	r3, 8006396 <_write_r+0x1e>
 8006394:	6023      	str	r3, [r4, #0]
 8006396:	bd38      	pop	{r3, r4, r5, pc}
 8006398:	20000898 	.word	0x20000898

0800639c <__errno>:
 800639c:	4b01      	ldr	r3, [pc, #4]	@ (80063a4 <__errno+0x8>)
 800639e:	6818      	ldr	r0, [r3, #0]
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	20000028 	.word	0x20000028

080063a8 <__libc_init_array>:
 80063a8:	b570      	push	{r4, r5, r6, lr}
 80063aa:	2600      	movs	r6, #0
 80063ac:	4d0c      	ldr	r5, [pc, #48]	@ (80063e0 <__libc_init_array+0x38>)
 80063ae:	4c0d      	ldr	r4, [pc, #52]	@ (80063e4 <__libc_init_array+0x3c>)
 80063b0:	1b64      	subs	r4, r4, r5
 80063b2:	10a4      	asrs	r4, r4, #2
 80063b4:	42a6      	cmp	r6, r4
 80063b6:	d109      	bne.n	80063cc <__libc_init_array+0x24>
 80063b8:	f002 f876 	bl	80084a8 <_init>
 80063bc:	2600      	movs	r6, #0
 80063be:	4d0a      	ldr	r5, [pc, #40]	@ (80063e8 <__libc_init_array+0x40>)
 80063c0:	4c0a      	ldr	r4, [pc, #40]	@ (80063ec <__libc_init_array+0x44>)
 80063c2:	1b64      	subs	r4, r4, r5
 80063c4:	10a4      	asrs	r4, r4, #2
 80063c6:	42a6      	cmp	r6, r4
 80063c8:	d105      	bne.n	80063d6 <__libc_init_array+0x2e>
 80063ca:	bd70      	pop	{r4, r5, r6, pc}
 80063cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80063d0:	4798      	blx	r3
 80063d2:	3601      	adds	r6, #1
 80063d4:	e7ee      	b.n	80063b4 <__libc_init_array+0xc>
 80063d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80063da:	4798      	blx	r3
 80063dc:	3601      	adds	r6, #1
 80063de:	e7f2      	b.n	80063c6 <__libc_init_array+0x1e>
 80063e0:	080090f0 	.word	0x080090f0
 80063e4:	080090f0 	.word	0x080090f0
 80063e8:	080090f0 	.word	0x080090f0
 80063ec:	080090f4 	.word	0x080090f4

080063f0 <__retarget_lock_init_recursive>:
 80063f0:	4770      	bx	lr

080063f2 <__retarget_lock_acquire_recursive>:
 80063f2:	4770      	bx	lr

080063f4 <__retarget_lock_release_recursive>:
 80063f4:	4770      	bx	lr

080063f6 <memchr>:
 80063f6:	4603      	mov	r3, r0
 80063f8:	b510      	push	{r4, lr}
 80063fa:	b2c9      	uxtb	r1, r1
 80063fc:	4402      	add	r2, r0
 80063fe:	4293      	cmp	r3, r2
 8006400:	4618      	mov	r0, r3
 8006402:	d101      	bne.n	8006408 <memchr+0x12>
 8006404:	2000      	movs	r0, #0
 8006406:	e003      	b.n	8006410 <memchr+0x1a>
 8006408:	7804      	ldrb	r4, [r0, #0]
 800640a:	3301      	adds	r3, #1
 800640c:	428c      	cmp	r4, r1
 800640e:	d1f6      	bne.n	80063fe <memchr+0x8>
 8006410:	bd10      	pop	{r4, pc}

08006412 <quorem>:
 8006412:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006416:	6903      	ldr	r3, [r0, #16]
 8006418:	690c      	ldr	r4, [r1, #16]
 800641a:	4607      	mov	r7, r0
 800641c:	42a3      	cmp	r3, r4
 800641e:	db7e      	blt.n	800651e <quorem+0x10c>
 8006420:	3c01      	subs	r4, #1
 8006422:	00a3      	lsls	r3, r4, #2
 8006424:	f100 0514 	add.w	r5, r0, #20
 8006428:	f101 0814 	add.w	r8, r1, #20
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006432:	9301      	str	r3, [sp, #4]
 8006434:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006438:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800643c:	3301      	adds	r3, #1
 800643e:	429a      	cmp	r2, r3
 8006440:	fbb2 f6f3 	udiv	r6, r2, r3
 8006444:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006448:	d32e      	bcc.n	80064a8 <quorem+0x96>
 800644a:	f04f 0a00 	mov.w	sl, #0
 800644e:	46c4      	mov	ip, r8
 8006450:	46ae      	mov	lr, r5
 8006452:	46d3      	mov	fp, sl
 8006454:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006458:	b298      	uxth	r0, r3
 800645a:	fb06 a000 	mla	r0, r6, r0, sl
 800645e:	0c1b      	lsrs	r3, r3, #16
 8006460:	0c02      	lsrs	r2, r0, #16
 8006462:	fb06 2303 	mla	r3, r6, r3, r2
 8006466:	f8de 2000 	ldr.w	r2, [lr]
 800646a:	b280      	uxth	r0, r0
 800646c:	b292      	uxth	r2, r2
 800646e:	1a12      	subs	r2, r2, r0
 8006470:	445a      	add	r2, fp
 8006472:	f8de 0000 	ldr.w	r0, [lr]
 8006476:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800647a:	b29b      	uxth	r3, r3
 800647c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006480:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006484:	b292      	uxth	r2, r2
 8006486:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800648a:	45e1      	cmp	r9, ip
 800648c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006490:	f84e 2b04 	str.w	r2, [lr], #4
 8006494:	d2de      	bcs.n	8006454 <quorem+0x42>
 8006496:	9b00      	ldr	r3, [sp, #0]
 8006498:	58eb      	ldr	r3, [r5, r3]
 800649a:	b92b      	cbnz	r3, 80064a8 <quorem+0x96>
 800649c:	9b01      	ldr	r3, [sp, #4]
 800649e:	3b04      	subs	r3, #4
 80064a0:	429d      	cmp	r5, r3
 80064a2:	461a      	mov	r2, r3
 80064a4:	d32f      	bcc.n	8006506 <quorem+0xf4>
 80064a6:	613c      	str	r4, [r7, #16]
 80064a8:	4638      	mov	r0, r7
 80064aa:	f001 f981 	bl	80077b0 <__mcmp>
 80064ae:	2800      	cmp	r0, #0
 80064b0:	db25      	blt.n	80064fe <quorem+0xec>
 80064b2:	4629      	mov	r1, r5
 80064b4:	2000      	movs	r0, #0
 80064b6:	f858 2b04 	ldr.w	r2, [r8], #4
 80064ba:	f8d1 c000 	ldr.w	ip, [r1]
 80064be:	fa1f fe82 	uxth.w	lr, r2
 80064c2:	fa1f f38c 	uxth.w	r3, ip
 80064c6:	eba3 030e 	sub.w	r3, r3, lr
 80064ca:	4403      	add	r3, r0
 80064cc:	0c12      	lsrs	r2, r2, #16
 80064ce:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80064d2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064dc:	45c1      	cmp	r9, r8
 80064de:	ea4f 4022 	mov.w	r0, r2, asr #16
 80064e2:	f841 3b04 	str.w	r3, [r1], #4
 80064e6:	d2e6      	bcs.n	80064b6 <quorem+0xa4>
 80064e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064f0:	b922      	cbnz	r2, 80064fc <quorem+0xea>
 80064f2:	3b04      	subs	r3, #4
 80064f4:	429d      	cmp	r5, r3
 80064f6:	461a      	mov	r2, r3
 80064f8:	d30b      	bcc.n	8006512 <quorem+0x100>
 80064fa:	613c      	str	r4, [r7, #16]
 80064fc:	3601      	adds	r6, #1
 80064fe:	4630      	mov	r0, r6
 8006500:	b003      	add	sp, #12
 8006502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006506:	6812      	ldr	r2, [r2, #0]
 8006508:	3b04      	subs	r3, #4
 800650a:	2a00      	cmp	r2, #0
 800650c:	d1cb      	bne.n	80064a6 <quorem+0x94>
 800650e:	3c01      	subs	r4, #1
 8006510:	e7c6      	b.n	80064a0 <quorem+0x8e>
 8006512:	6812      	ldr	r2, [r2, #0]
 8006514:	3b04      	subs	r3, #4
 8006516:	2a00      	cmp	r2, #0
 8006518:	d1ef      	bne.n	80064fa <quorem+0xe8>
 800651a:	3c01      	subs	r4, #1
 800651c:	e7ea      	b.n	80064f4 <quorem+0xe2>
 800651e:	2000      	movs	r0, #0
 8006520:	e7ee      	b.n	8006500 <quorem+0xee>
 8006522:	0000      	movs	r0, r0
 8006524:	0000      	movs	r0, r0
	...

08006528 <_dtoa_r>:
 8006528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652c:	4614      	mov	r4, r2
 800652e:	461d      	mov	r5, r3
 8006530:	69c7      	ldr	r7, [r0, #28]
 8006532:	b097      	sub	sp, #92	@ 0x5c
 8006534:	4681      	mov	r9, r0
 8006536:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800653a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800653c:	b97f      	cbnz	r7, 800655e <_dtoa_r+0x36>
 800653e:	2010      	movs	r0, #16
 8006540:	f000 fe0e 	bl	8007160 <malloc>
 8006544:	4602      	mov	r2, r0
 8006546:	f8c9 001c 	str.w	r0, [r9, #28]
 800654a:	b920      	cbnz	r0, 8006556 <_dtoa_r+0x2e>
 800654c:	21ef      	movs	r1, #239	@ 0xef
 800654e:	4bac      	ldr	r3, [pc, #688]	@ (8006800 <_dtoa_r+0x2d8>)
 8006550:	48ac      	ldr	r0, [pc, #688]	@ (8006804 <_dtoa_r+0x2dc>)
 8006552:	f001 fc6d 	bl	8007e30 <__assert_func>
 8006556:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800655a:	6007      	str	r7, [r0, #0]
 800655c:	60c7      	str	r7, [r0, #12]
 800655e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006562:	6819      	ldr	r1, [r3, #0]
 8006564:	b159      	cbz	r1, 800657e <_dtoa_r+0x56>
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	2301      	movs	r3, #1
 800656a:	4093      	lsls	r3, r2
 800656c:	604a      	str	r2, [r1, #4]
 800656e:	608b      	str	r3, [r1, #8]
 8006570:	4648      	mov	r0, r9
 8006572:	f000 feeb 	bl	800734c <_Bfree>
 8006576:	2200      	movs	r2, #0
 8006578:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	1e2b      	subs	r3, r5, #0
 8006580:	bfaf      	iteee	ge
 8006582:	2300      	movge	r3, #0
 8006584:	2201      	movlt	r2, #1
 8006586:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800658a:	9307      	strlt	r3, [sp, #28]
 800658c:	bfa8      	it	ge
 800658e:	6033      	strge	r3, [r6, #0]
 8006590:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8006594:	4b9c      	ldr	r3, [pc, #624]	@ (8006808 <_dtoa_r+0x2e0>)
 8006596:	bfb8      	it	lt
 8006598:	6032      	strlt	r2, [r6, #0]
 800659a:	ea33 0308 	bics.w	r3, r3, r8
 800659e:	d112      	bne.n	80065c6 <_dtoa_r+0x9e>
 80065a0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80065a4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80065a6:	6013      	str	r3, [r2, #0]
 80065a8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80065ac:	4323      	orrs	r3, r4
 80065ae:	f000 855e 	beq.w	800706e <_dtoa_r+0xb46>
 80065b2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80065b4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800680c <_dtoa_r+0x2e4>
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 8560 	beq.w	800707e <_dtoa_r+0xb56>
 80065be:	f10a 0303 	add.w	r3, sl, #3
 80065c2:	f000 bd5a 	b.w	800707a <_dtoa_r+0xb52>
 80065c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065ca:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80065ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80065d2:	2200      	movs	r2, #0
 80065d4:	2300      	movs	r3, #0
 80065d6:	f7fa f9e7 	bl	80009a8 <__aeabi_dcmpeq>
 80065da:	4607      	mov	r7, r0
 80065dc:	b158      	cbz	r0, 80065f6 <_dtoa_r+0xce>
 80065de:	2301      	movs	r3, #1
 80065e0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80065e2:	6013      	str	r3, [r2, #0]
 80065e4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80065e6:	b113      	cbz	r3, 80065ee <_dtoa_r+0xc6>
 80065e8:	4b89      	ldr	r3, [pc, #548]	@ (8006810 <_dtoa_r+0x2e8>)
 80065ea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80065ec:	6013      	str	r3, [r2, #0]
 80065ee:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8006814 <_dtoa_r+0x2ec>
 80065f2:	f000 bd44 	b.w	800707e <_dtoa_r+0xb56>
 80065f6:	ab14      	add	r3, sp, #80	@ 0x50
 80065f8:	9301      	str	r3, [sp, #4]
 80065fa:	ab15      	add	r3, sp, #84	@ 0x54
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	4648      	mov	r0, r9
 8006600:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006604:	f001 f984 	bl	8007910 <__d2b>
 8006608:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800660c:	9003      	str	r0, [sp, #12]
 800660e:	2e00      	cmp	r6, #0
 8006610:	d078      	beq.n	8006704 <_dtoa_r+0x1dc>
 8006612:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006616:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006618:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800661c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006620:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006624:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006628:	9712      	str	r7, [sp, #72]	@ 0x48
 800662a:	4619      	mov	r1, r3
 800662c:	2200      	movs	r2, #0
 800662e:	4b7a      	ldr	r3, [pc, #488]	@ (8006818 <_dtoa_r+0x2f0>)
 8006630:	f7f9 fd9a 	bl	8000168 <__aeabi_dsub>
 8006634:	a36c      	add	r3, pc, #432	@ (adr r3, 80067e8 <_dtoa_r+0x2c0>)
 8006636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663a:	f7f9 ff4d 	bl	80004d8 <__aeabi_dmul>
 800663e:	a36c      	add	r3, pc, #432	@ (adr r3, 80067f0 <_dtoa_r+0x2c8>)
 8006640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006644:	f7f9 fd92 	bl	800016c <__adddf3>
 8006648:	4604      	mov	r4, r0
 800664a:	4630      	mov	r0, r6
 800664c:	460d      	mov	r5, r1
 800664e:	f7f9 fed9 	bl	8000404 <__aeabi_i2d>
 8006652:	a369      	add	r3, pc, #420	@ (adr r3, 80067f8 <_dtoa_r+0x2d0>)
 8006654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006658:	f7f9 ff3e 	bl	80004d8 <__aeabi_dmul>
 800665c:	4602      	mov	r2, r0
 800665e:	460b      	mov	r3, r1
 8006660:	4620      	mov	r0, r4
 8006662:	4629      	mov	r1, r5
 8006664:	f7f9 fd82 	bl	800016c <__adddf3>
 8006668:	4604      	mov	r4, r0
 800666a:	460d      	mov	r5, r1
 800666c:	f7fa f9e4 	bl	8000a38 <__aeabi_d2iz>
 8006670:	2200      	movs	r2, #0
 8006672:	4607      	mov	r7, r0
 8006674:	2300      	movs	r3, #0
 8006676:	4620      	mov	r0, r4
 8006678:	4629      	mov	r1, r5
 800667a:	f7fa f99f 	bl	80009bc <__aeabi_dcmplt>
 800667e:	b140      	cbz	r0, 8006692 <_dtoa_r+0x16a>
 8006680:	4638      	mov	r0, r7
 8006682:	f7f9 febf 	bl	8000404 <__aeabi_i2d>
 8006686:	4622      	mov	r2, r4
 8006688:	462b      	mov	r3, r5
 800668a:	f7fa f98d 	bl	80009a8 <__aeabi_dcmpeq>
 800668e:	b900      	cbnz	r0, 8006692 <_dtoa_r+0x16a>
 8006690:	3f01      	subs	r7, #1
 8006692:	2f16      	cmp	r7, #22
 8006694:	d854      	bhi.n	8006740 <_dtoa_r+0x218>
 8006696:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800669a:	4b60      	ldr	r3, [pc, #384]	@ (800681c <_dtoa_r+0x2f4>)
 800669c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80066a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a4:	f7fa f98a 	bl	80009bc <__aeabi_dcmplt>
 80066a8:	2800      	cmp	r0, #0
 80066aa:	d04b      	beq.n	8006744 <_dtoa_r+0x21c>
 80066ac:	2300      	movs	r3, #0
 80066ae:	3f01      	subs	r7, #1
 80066b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80066b2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80066b4:	1b9b      	subs	r3, r3, r6
 80066b6:	1e5a      	subs	r2, r3, #1
 80066b8:	bf49      	itett	mi
 80066ba:	f1c3 0301 	rsbmi	r3, r3, #1
 80066be:	2300      	movpl	r3, #0
 80066c0:	9304      	strmi	r3, [sp, #16]
 80066c2:	2300      	movmi	r3, #0
 80066c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80066c6:	bf54      	ite	pl
 80066c8:	9304      	strpl	r3, [sp, #16]
 80066ca:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80066cc:	2f00      	cmp	r7, #0
 80066ce:	db3b      	blt.n	8006748 <_dtoa_r+0x220>
 80066d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066d2:	970e      	str	r7, [sp, #56]	@ 0x38
 80066d4:	443b      	add	r3, r7
 80066d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80066d8:	2300      	movs	r3, #0
 80066da:	930a      	str	r3, [sp, #40]	@ 0x28
 80066dc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80066de:	2b09      	cmp	r3, #9
 80066e0:	d865      	bhi.n	80067ae <_dtoa_r+0x286>
 80066e2:	2b05      	cmp	r3, #5
 80066e4:	bfc4      	itt	gt
 80066e6:	3b04      	subgt	r3, #4
 80066e8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80066ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80066ec:	bfc8      	it	gt
 80066ee:	2400      	movgt	r4, #0
 80066f0:	f1a3 0302 	sub.w	r3, r3, #2
 80066f4:	bfd8      	it	le
 80066f6:	2401      	movle	r4, #1
 80066f8:	2b03      	cmp	r3, #3
 80066fa:	d864      	bhi.n	80067c6 <_dtoa_r+0x29e>
 80066fc:	e8df f003 	tbb	[pc, r3]
 8006700:	2c385553 	.word	0x2c385553
 8006704:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006708:	441e      	add	r6, r3
 800670a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800670e:	2b20      	cmp	r3, #32
 8006710:	bfc1      	itttt	gt
 8006712:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006716:	fa08 f803 	lslgt.w	r8, r8, r3
 800671a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800671e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006722:	bfd6      	itet	le
 8006724:	f1c3 0320 	rsble	r3, r3, #32
 8006728:	ea48 0003 	orrgt.w	r0, r8, r3
 800672c:	fa04 f003 	lslle.w	r0, r4, r3
 8006730:	f7f9 fe58 	bl	80003e4 <__aeabi_ui2d>
 8006734:	2201      	movs	r2, #1
 8006736:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800673a:	3e01      	subs	r6, #1
 800673c:	9212      	str	r2, [sp, #72]	@ 0x48
 800673e:	e774      	b.n	800662a <_dtoa_r+0x102>
 8006740:	2301      	movs	r3, #1
 8006742:	e7b5      	b.n	80066b0 <_dtoa_r+0x188>
 8006744:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006746:	e7b4      	b.n	80066b2 <_dtoa_r+0x18a>
 8006748:	9b04      	ldr	r3, [sp, #16]
 800674a:	1bdb      	subs	r3, r3, r7
 800674c:	9304      	str	r3, [sp, #16]
 800674e:	427b      	negs	r3, r7
 8006750:	930a      	str	r3, [sp, #40]	@ 0x28
 8006752:	2300      	movs	r3, #0
 8006754:	930e      	str	r3, [sp, #56]	@ 0x38
 8006756:	e7c1      	b.n	80066dc <_dtoa_r+0x1b4>
 8006758:	2301      	movs	r3, #1
 800675a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800675c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800675e:	eb07 0b03 	add.w	fp, r7, r3
 8006762:	f10b 0301 	add.w	r3, fp, #1
 8006766:	2b01      	cmp	r3, #1
 8006768:	9308      	str	r3, [sp, #32]
 800676a:	bfb8      	it	lt
 800676c:	2301      	movlt	r3, #1
 800676e:	e006      	b.n	800677e <_dtoa_r+0x256>
 8006770:	2301      	movs	r3, #1
 8006772:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006774:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006776:	2b00      	cmp	r3, #0
 8006778:	dd28      	ble.n	80067cc <_dtoa_r+0x2a4>
 800677a:	469b      	mov	fp, r3
 800677c:	9308      	str	r3, [sp, #32]
 800677e:	2100      	movs	r1, #0
 8006780:	2204      	movs	r2, #4
 8006782:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006786:	f102 0514 	add.w	r5, r2, #20
 800678a:	429d      	cmp	r5, r3
 800678c:	d926      	bls.n	80067dc <_dtoa_r+0x2b4>
 800678e:	6041      	str	r1, [r0, #4]
 8006790:	4648      	mov	r0, r9
 8006792:	f000 fd9b 	bl	80072cc <_Balloc>
 8006796:	4682      	mov	sl, r0
 8006798:	2800      	cmp	r0, #0
 800679a:	d143      	bne.n	8006824 <_dtoa_r+0x2fc>
 800679c:	4602      	mov	r2, r0
 800679e:	f240 11af 	movw	r1, #431	@ 0x1af
 80067a2:	4b1f      	ldr	r3, [pc, #124]	@ (8006820 <_dtoa_r+0x2f8>)
 80067a4:	e6d4      	b.n	8006550 <_dtoa_r+0x28>
 80067a6:	2300      	movs	r3, #0
 80067a8:	e7e3      	b.n	8006772 <_dtoa_r+0x24a>
 80067aa:	2300      	movs	r3, #0
 80067ac:	e7d5      	b.n	800675a <_dtoa_r+0x232>
 80067ae:	2401      	movs	r4, #1
 80067b0:	2300      	movs	r3, #0
 80067b2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80067b4:	9320      	str	r3, [sp, #128]	@ 0x80
 80067b6:	f04f 3bff 	mov.w	fp, #4294967295
 80067ba:	2200      	movs	r2, #0
 80067bc:	2312      	movs	r3, #18
 80067be:	f8cd b020 	str.w	fp, [sp, #32]
 80067c2:	9221      	str	r2, [sp, #132]	@ 0x84
 80067c4:	e7db      	b.n	800677e <_dtoa_r+0x256>
 80067c6:	2301      	movs	r3, #1
 80067c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067ca:	e7f4      	b.n	80067b6 <_dtoa_r+0x28e>
 80067cc:	f04f 0b01 	mov.w	fp, #1
 80067d0:	465b      	mov	r3, fp
 80067d2:	f8cd b020 	str.w	fp, [sp, #32]
 80067d6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80067da:	e7d0      	b.n	800677e <_dtoa_r+0x256>
 80067dc:	3101      	adds	r1, #1
 80067de:	0052      	lsls	r2, r2, #1
 80067e0:	e7d1      	b.n	8006786 <_dtoa_r+0x25e>
 80067e2:	bf00      	nop
 80067e4:	f3af 8000 	nop.w
 80067e8:	636f4361 	.word	0x636f4361
 80067ec:	3fd287a7 	.word	0x3fd287a7
 80067f0:	8b60c8b3 	.word	0x8b60c8b3
 80067f4:	3fc68a28 	.word	0x3fc68a28
 80067f8:	509f79fb 	.word	0x509f79fb
 80067fc:	3fd34413 	.word	0x3fd34413
 8006800:	08008ebc 	.word	0x08008ebc
 8006804:	08008ed3 	.word	0x08008ed3
 8006808:	7ff00000 	.word	0x7ff00000
 800680c:	08008eb8 	.word	0x08008eb8
 8006810:	08008e8c 	.word	0x08008e8c
 8006814:	08008e8b 	.word	0x08008e8b
 8006818:	3ff80000 	.word	0x3ff80000
 800681c:	08009020 	.word	0x08009020
 8006820:	08008f2b 	.word	0x08008f2b
 8006824:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006828:	6018      	str	r0, [r3, #0]
 800682a:	9b08      	ldr	r3, [sp, #32]
 800682c:	2b0e      	cmp	r3, #14
 800682e:	f200 80a1 	bhi.w	8006974 <_dtoa_r+0x44c>
 8006832:	2c00      	cmp	r4, #0
 8006834:	f000 809e 	beq.w	8006974 <_dtoa_r+0x44c>
 8006838:	2f00      	cmp	r7, #0
 800683a:	dd33      	ble.n	80068a4 <_dtoa_r+0x37c>
 800683c:	4b9c      	ldr	r3, [pc, #624]	@ (8006ab0 <_dtoa_r+0x588>)
 800683e:	f007 020f 	and.w	r2, r7, #15
 8006842:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006846:	05f8      	lsls	r0, r7, #23
 8006848:	e9d3 3400 	ldrd	r3, r4, [r3]
 800684c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8006850:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006854:	d516      	bpl.n	8006884 <_dtoa_r+0x35c>
 8006856:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800685a:	4b96      	ldr	r3, [pc, #600]	@ (8006ab4 <_dtoa_r+0x58c>)
 800685c:	2603      	movs	r6, #3
 800685e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006862:	f7f9 ff63 	bl	800072c <__aeabi_ddiv>
 8006866:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800686a:	f004 040f 	and.w	r4, r4, #15
 800686e:	4d91      	ldr	r5, [pc, #580]	@ (8006ab4 <_dtoa_r+0x58c>)
 8006870:	b954      	cbnz	r4, 8006888 <_dtoa_r+0x360>
 8006872:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006876:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800687a:	f7f9 ff57 	bl	800072c <__aeabi_ddiv>
 800687e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006882:	e028      	b.n	80068d6 <_dtoa_r+0x3ae>
 8006884:	2602      	movs	r6, #2
 8006886:	e7f2      	b.n	800686e <_dtoa_r+0x346>
 8006888:	07e1      	lsls	r1, r4, #31
 800688a:	d508      	bpl.n	800689e <_dtoa_r+0x376>
 800688c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006890:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006894:	f7f9 fe20 	bl	80004d8 <__aeabi_dmul>
 8006898:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800689c:	3601      	adds	r6, #1
 800689e:	1064      	asrs	r4, r4, #1
 80068a0:	3508      	adds	r5, #8
 80068a2:	e7e5      	b.n	8006870 <_dtoa_r+0x348>
 80068a4:	f000 80af 	beq.w	8006a06 <_dtoa_r+0x4de>
 80068a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068ac:	427c      	negs	r4, r7
 80068ae:	4b80      	ldr	r3, [pc, #512]	@ (8006ab0 <_dtoa_r+0x588>)
 80068b0:	f004 020f 	and.w	r2, r4, #15
 80068b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068bc:	f7f9 fe0c 	bl	80004d8 <__aeabi_dmul>
 80068c0:	2602      	movs	r6, #2
 80068c2:	2300      	movs	r3, #0
 80068c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80068c8:	4d7a      	ldr	r5, [pc, #488]	@ (8006ab4 <_dtoa_r+0x58c>)
 80068ca:	1124      	asrs	r4, r4, #4
 80068cc:	2c00      	cmp	r4, #0
 80068ce:	f040 808f 	bne.w	80069f0 <_dtoa_r+0x4c8>
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1d3      	bne.n	800687e <_dtoa_r+0x356>
 80068d6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80068da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f000 8094 	beq.w	8006a0a <_dtoa_r+0x4e2>
 80068e2:	2200      	movs	r2, #0
 80068e4:	4620      	mov	r0, r4
 80068e6:	4629      	mov	r1, r5
 80068e8:	4b73      	ldr	r3, [pc, #460]	@ (8006ab8 <_dtoa_r+0x590>)
 80068ea:	f7fa f867 	bl	80009bc <__aeabi_dcmplt>
 80068ee:	2800      	cmp	r0, #0
 80068f0:	f000 808b 	beq.w	8006a0a <_dtoa_r+0x4e2>
 80068f4:	9b08      	ldr	r3, [sp, #32]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f000 8087 	beq.w	8006a0a <_dtoa_r+0x4e2>
 80068fc:	f1bb 0f00 	cmp.w	fp, #0
 8006900:	dd34      	ble.n	800696c <_dtoa_r+0x444>
 8006902:	4620      	mov	r0, r4
 8006904:	2200      	movs	r2, #0
 8006906:	4629      	mov	r1, r5
 8006908:	4b6c      	ldr	r3, [pc, #432]	@ (8006abc <_dtoa_r+0x594>)
 800690a:	f7f9 fde5 	bl	80004d8 <__aeabi_dmul>
 800690e:	465c      	mov	r4, fp
 8006910:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006914:	f107 38ff 	add.w	r8, r7, #4294967295
 8006918:	3601      	adds	r6, #1
 800691a:	4630      	mov	r0, r6
 800691c:	f7f9 fd72 	bl	8000404 <__aeabi_i2d>
 8006920:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006924:	f7f9 fdd8 	bl	80004d8 <__aeabi_dmul>
 8006928:	2200      	movs	r2, #0
 800692a:	4b65      	ldr	r3, [pc, #404]	@ (8006ac0 <_dtoa_r+0x598>)
 800692c:	f7f9 fc1e 	bl	800016c <__adddf3>
 8006930:	4605      	mov	r5, r0
 8006932:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006936:	2c00      	cmp	r4, #0
 8006938:	d16a      	bne.n	8006a10 <_dtoa_r+0x4e8>
 800693a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800693e:	2200      	movs	r2, #0
 8006940:	4b60      	ldr	r3, [pc, #384]	@ (8006ac4 <_dtoa_r+0x59c>)
 8006942:	f7f9 fc11 	bl	8000168 <__aeabi_dsub>
 8006946:	4602      	mov	r2, r0
 8006948:	460b      	mov	r3, r1
 800694a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800694e:	462a      	mov	r2, r5
 8006950:	4633      	mov	r3, r6
 8006952:	f7fa f851 	bl	80009f8 <__aeabi_dcmpgt>
 8006956:	2800      	cmp	r0, #0
 8006958:	f040 8298 	bne.w	8006e8c <_dtoa_r+0x964>
 800695c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006960:	462a      	mov	r2, r5
 8006962:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006966:	f7fa f829 	bl	80009bc <__aeabi_dcmplt>
 800696a:	bb38      	cbnz	r0, 80069bc <_dtoa_r+0x494>
 800696c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006970:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006974:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006976:	2b00      	cmp	r3, #0
 8006978:	f2c0 8157 	blt.w	8006c2a <_dtoa_r+0x702>
 800697c:	2f0e      	cmp	r7, #14
 800697e:	f300 8154 	bgt.w	8006c2a <_dtoa_r+0x702>
 8006982:	4b4b      	ldr	r3, [pc, #300]	@ (8006ab0 <_dtoa_r+0x588>)
 8006984:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006988:	e9d3 3400 	ldrd	r3, r4, [r3]
 800698c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006990:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006992:	2b00      	cmp	r3, #0
 8006994:	f280 80e5 	bge.w	8006b62 <_dtoa_r+0x63a>
 8006998:	9b08      	ldr	r3, [sp, #32]
 800699a:	2b00      	cmp	r3, #0
 800699c:	f300 80e1 	bgt.w	8006b62 <_dtoa_r+0x63a>
 80069a0:	d10c      	bne.n	80069bc <_dtoa_r+0x494>
 80069a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069a6:	2200      	movs	r2, #0
 80069a8:	4b46      	ldr	r3, [pc, #280]	@ (8006ac4 <_dtoa_r+0x59c>)
 80069aa:	f7f9 fd95 	bl	80004d8 <__aeabi_dmul>
 80069ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069b2:	f7fa f817 	bl	80009e4 <__aeabi_dcmpge>
 80069b6:	2800      	cmp	r0, #0
 80069b8:	f000 8266 	beq.w	8006e88 <_dtoa_r+0x960>
 80069bc:	2400      	movs	r4, #0
 80069be:	4625      	mov	r5, r4
 80069c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80069c2:	4656      	mov	r6, sl
 80069c4:	ea6f 0803 	mvn.w	r8, r3
 80069c8:	2700      	movs	r7, #0
 80069ca:	4621      	mov	r1, r4
 80069cc:	4648      	mov	r0, r9
 80069ce:	f000 fcbd 	bl	800734c <_Bfree>
 80069d2:	2d00      	cmp	r5, #0
 80069d4:	f000 80bd 	beq.w	8006b52 <_dtoa_r+0x62a>
 80069d8:	b12f      	cbz	r7, 80069e6 <_dtoa_r+0x4be>
 80069da:	42af      	cmp	r7, r5
 80069dc:	d003      	beq.n	80069e6 <_dtoa_r+0x4be>
 80069de:	4639      	mov	r1, r7
 80069e0:	4648      	mov	r0, r9
 80069e2:	f000 fcb3 	bl	800734c <_Bfree>
 80069e6:	4629      	mov	r1, r5
 80069e8:	4648      	mov	r0, r9
 80069ea:	f000 fcaf 	bl	800734c <_Bfree>
 80069ee:	e0b0      	b.n	8006b52 <_dtoa_r+0x62a>
 80069f0:	07e2      	lsls	r2, r4, #31
 80069f2:	d505      	bpl.n	8006a00 <_dtoa_r+0x4d8>
 80069f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80069f8:	f7f9 fd6e 	bl	80004d8 <__aeabi_dmul>
 80069fc:	2301      	movs	r3, #1
 80069fe:	3601      	adds	r6, #1
 8006a00:	1064      	asrs	r4, r4, #1
 8006a02:	3508      	adds	r5, #8
 8006a04:	e762      	b.n	80068cc <_dtoa_r+0x3a4>
 8006a06:	2602      	movs	r6, #2
 8006a08:	e765      	b.n	80068d6 <_dtoa_r+0x3ae>
 8006a0a:	46b8      	mov	r8, r7
 8006a0c:	9c08      	ldr	r4, [sp, #32]
 8006a0e:	e784      	b.n	800691a <_dtoa_r+0x3f2>
 8006a10:	4b27      	ldr	r3, [pc, #156]	@ (8006ab0 <_dtoa_r+0x588>)
 8006a12:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a1c:	4454      	add	r4, sl
 8006a1e:	2900      	cmp	r1, #0
 8006a20:	d054      	beq.n	8006acc <_dtoa_r+0x5a4>
 8006a22:	2000      	movs	r0, #0
 8006a24:	4928      	ldr	r1, [pc, #160]	@ (8006ac8 <_dtoa_r+0x5a0>)
 8006a26:	f7f9 fe81 	bl	800072c <__aeabi_ddiv>
 8006a2a:	4633      	mov	r3, r6
 8006a2c:	462a      	mov	r2, r5
 8006a2e:	f7f9 fb9b 	bl	8000168 <__aeabi_dsub>
 8006a32:	4656      	mov	r6, sl
 8006a34:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a3c:	f7f9 fffc 	bl	8000a38 <__aeabi_d2iz>
 8006a40:	4605      	mov	r5, r0
 8006a42:	f7f9 fcdf 	bl	8000404 <__aeabi_i2d>
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a4e:	f7f9 fb8b 	bl	8000168 <__aeabi_dsub>
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	3530      	adds	r5, #48	@ 0x30
 8006a58:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a5c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a60:	f806 5b01 	strb.w	r5, [r6], #1
 8006a64:	f7f9 ffaa 	bl	80009bc <__aeabi_dcmplt>
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	d172      	bne.n	8006b52 <_dtoa_r+0x62a>
 8006a6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a70:	2000      	movs	r0, #0
 8006a72:	4911      	ldr	r1, [pc, #68]	@ (8006ab8 <_dtoa_r+0x590>)
 8006a74:	f7f9 fb78 	bl	8000168 <__aeabi_dsub>
 8006a78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a7c:	f7f9 ff9e 	bl	80009bc <__aeabi_dcmplt>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	f040 80b4 	bne.w	8006bee <_dtoa_r+0x6c6>
 8006a86:	42a6      	cmp	r6, r4
 8006a88:	f43f af70 	beq.w	800696c <_dtoa_r+0x444>
 8006a8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006a90:	2200      	movs	r2, #0
 8006a92:	4b0a      	ldr	r3, [pc, #40]	@ (8006abc <_dtoa_r+0x594>)
 8006a94:	f7f9 fd20 	bl	80004d8 <__aeabi_dmul>
 8006a98:	2200      	movs	r2, #0
 8006a9a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006aa2:	4b06      	ldr	r3, [pc, #24]	@ (8006abc <_dtoa_r+0x594>)
 8006aa4:	f7f9 fd18 	bl	80004d8 <__aeabi_dmul>
 8006aa8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006aac:	e7c4      	b.n	8006a38 <_dtoa_r+0x510>
 8006aae:	bf00      	nop
 8006ab0:	08009020 	.word	0x08009020
 8006ab4:	08008ff8 	.word	0x08008ff8
 8006ab8:	3ff00000 	.word	0x3ff00000
 8006abc:	40240000 	.word	0x40240000
 8006ac0:	401c0000 	.word	0x401c0000
 8006ac4:	40140000 	.word	0x40140000
 8006ac8:	3fe00000 	.word	0x3fe00000
 8006acc:	4631      	mov	r1, r6
 8006ace:	4628      	mov	r0, r5
 8006ad0:	f7f9 fd02 	bl	80004d8 <__aeabi_dmul>
 8006ad4:	4656      	mov	r6, sl
 8006ad6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ada:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006adc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ae0:	f7f9 ffaa 	bl	8000a38 <__aeabi_d2iz>
 8006ae4:	4605      	mov	r5, r0
 8006ae6:	f7f9 fc8d 	bl	8000404 <__aeabi_i2d>
 8006aea:	4602      	mov	r2, r0
 8006aec:	460b      	mov	r3, r1
 8006aee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006af2:	f7f9 fb39 	bl	8000168 <__aeabi_dsub>
 8006af6:	4602      	mov	r2, r0
 8006af8:	460b      	mov	r3, r1
 8006afa:	3530      	adds	r5, #48	@ 0x30
 8006afc:	f806 5b01 	strb.w	r5, [r6], #1
 8006b00:	42a6      	cmp	r6, r4
 8006b02:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006b06:	f04f 0200 	mov.w	r2, #0
 8006b0a:	d124      	bne.n	8006b56 <_dtoa_r+0x62e>
 8006b0c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006b10:	4bae      	ldr	r3, [pc, #696]	@ (8006dcc <_dtoa_r+0x8a4>)
 8006b12:	f7f9 fb2b 	bl	800016c <__adddf3>
 8006b16:	4602      	mov	r2, r0
 8006b18:	460b      	mov	r3, r1
 8006b1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b1e:	f7f9 ff6b 	bl	80009f8 <__aeabi_dcmpgt>
 8006b22:	2800      	cmp	r0, #0
 8006b24:	d163      	bne.n	8006bee <_dtoa_r+0x6c6>
 8006b26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006b2a:	2000      	movs	r0, #0
 8006b2c:	49a7      	ldr	r1, [pc, #668]	@ (8006dcc <_dtoa_r+0x8a4>)
 8006b2e:	f7f9 fb1b 	bl	8000168 <__aeabi_dsub>
 8006b32:	4602      	mov	r2, r0
 8006b34:	460b      	mov	r3, r1
 8006b36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b3a:	f7f9 ff3f 	bl	80009bc <__aeabi_dcmplt>
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	f43f af14 	beq.w	800696c <_dtoa_r+0x444>
 8006b44:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006b46:	1e73      	subs	r3, r6, #1
 8006b48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006b4a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006b4e:	2b30      	cmp	r3, #48	@ 0x30
 8006b50:	d0f8      	beq.n	8006b44 <_dtoa_r+0x61c>
 8006b52:	4647      	mov	r7, r8
 8006b54:	e03b      	b.n	8006bce <_dtoa_r+0x6a6>
 8006b56:	4b9e      	ldr	r3, [pc, #632]	@ (8006dd0 <_dtoa_r+0x8a8>)
 8006b58:	f7f9 fcbe 	bl	80004d8 <__aeabi_dmul>
 8006b5c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b60:	e7bc      	b.n	8006adc <_dtoa_r+0x5b4>
 8006b62:	4656      	mov	r6, sl
 8006b64:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006b68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	4629      	mov	r1, r5
 8006b70:	f7f9 fddc 	bl	800072c <__aeabi_ddiv>
 8006b74:	f7f9 ff60 	bl	8000a38 <__aeabi_d2iz>
 8006b78:	4680      	mov	r8, r0
 8006b7a:	f7f9 fc43 	bl	8000404 <__aeabi_i2d>
 8006b7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b82:	f7f9 fca9 	bl	80004d8 <__aeabi_dmul>
 8006b86:	4602      	mov	r2, r0
 8006b88:	460b      	mov	r3, r1
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	4629      	mov	r1, r5
 8006b8e:	f7f9 faeb 	bl	8000168 <__aeabi_dsub>
 8006b92:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006b96:	9d08      	ldr	r5, [sp, #32]
 8006b98:	f806 4b01 	strb.w	r4, [r6], #1
 8006b9c:	eba6 040a 	sub.w	r4, r6, sl
 8006ba0:	42a5      	cmp	r5, r4
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	d133      	bne.n	8006c10 <_dtoa_r+0x6e8>
 8006ba8:	f7f9 fae0 	bl	800016c <__adddf3>
 8006bac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bb0:	4604      	mov	r4, r0
 8006bb2:	460d      	mov	r5, r1
 8006bb4:	f7f9 ff20 	bl	80009f8 <__aeabi_dcmpgt>
 8006bb8:	b9c0      	cbnz	r0, 8006bec <_dtoa_r+0x6c4>
 8006bba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	4629      	mov	r1, r5
 8006bc2:	f7f9 fef1 	bl	80009a8 <__aeabi_dcmpeq>
 8006bc6:	b110      	cbz	r0, 8006bce <_dtoa_r+0x6a6>
 8006bc8:	f018 0f01 	tst.w	r8, #1
 8006bcc:	d10e      	bne.n	8006bec <_dtoa_r+0x6c4>
 8006bce:	4648      	mov	r0, r9
 8006bd0:	9903      	ldr	r1, [sp, #12]
 8006bd2:	f000 fbbb 	bl	800734c <_Bfree>
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	7033      	strb	r3, [r6, #0]
 8006bda:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006bdc:	3701      	adds	r7, #1
 8006bde:	601f      	str	r7, [r3, #0]
 8006be0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f000 824b 	beq.w	800707e <_dtoa_r+0xb56>
 8006be8:	601e      	str	r6, [r3, #0]
 8006bea:	e248      	b.n	800707e <_dtoa_r+0xb56>
 8006bec:	46b8      	mov	r8, r7
 8006bee:	4633      	mov	r3, r6
 8006bf0:	461e      	mov	r6, r3
 8006bf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bf6:	2a39      	cmp	r2, #57	@ 0x39
 8006bf8:	d106      	bne.n	8006c08 <_dtoa_r+0x6e0>
 8006bfa:	459a      	cmp	sl, r3
 8006bfc:	d1f8      	bne.n	8006bf0 <_dtoa_r+0x6c8>
 8006bfe:	2230      	movs	r2, #48	@ 0x30
 8006c00:	f108 0801 	add.w	r8, r8, #1
 8006c04:	f88a 2000 	strb.w	r2, [sl]
 8006c08:	781a      	ldrb	r2, [r3, #0]
 8006c0a:	3201      	adds	r2, #1
 8006c0c:	701a      	strb	r2, [r3, #0]
 8006c0e:	e7a0      	b.n	8006b52 <_dtoa_r+0x62a>
 8006c10:	2200      	movs	r2, #0
 8006c12:	4b6f      	ldr	r3, [pc, #444]	@ (8006dd0 <_dtoa_r+0x8a8>)
 8006c14:	f7f9 fc60 	bl	80004d8 <__aeabi_dmul>
 8006c18:	2200      	movs	r2, #0
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	4604      	mov	r4, r0
 8006c1e:	460d      	mov	r5, r1
 8006c20:	f7f9 fec2 	bl	80009a8 <__aeabi_dcmpeq>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d09f      	beq.n	8006b68 <_dtoa_r+0x640>
 8006c28:	e7d1      	b.n	8006bce <_dtoa_r+0x6a6>
 8006c2a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006c2c:	2a00      	cmp	r2, #0
 8006c2e:	f000 80ea 	beq.w	8006e06 <_dtoa_r+0x8de>
 8006c32:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006c34:	2a01      	cmp	r2, #1
 8006c36:	f300 80cd 	bgt.w	8006dd4 <_dtoa_r+0x8ac>
 8006c3a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006c3c:	2a00      	cmp	r2, #0
 8006c3e:	f000 80c1 	beq.w	8006dc4 <_dtoa_r+0x89c>
 8006c42:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006c46:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006c48:	9e04      	ldr	r6, [sp, #16]
 8006c4a:	9a04      	ldr	r2, [sp, #16]
 8006c4c:	2101      	movs	r1, #1
 8006c4e:	441a      	add	r2, r3
 8006c50:	9204      	str	r2, [sp, #16]
 8006c52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c54:	4648      	mov	r0, r9
 8006c56:	441a      	add	r2, r3
 8006c58:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c5a:	f000 fc2b 	bl	80074b4 <__i2b>
 8006c5e:	4605      	mov	r5, r0
 8006c60:	b166      	cbz	r6, 8006c7c <_dtoa_r+0x754>
 8006c62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	dd09      	ble.n	8006c7c <_dtoa_r+0x754>
 8006c68:	42b3      	cmp	r3, r6
 8006c6a:	bfa8      	it	ge
 8006c6c:	4633      	movge	r3, r6
 8006c6e:	9a04      	ldr	r2, [sp, #16]
 8006c70:	1af6      	subs	r6, r6, r3
 8006c72:	1ad2      	subs	r2, r2, r3
 8006c74:	9204      	str	r2, [sp, #16]
 8006c76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c7e:	b30b      	cbz	r3, 8006cc4 <_dtoa_r+0x79c>
 8006c80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 80c6 	beq.w	8006e14 <_dtoa_r+0x8ec>
 8006c88:	2c00      	cmp	r4, #0
 8006c8a:	f000 80c0 	beq.w	8006e0e <_dtoa_r+0x8e6>
 8006c8e:	4629      	mov	r1, r5
 8006c90:	4622      	mov	r2, r4
 8006c92:	4648      	mov	r0, r9
 8006c94:	f000 fcc6 	bl	8007624 <__pow5mult>
 8006c98:	9a03      	ldr	r2, [sp, #12]
 8006c9a:	4601      	mov	r1, r0
 8006c9c:	4605      	mov	r5, r0
 8006c9e:	4648      	mov	r0, r9
 8006ca0:	f000 fc1e 	bl	80074e0 <__multiply>
 8006ca4:	9903      	ldr	r1, [sp, #12]
 8006ca6:	4680      	mov	r8, r0
 8006ca8:	4648      	mov	r0, r9
 8006caa:	f000 fb4f 	bl	800734c <_Bfree>
 8006cae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cb0:	1b1b      	subs	r3, r3, r4
 8006cb2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cb4:	f000 80b1 	beq.w	8006e1a <_dtoa_r+0x8f2>
 8006cb8:	4641      	mov	r1, r8
 8006cba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006cbc:	4648      	mov	r0, r9
 8006cbe:	f000 fcb1 	bl	8007624 <__pow5mult>
 8006cc2:	9003      	str	r0, [sp, #12]
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	4648      	mov	r0, r9
 8006cc8:	f000 fbf4 	bl	80074b4 <__i2b>
 8006ccc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cce:	4604      	mov	r4, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f000 81d8 	beq.w	8007086 <_dtoa_r+0xb5e>
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	4601      	mov	r1, r0
 8006cda:	4648      	mov	r0, r9
 8006cdc:	f000 fca2 	bl	8007624 <__pow5mult>
 8006ce0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	f300 809f 	bgt.w	8006e28 <_dtoa_r+0x900>
 8006cea:	9b06      	ldr	r3, [sp, #24]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f040 8097 	bne.w	8006e20 <_dtoa_r+0x8f8>
 8006cf2:	9b07      	ldr	r3, [sp, #28]
 8006cf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f040 8093 	bne.w	8006e24 <_dtoa_r+0x8fc>
 8006cfe:	9b07      	ldr	r3, [sp, #28]
 8006d00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006d04:	0d1b      	lsrs	r3, r3, #20
 8006d06:	051b      	lsls	r3, r3, #20
 8006d08:	b133      	cbz	r3, 8006d18 <_dtoa_r+0x7f0>
 8006d0a:	9b04      	ldr	r3, [sp, #16]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	9304      	str	r3, [sp, #16]
 8006d10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d12:	3301      	adds	r3, #1
 8006d14:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d16:	2301      	movs	r3, #1
 8006d18:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 81b8 	beq.w	8007092 <_dtoa_r+0xb6a>
 8006d22:	6923      	ldr	r3, [r4, #16]
 8006d24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d28:	6918      	ldr	r0, [r3, #16]
 8006d2a:	f000 fb77 	bl	800741c <__hi0bits>
 8006d2e:	f1c0 0020 	rsb	r0, r0, #32
 8006d32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d34:	4418      	add	r0, r3
 8006d36:	f010 001f 	ands.w	r0, r0, #31
 8006d3a:	f000 8082 	beq.w	8006e42 <_dtoa_r+0x91a>
 8006d3e:	f1c0 0320 	rsb	r3, r0, #32
 8006d42:	2b04      	cmp	r3, #4
 8006d44:	dd73      	ble.n	8006e2e <_dtoa_r+0x906>
 8006d46:	9b04      	ldr	r3, [sp, #16]
 8006d48:	f1c0 001c 	rsb	r0, r0, #28
 8006d4c:	4403      	add	r3, r0
 8006d4e:	9304      	str	r3, [sp, #16]
 8006d50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d52:	4406      	add	r6, r0
 8006d54:	4403      	add	r3, r0
 8006d56:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d58:	9b04      	ldr	r3, [sp, #16]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	dd05      	ble.n	8006d6a <_dtoa_r+0x842>
 8006d5e:	461a      	mov	r2, r3
 8006d60:	4648      	mov	r0, r9
 8006d62:	9903      	ldr	r1, [sp, #12]
 8006d64:	f000 fcb8 	bl	80076d8 <__lshift>
 8006d68:	9003      	str	r0, [sp, #12]
 8006d6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	dd05      	ble.n	8006d7c <_dtoa_r+0x854>
 8006d70:	4621      	mov	r1, r4
 8006d72:	461a      	mov	r2, r3
 8006d74:	4648      	mov	r0, r9
 8006d76:	f000 fcaf 	bl	80076d8 <__lshift>
 8006d7a:	4604      	mov	r4, r0
 8006d7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d061      	beq.n	8006e46 <_dtoa_r+0x91e>
 8006d82:	4621      	mov	r1, r4
 8006d84:	9803      	ldr	r0, [sp, #12]
 8006d86:	f000 fd13 	bl	80077b0 <__mcmp>
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	da5b      	bge.n	8006e46 <_dtoa_r+0x91e>
 8006d8e:	2300      	movs	r3, #0
 8006d90:	220a      	movs	r2, #10
 8006d92:	4648      	mov	r0, r9
 8006d94:	9903      	ldr	r1, [sp, #12]
 8006d96:	f000 fafb 	bl	8007390 <__multadd>
 8006d9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d9c:	f107 38ff 	add.w	r8, r7, #4294967295
 8006da0:	9003      	str	r0, [sp, #12]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f000 8177 	beq.w	8007096 <_dtoa_r+0xb6e>
 8006da8:	4629      	mov	r1, r5
 8006daa:	2300      	movs	r3, #0
 8006dac:	220a      	movs	r2, #10
 8006dae:	4648      	mov	r0, r9
 8006db0:	f000 faee 	bl	8007390 <__multadd>
 8006db4:	f1bb 0f00 	cmp.w	fp, #0
 8006db8:	4605      	mov	r5, r0
 8006dba:	dc6f      	bgt.n	8006e9c <_dtoa_r+0x974>
 8006dbc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	dc49      	bgt.n	8006e56 <_dtoa_r+0x92e>
 8006dc2:	e06b      	b.n	8006e9c <_dtoa_r+0x974>
 8006dc4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006dc6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006dca:	e73c      	b.n	8006c46 <_dtoa_r+0x71e>
 8006dcc:	3fe00000 	.word	0x3fe00000
 8006dd0:	40240000 	.word	0x40240000
 8006dd4:	9b08      	ldr	r3, [sp, #32]
 8006dd6:	1e5c      	subs	r4, r3, #1
 8006dd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dda:	42a3      	cmp	r3, r4
 8006ddc:	db09      	blt.n	8006df2 <_dtoa_r+0x8ca>
 8006dde:	1b1c      	subs	r4, r3, r4
 8006de0:	9b08      	ldr	r3, [sp, #32]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f6bf af30 	bge.w	8006c48 <_dtoa_r+0x720>
 8006de8:	9b04      	ldr	r3, [sp, #16]
 8006dea:	9a08      	ldr	r2, [sp, #32]
 8006dec:	1a9e      	subs	r6, r3, r2
 8006dee:	2300      	movs	r3, #0
 8006df0:	e72b      	b.n	8006c4a <_dtoa_r+0x722>
 8006df2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006df4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006df6:	1ae3      	subs	r3, r4, r3
 8006df8:	441a      	add	r2, r3
 8006dfa:	940a      	str	r4, [sp, #40]	@ 0x28
 8006dfc:	9e04      	ldr	r6, [sp, #16]
 8006dfe:	2400      	movs	r4, #0
 8006e00:	9b08      	ldr	r3, [sp, #32]
 8006e02:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e04:	e721      	b.n	8006c4a <_dtoa_r+0x722>
 8006e06:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006e08:	9e04      	ldr	r6, [sp, #16]
 8006e0a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006e0c:	e728      	b.n	8006c60 <_dtoa_r+0x738>
 8006e0e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006e12:	e751      	b.n	8006cb8 <_dtoa_r+0x790>
 8006e14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e16:	9903      	ldr	r1, [sp, #12]
 8006e18:	e750      	b.n	8006cbc <_dtoa_r+0x794>
 8006e1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e1e:	e751      	b.n	8006cc4 <_dtoa_r+0x79c>
 8006e20:	2300      	movs	r3, #0
 8006e22:	e779      	b.n	8006d18 <_dtoa_r+0x7f0>
 8006e24:	9b06      	ldr	r3, [sp, #24]
 8006e26:	e777      	b.n	8006d18 <_dtoa_r+0x7f0>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e2c:	e779      	b.n	8006d22 <_dtoa_r+0x7fa>
 8006e2e:	d093      	beq.n	8006d58 <_dtoa_r+0x830>
 8006e30:	9a04      	ldr	r2, [sp, #16]
 8006e32:	331c      	adds	r3, #28
 8006e34:	441a      	add	r2, r3
 8006e36:	9204      	str	r2, [sp, #16]
 8006e38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e3a:	441e      	add	r6, r3
 8006e3c:	441a      	add	r2, r3
 8006e3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e40:	e78a      	b.n	8006d58 <_dtoa_r+0x830>
 8006e42:	4603      	mov	r3, r0
 8006e44:	e7f4      	b.n	8006e30 <_dtoa_r+0x908>
 8006e46:	9b08      	ldr	r3, [sp, #32]
 8006e48:	46b8      	mov	r8, r7
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	dc20      	bgt.n	8006e90 <_dtoa_r+0x968>
 8006e4e:	469b      	mov	fp, r3
 8006e50:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	dd1e      	ble.n	8006e94 <_dtoa_r+0x96c>
 8006e56:	f1bb 0f00 	cmp.w	fp, #0
 8006e5a:	f47f adb1 	bne.w	80069c0 <_dtoa_r+0x498>
 8006e5e:	4621      	mov	r1, r4
 8006e60:	465b      	mov	r3, fp
 8006e62:	2205      	movs	r2, #5
 8006e64:	4648      	mov	r0, r9
 8006e66:	f000 fa93 	bl	8007390 <__multadd>
 8006e6a:	4601      	mov	r1, r0
 8006e6c:	4604      	mov	r4, r0
 8006e6e:	9803      	ldr	r0, [sp, #12]
 8006e70:	f000 fc9e 	bl	80077b0 <__mcmp>
 8006e74:	2800      	cmp	r0, #0
 8006e76:	f77f ada3 	ble.w	80069c0 <_dtoa_r+0x498>
 8006e7a:	4656      	mov	r6, sl
 8006e7c:	2331      	movs	r3, #49	@ 0x31
 8006e7e:	f108 0801 	add.w	r8, r8, #1
 8006e82:	f806 3b01 	strb.w	r3, [r6], #1
 8006e86:	e59f      	b.n	80069c8 <_dtoa_r+0x4a0>
 8006e88:	46b8      	mov	r8, r7
 8006e8a:	9c08      	ldr	r4, [sp, #32]
 8006e8c:	4625      	mov	r5, r4
 8006e8e:	e7f4      	b.n	8006e7a <_dtoa_r+0x952>
 8006e90:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006e94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f000 8101 	beq.w	800709e <_dtoa_r+0xb76>
 8006e9c:	2e00      	cmp	r6, #0
 8006e9e:	dd05      	ble.n	8006eac <_dtoa_r+0x984>
 8006ea0:	4629      	mov	r1, r5
 8006ea2:	4632      	mov	r2, r6
 8006ea4:	4648      	mov	r0, r9
 8006ea6:	f000 fc17 	bl	80076d8 <__lshift>
 8006eaa:	4605      	mov	r5, r0
 8006eac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d05c      	beq.n	8006f6c <_dtoa_r+0xa44>
 8006eb2:	4648      	mov	r0, r9
 8006eb4:	6869      	ldr	r1, [r5, #4]
 8006eb6:	f000 fa09 	bl	80072cc <_Balloc>
 8006eba:	4606      	mov	r6, r0
 8006ebc:	b928      	cbnz	r0, 8006eca <_dtoa_r+0x9a2>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006ec4:	4b80      	ldr	r3, [pc, #512]	@ (80070c8 <_dtoa_r+0xba0>)
 8006ec6:	f7ff bb43 	b.w	8006550 <_dtoa_r+0x28>
 8006eca:	692a      	ldr	r2, [r5, #16]
 8006ecc:	f105 010c 	add.w	r1, r5, #12
 8006ed0:	3202      	adds	r2, #2
 8006ed2:	0092      	lsls	r2, r2, #2
 8006ed4:	300c      	adds	r0, #12
 8006ed6:	f000 ff9d 	bl	8007e14 <memcpy>
 8006eda:	2201      	movs	r2, #1
 8006edc:	4631      	mov	r1, r6
 8006ede:	4648      	mov	r0, r9
 8006ee0:	f000 fbfa 	bl	80076d8 <__lshift>
 8006ee4:	462f      	mov	r7, r5
 8006ee6:	4605      	mov	r5, r0
 8006ee8:	f10a 0301 	add.w	r3, sl, #1
 8006eec:	9304      	str	r3, [sp, #16]
 8006eee:	eb0a 030b 	add.w	r3, sl, fp
 8006ef2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ef4:	9b06      	ldr	r3, [sp, #24]
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	9309      	str	r3, [sp, #36]	@ 0x24
 8006efc:	9b04      	ldr	r3, [sp, #16]
 8006efe:	4621      	mov	r1, r4
 8006f00:	9803      	ldr	r0, [sp, #12]
 8006f02:	f103 3bff 	add.w	fp, r3, #4294967295
 8006f06:	f7ff fa84 	bl	8006412 <quorem>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	4639      	mov	r1, r7
 8006f0e:	3330      	adds	r3, #48	@ 0x30
 8006f10:	9006      	str	r0, [sp, #24]
 8006f12:	9803      	ldr	r0, [sp, #12]
 8006f14:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f16:	f000 fc4b 	bl	80077b0 <__mcmp>
 8006f1a:	462a      	mov	r2, r5
 8006f1c:	9008      	str	r0, [sp, #32]
 8006f1e:	4621      	mov	r1, r4
 8006f20:	4648      	mov	r0, r9
 8006f22:	f000 fc61 	bl	80077e8 <__mdiff>
 8006f26:	68c2      	ldr	r2, [r0, #12]
 8006f28:	4606      	mov	r6, r0
 8006f2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f2c:	bb02      	cbnz	r2, 8006f70 <_dtoa_r+0xa48>
 8006f2e:	4601      	mov	r1, r0
 8006f30:	9803      	ldr	r0, [sp, #12]
 8006f32:	f000 fc3d 	bl	80077b0 <__mcmp>
 8006f36:	4602      	mov	r2, r0
 8006f38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f3a:	4631      	mov	r1, r6
 8006f3c:	4648      	mov	r0, r9
 8006f3e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8006f42:	f000 fa03 	bl	800734c <_Bfree>
 8006f46:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006f48:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006f4a:	9e04      	ldr	r6, [sp, #16]
 8006f4c:	ea42 0103 	orr.w	r1, r2, r3
 8006f50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f52:	4319      	orrs	r1, r3
 8006f54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f56:	d10d      	bne.n	8006f74 <_dtoa_r+0xa4c>
 8006f58:	2b39      	cmp	r3, #57	@ 0x39
 8006f5a:	d027      	beq.n	8006fac <_dtoa_r+0xa84>
 8006f5c:	9a08      	ldr	r2, [sp, #32]
 8006f5e:	2a00      	cmp	r2, #0
 8006f60:	dd01      	ble.n	8006f66 <_dtoa_r+0xa3e>
 8006f62:	9b06      	ldr	r3, [sp, #24]
 8006f64:	3331      	adds	r3, #49	@ 0x31
 8006f66:	f88b 3000 	strb.w	r3, [fp]
 8006f6a:	e52e      	b.n	80069ca <_dtoa_r+0x4a2>
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	e7b9      	b.n	8006ee4 <_dtoa_r+0x9bc>
 8006f70:	2201      	movs	r2, #1
 8006f72:	e7e2      	b.n	8006f3a <_dtoa_r+0xa12>
 8006f74:	9908      	ldr	r1, [sp, #32]
 8006f76:	2900      	cmp	r1, #0
 8006f78:	db04      	blt.n	8006f84 <_dtoa_r+0xa5c>
 8006f7a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8006f7c:	4301      	orrs	r1, r0
 8006f7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f80:	4301      	orrs	r1, r0
 8006f82:	d120      	bne.n	8006fc6 <_dtoa_r+0xa9e>
 8006f84:	2a00      	cmp	r2, #0
 8006f86:	ddee      	ble.n	8006f66 <_dtoa_r+0xa3e>
 8006f88:	2201      	movs	r2, #1
 8006f8a:	9903      	ldr	r1, [sp, #12]
 8006f8c:	4648      	mov	r0, r9
 8006f8e:	9304      	str	r3, [sp, #16]
 8006f90:	f000 fba2 	bl	80076d8 <__lshift>
 8006f94:	4621      	mov	r1, r4
 8006f96:	9003      	str	r0, [sp, #12]
 8006f98:	f000 fc0a 	bl	80077b0 <__mcmp>
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	9b04      	ldr	r3, [sp, #16]
 8006fa0:	dc02      	bgt.n	8006fa8 <_dtoa_r+0xa80>
 8006fa2:	d1e0      	bne.n	8006f66 <_dtoa_r+0xa3e>
 8006fa4:	07da      	lsls	r2, r3, #31
 8006fa6:	d5de      	bpl.n	8006f66 <_dtoa_r+0xa3e>
 8006fa8:	2b39      	cmp	r3, #57	@ 0x39
 8006faa:	d1da      	bne.n	8006f62 <_dtoa_r+0xa3a>
 8006fac:	2339      	movs	r3, #57	@ 0x39
 8006fae:	f88b 3000 	strb.w	r3, [fp]
 8006fb2:	4633      	mov	r3, r6
 8006fb4:	461e      	mov	r6, r3
 8006fb6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	2a39      	cmp	r2, #57	@ 0x39
 8006fbe:	d04e      	beq.n	800705e <_dtoa_r+0xb36>
 8006fc0:	3201      	adds	r2, #1
 8006fc2:	701a      	strb	r2, [r3, #0]
 8006fc4:	e501      	b.n	80069ca <_dtoa_r+0x4a2>
 8006fc6:	2a00      	cmp	r2, #0
 8006fc8:	dd03      	ble.n	8006fd2 <_dtoa_r+0xaaa>
 8006fca:	2b39      	cmp	r3, #57	@ 0x39
 8006fcc:	d0ee      	beq.n	8006fac <_dtoa_r+0xa84>
 8006fce:	3301      	adds	r3, #1
 8006fd0:	e7c9      	b.n	8006f66 <_dtoa_r+0xa3e>
 8006fd2:	9a04      	ldr	r2, [sp, #16]
 8006fd4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006fd6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006fda:	428a      	cmp	r2, r1
 8006fdc:	d028      	beq.n	8007030 <_dtoa_r+0xb08>
 8006fde:	2300      	movs	r3, #0
 8006fe0:	220a      	movs	r2, #10
 8006fe2:	9903      	ldr	r1, [sp, #12]
 8006fe4:	4648      	mov	r0, r9
 8006fe6:	f000 f9d3 	bl	8007390 <__multadd>
 8006fea:	42af      	cmp	r7, r5
 8006fec:	9003      	str	r0, [sp, #12]
 8006fee:	f04f 0300 	mov.w	r3, #0
 8006ff2:	f04f 020a 	mov.w	r2, #10
 8006ff6:	4639      	mov	r1, r7
 8006ff8:	4648      	mov	r0, r9
 8006ffa:	d107      	bne.n	800700c <_dtoa_r+0xae4>
 8006ffc:	f000 f9c8 	bl	8007390 <__multadd>
 8007000:	4607      	mov	r7, r0
 8007002:	4605      	mov	r5, r0
 8007004:	9b04      	ldr	r3, [sp, #16]
 8007006:	3301      	adds	r3, #1
 8007008:	9304      	str	r3, [sp, #16]
 800700a:	e777      	b.n	8006efc <_dtoa_r+0x9d4>
 800700c:	f000 f9c0 	bl	8007390 <__multadd>
 8007010:	4629      	mov	r1, r5
 8007012:	4607      	mov	r7, r0
 8007014:	2300      	movs	r3, #0
 8007016:	220a      	movs	r2, #10
 8007018:	4648      	mov	r0, r9
 800701a:	f000 f9b9 	bl	8007390 <__multadd>
 800701e:	4605      	mov	r5, r0
 8007020:	e7f0      	b.n	8007004 <_dtoa_r+0xadc>
 8007022:	f1bb 0f00 	cmp.w	fp, #0
 8007026:	bfcc      	ite	gt
 8007028:	465e      	movgt	r6, fp
 800702a:	2601      	movle	r6, #1
 800702c:	2700      	movs	r7, #0
 800702e:	4456      	add	r6, sl
 8007030:	2201      	movs	r2, #1
 8007032:	9903      	ldr	r1, [sp, #12]
 8007034:	4648      	mov	r0, r9
 8007036:	9304      	str	r3, [sp, #16]
 8007038:	f000 fb4e 	bl	80076d8 <__lshift>
 800703c:	4621      	mov	r1, r4
 800703e:	9003      	str	r0, [sp, #12]
 8007040:	f000 fbb6 	bl	80077b0 <__mcmp>
 8007044:	2800      	cmp	r0, #0
 8007046:	dcb4      	bgt.n	8006fb2 <_dtoa_r+0xa8a>
 8007048:	d102      	bne.n	8007050 <_dtoa_r+0xb28>
 800704a:	9b04      	ldr	r3, [sp, #16]
 800704c:	07db      	lsls	r3, r3, #31
 800704e:	d4b0      	bmi.n	8006fb2 <_dtoa_r+0xa8a>
 8007050:	4633      	mov	r3, r6
 8007052:	461e      	mov	r6, r3
 8007054:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007058:	2a30      	cmp	r2, #48	@ 0x30
 800705a:	d0fa      	beq.n	8007052 <_dtoa_r+0xb2a>
 800705c:	e4b5      	b.n	80069ca <_dtoa_r+0x4a2>
 800705e:	459a      	cmp	sl, r3
 8007060:	d1a8      	bne.n	8006fb4 <_dtoa_r+0xa8c>
 8007062:	2331      	movs	r3, #49	@ 0x31
 8007064:	f108 0801 	add.w	r8, r8, #1
 8007068:	f88a 3000 	strb.w	r3, [sl]
 800706c:	e4ad      	b.n	80069ca <_dtoa_r+0x4a2>
 800706e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007070:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80070cc <_dtoa_r+0xba4>
 8007074:	b11b      	cbz	r3, 800707e <_dtoa_r+0xb56>
 8007076:	f10a 0308 	add.w	r3, sl, #8
 800707a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800707c:	6013      	str	r3, [r2, #0]
 800707e:	4650      	mov	r0, sl
 8007080:	b017      	add	sp, #92	@ 0x5c
 8007082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007086:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007088:	2b01      	cmp	r3, #1
 800708a:	f77f ae2e 	ble.w	8006cea <_dtoa_r+0x7c2>
 800708e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007090:	930a      	str	r3, [sp, #40]	@ 0x28
 8007092:	2001      	movs	r0, #1
 8007094:	e64d      	b.n	8006d32 <_dtoa_r+0x80a>
 8007096:	f1bb 0f00 	cmp.w	fp, #0
 800709a:	f77f aed9 	ble.w	8006e50 <_dtoa_r+0x928>
 800709e:	4656      	mov	r6, sl
 80070a0:	4621      	mov	r1, r4
 80070a2:	9803      	ldr	r0, [sp, #12]
 80070a4:	f7ff f9b5 	bl	8006412 <quorem>
 80070a8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80070ac:	f806 3b01 	strb.w	r3, [r6], #1
 80070b0:	eba6 020a 	sub.w	r2, r6, sl
 80070b4:	4593      	cmp	fp, r2
 80070b6:	ddb4      	ble.n	8007022 <_dtoa_r+0xafa>
 80070b8:	2300      	movs	r3, #0
 80070ba:	220a      	movs	r2, #10
 80070bc:	4648      	mov	r0, r9
 80070be:	9903      	ldr	r1, [sp, #12]
 80070c0:	f000 f966 	bl	8007390 <__multadd>
 80070c4:	9003      	str	r0, [sp, #12]
 80070c6:	e7eb      	b.n	80070a0 <_dtoa_r+0xb78>
 80070c8:	08008f2b 	.word	0x08008f2b
 80070cc:	08008eaf 	.word	0x08008eaf

080070d0 <_free_r>:
 80070d0:	b538      	push	{r3, r4, r5, lr}
 80070d2:	4605      	mov	r5, r0
 80070d4:	2900      	cmp	r1, #0
 80070d6:	d040      	beq.n	800715a <_free_r+0x8a>
 80070d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070dc:	1f0c      	subs	r4, r1, #4
 80070de:	2b00      	cmp	r3, #0
 80070e0:	bfb8      	it	lt
 80070e2:	18e4      	addlt	r4, r4, r3
 80070e4:	f000 f8e6 	bl	80072b4 <__malloc_lock>
 80070e8:	4a1c      	ldr	r2, [pc, #112]	@ (800715c <_free_r+0x8c>)
 80070ea:	6813      	ldr	r3, [r2, #0]
 80070ec:	b933      	cbnz	r3, 80070fc <_free_r+0x2c>
 80070ee:	6063      	str	r3, [r4, #4]
 80070f0:	6014      	str	r4, [r2, #0]
 80070f2:	4628      	mov	r0, r5
 80070f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070f8:	f000 b8e2 	b.w	80072c0 <__malloc_unlock>
 80070fc:	42a3      	cmp	r3, r4
 80070fe:	d908      	bls.n	8007112 <_free_r+0x42>
 8007100:	6820      	ldr	r0, [r4, #0]
 8007102:	1821      	adds	r1, r4, r0
 8007104:	428b      	cmp	r3, r1
 8007106:	bf01      	itttt	eq
 8007108:	6819      	ldreq	r1, [r3, #0]
 800710a:	685b      	ldreq	r3, [r3, #4]
 800710c:	1809      	addeq	r1, r1, r0
 800710e:	6021      	streq	r1, [r4, #0]
 8007110:	e7ed      	b.n	80070ee <_free_r+0x1e>
 8007112:	461a      	mov	r2, r3
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	b10b      	cbz	r3, 800711c <_free_r+0x4c>
 8007118:	42a3      	cmp	r3, r4
 800711a:	d9fa      	bls.n	8007112 <_free_r+0x42>
 800711c:	6811      	ldr	r1, [r2, #0]
 800711e:	1850      	adds	r0, r2, r1
 8007120:	42a0      	cmp	r0, r4
 8007122:	d10b      	bne.n	800713c <_free_r+0x6c>
 8007124:	6820      	ldr	r0, [r4, #0]
 8007126:	4401      	add	r1, r0
 8007128:	1850      	adds	r0, r2, r1
 800712a:	4283      	cmp	r3, r0
 800712c:	6011      	str	r1, [r2, #0]
 800712e:	d1e0      	bne.n	80070f2 <_free_r+0x22>
 8007130:	6818      	ldr	r0, [r3, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	4408      	add	r0, r1
 8007136:	6010      	str	r0, [r2, #0]
 8007138:	6053      	str	r3, [r2, #4]
 800713a:	e7da      	b.n	80070f2 <_free_r+0x22>
 800713c:	d902      	bls.n	8007144 <_free_r+0x74>
 800713e:	230c      	movs	r3, #12
 8007140:	602b      	str	r3, [r5, #0]
 8007142:	e7d6      	b.n	80070f2 <_free_r+0x22>
 8007144:	6820      	ldr	r0, [r4, #0]
 8007146:	1821      	adds	r1, r4, r0
 8007148:	428b      	cmp	r3, r1
 800714a:	bf01      	itttt	eq
 800714c:	6819      	ldreq	r1, [r3, #0]
 800714e:	685b      	ldreq	r3, [r3, #4]
 8007150:	1809      	addeq	r1, r1, r0
 8007152:	6021      	streq	r1, [r4, #0]
 8007154:	6063      	str	r3, [r4, #4]
 8007156:	6054      	str	r4, [r2, #4]
 8007158:	e7cb      	b.n	80070f2 <_free_r+0x22>
 800715a:	bd38      	pop	{r3, r4, r5, pc}
 800715c:	200008a4 	.word	0x200008a4

08007160 <malloc>:
 8007160:	4b02      	ldr	r3, [pc, #8]	@ (800716c <malloc+0xc>)
 8007162:	4601      	mov	r1, r0
 8007164:	6818      	ldr	r0, [r3, #0]
 8007166:	f000 b825 	b.w	80071b4 <_malloc_r>
 800716a:	bf00      	nop
 800716c:	20000028 	.word	0x20000028

08007170 <sbrk_aligned>:
 8007170:	b570      	push	{r4, r5, r6, lr}
 8007172:	4e0f      	ldr	r6, [pc, #60]	@ (80071b0 <sbrk_aligned+0x40>)
 8007174:	460c      	mov	r4, r1
 8007176:	6831      	ldr	r1, [r6, #0]
 8007178:	4605      	mov	r5, r0
 800717a:	b911      	cbnz	r1, 8007182 <sbrk_aligned+0x12>
 800717c:	f000 fe3a 	bl	8007df4 <_sbrk_r>
 8007180:	6030      	str	r0, [r6, #0]
 8007182:	4621      	mov	r1, r4
 8007184:	4628      	mov	r0, r5
 8007186:	f000 fe35 	bl	8007df4 <_sbrk_r>
 800718a:	1c43      	adds	r3, r0, #1
 800718c:	d103      	bne.n	8007196 <sbrk_aligned+0x26>
 800718e:	f04f 34ff 	mov.w	r4, #4294967295
 8007192:	4620      	mov	r0, r4
 8007194:	bd70      	pop	{r4, r5, r6, pc}
 8007196:	1cc4      	adds	r4, r0, #3
 8007198:	f024 0403 	bic.w	r4, r4, #3
 800719c:	42a0      	cmp	r0, r4
 800719e:	d0f8      	beq.n	8007192 <sbrk_aligned+0x22>
 80071a0:	1a21      	subs	r1, r4, r0
 80071a2:	4628      	mov	r0, r5
 80071a4:	f000 fe26 	bl	8007df4 <_sbrk_r>
 80071a8:	3001      	adds	r0, #1
 80071aa:	d1f2      	bne.n	8007192 <sbrk_aligned+0x22>
 80071ac:	e7ef      	b.n	800718e <sbrk_aligned+0x1e>
 80071ae:	bf00      	nop
 80071b0:	200008a0 	.word	0x200008a0

080071b4 <_malloc_r>:
 80071b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071b8:	1ccd      	adds	r5, r1, #3
 80071ba:	f025 0503 	bic.w	r5, r5, #3
 80071be:	3508      	adds	r5, #8
 80071c0:	2d0c      	cmp	r5, #12
 80071c2:	bf38      	it	cc
 80071c4:	250c      	movcc	r5, #12
 80071c6:	2d00      	cmp	r5, #0
 80071c8:	4606      	mov	r6, r0
 80071ca:	db01      	blt.n	80071d0 <_malloc_r+0x1c>
 80071cc:	42a9      	cmp	r1, r5
 80071ce:	d904      	bls.n	80071da <_malloc_r+0x26>
 80071d0:	230c      	movs	r3, #12
 80071d2:	6033      	str	r3, [r6, #0]
 80071d4:	2000      	movs	r0, #0
 80071d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80072b0 <_malloc_r+0xfc>
 80071de:	f000 f869 	bl	80072b4 <__malloc_lock>
 80071e2:	f8d8 3000 	ldr.w	r3, [r8]
 80071e6:	461c      	mov	r4, r3
 80071e8:	bb44      	cbnz	r4, 800723c <_malloc_r+0x88>
 80071ea:	4629      	mov	r1, r5
 80071ec:	4630      	mov	r0, r6
 80071ee:	f7ff ffbf 	bl	8007170 <sbrk_aligned>
 80071f2:	1c43      	adds	r3, r0, #1
 80071f4:	4604      	mov	r4, r0
 80071f6:	d158      	bne.n	80072aa <_malloc_r+0xf6>
 80071f8:	f8d8 4000 	ldr.w	r4, [r8]
 80071fc:	4627      	mov	r7, r4
 80071fe:	2f00      	cmp	r7, #0
 8007200:	d143      	bne.n	800728a <_malloc_r+0xd6>
 8007202:	2c00      	cmp	r4, #0
 8007204:	d04b      	beq.n	800729e <_malloc_r+0xea>
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	4639      	mov	r1, r7
 800720a:	4630      	mov	r0, r6
 800720c:	eb04 0903 	add.w	r9, r4, r3
 8007210:	f000 fdf0 	bl	8007df4 <_sbrk_r>
 8007214:	4581      	cmp	r9, r0
 8007216:	d142      	bne.n	800729e <_malloc_r+0xea>
 8007218:	6821      	ldr	r1, [r4, #0]
 800721a:	4630      	mov	r0, r6
 800721c:	1a6d      	subs	r5, r5, r1
 800721e:	4629      	mov	r1, r5
 8007220:	f7ff ffa6 	bl	8007170 <sbrk_aligned>
 8007224:	3001      	adds	r0, #1
 8007226:	d03a      	beq.n	800729e <_malloc_r+0xea>
 8007228:	6823      	ldr	r3, [r4, #0]
 800722a:	442b      	add	r3, r5
 800722c:	6023      	str	r3, [r4, #0]
 800722e:	f8d8 3000 	ldr.w	r3, [r8]
 8007232:	685a      	ldr	r2, [r3, #4]
 8007234:	bb62      	cbnz	r2, 8007290 <_malloc_r+0xdc>
 8007236:	f8c8 7000 	str.w	r7, [r8]
 800723a:	e00f      	b.n	800725c <_malloc_r+0xa8>
 800723c:	6822      	ldr	r2, [r4, #0]
 800723e:	1b52      	subs	r2, r2, r5
 8007240:	d420      	bmi.n	8007284 <_malloc_r+0xd0>
 8007242:	2a0b      	cmp	r2, #11
 8007244:	d917      	bls.n	8007276 <_malloc_r+0xc2>
 8007246:	1961      	adds	r1, r4, r5
 8007248:	42a3      	cmp	r3, r4
 800724a:	6025      	str	r5, [r4, #0]
 800724c:	bf18      	it	ne
 800724e:	6059      	strne	r1, [r3, #4]
 8007250:	6863      	ldr	r3, [r4, #4]
 8007252:	bf08      	it	eq
 8007254:	f8c8 1000 	streq.w	r1, [r8]
 8007258:	5162      	str	r2, [r4, r5]
 800725a:	604b      	str	r3, [r1, #4]
 800725c:	4630      	mov	r0, r6
 800725e:	f000 f82f 	bl	80072c0 <__malloc_unlock>
 8007262:	f104 000b 	add.w	r0, r4, #11
 8007266:	1d23      	adds	r3, r4, #4
 8007268:	f020 0007 	bic.w	r0, r0, #7
 800726c:	1ac2      	subs	r2, r0, r3
 800726e:	bf1c      	itt	ne
 8007270:	1a1b      	subne	r3, r3, r0
 8007272:	50a3      	strne	r3, [r4, r2]
 8007274:	e7af      	b.n	80071d6 <_malloc_r+0x22>
 8007276:	6862      	ldr	r2, [r4, #4]
 8007278:	42a3      	cmp	r3, r4
 800727a:	bf0c      	ite	eq
 800727c:	f8c8 2000 	streq.w	r2, [r8]
 8007280:	605a      	strne	r2, [r3, #4]
 8007282:	e7eb      	b.n	800725c <_malloc_r+0xa8>
 8007284:	4623      	mov	r3, r4
 8007286:	6864      	ldr	r4, [r4, #4]
 8007288:	e7ae      	b.n	80071e8 <_malloc_r+0x34>
 800728a:	463c      	mov	r4, r7
 800728c:	687f      	ldr	r7, [r7, #4]
 800728e:	e7b6      	b.n	80071fe <_malloc_r+0x4a>
 8007290:	461a      	mov	r2, r3
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	42a3      	cmp	r3, r4
 8007296:	d1fb      	bne.n	8007290 <_malloc_r+0xdc>
 8007298:	2300      	movs	r3, #0
 800729a:	6053      	str	r3, [r2, #4]
 800729c:	e7de      	b.n	800725c <_malloc_r+0xa8>
 800729e:	230c      	movs	r3, #12
 80072a0:	4630      	mov	r0, r6
 80072a2:	6033      	str	r3, [r6, #0]
 80072a4:	f000 f80c 	bl	80072c0 <__malloc_unlock>
 80072a8:	e794      	b.n	80071d4 <_malloc_r+0x20>
 80072aa:	6005      	str	r5, [r0, #0]
 80072ac:	e7d6      	b.n	800725c <_malloc_r+0xa8>
 80072ae:	bf00      	nop
 80072b0:	200008a4 	.word	0x200008a4

080072b4 <__malloc_lock>:
 80072b4:	4801      	ldr	r0, [pc, #4]	@ (80072bc <__malloc_lock+0x8>)
 80072b6:	f7ff b89c 	b.w	80063f2 <__retarget_lock_acquire_recursive>
 80072ba:	bf00      	nop
 80072bc:	2000089c 	.word	0x2000089c

080072c0 <__malloc_unlock>:
 80072c0:	4801      	ldr	r0, [pc, #4]	@ (80072c8 <__malloc_unlock+0x8>)
 80072c2:	f7ff b897 	b.w	80063f4 <__retarget_lock_release_recursive>
 80072c6:	bf00      	nop
 80072c8:	2000089c 	.word	0x2000089c

080072cc <_Balloc>:
 80072cc:	b570      	push	{r4, r5, r6, lr}
 80072ce:	69c6      	ldr	r6, [r0, #28]
 80072d0:	4604      	mov	r4, r0
 80072d2:	460d      	mov	r5, r1
 80072d4:	b976      	cbnz	r6, 80072f4 <_Balloc+0x28>
 80072d6:	2010      	movs	r0, #16
 80072d8:	f7ff ff42 	bl	8007160 <malloc>
 80072dc:	4602      	mov	r2, r0
 80072de:	61e0      	str	r0, [r4, #28]
 80072e0:	b920      	cbnz	r0, 80072ec <_Balloc+0x20>
 80072e2:	216b      	movs	r1, #107	@ 0x6b
 80072e4:	4b17      	ldr	r3, [pc, #92]	@ (8007344 <_Balloc+0x78>)
 80072e6:	4818      	ldr	r0, [pc, #96]	@ (8007348 <_Balloc+0x7c>)
 80072e8:	f000 fda2 	bl	8007e30 <__assert_func>
 80072ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072f0:	6006      	str	r6, [r0, #0]
 80072f2:	60c6      	str	r6, [r0, #12]
 80072f4:	69e6      	ldr	r6, [r4, #28]
 80072f6:	68f3      	ldr	r3, [r6, #12]
 80072f8:	b183      	cbz	r3, 800731c <_Balloc+0x50>
 80072fa:	69e3      	ldr	r3, [r4, #28]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007302:	b9b8      	cbnz	r0, 8007334 <_Balloc+0x68>
 8007304:	2101      	movs	r1, #1
 8007306:	fa01 f605 	lsl.w	r6, r1, r5
 800730a:	1d72      	adds	r2, r6, #5
 800730c:	4620      	mov	r0, r4
 800730e:	0092      	lsls	r2, r2, #2
 8007310:	f000 fdac 	bl	8007e6c <_calloc_r>
 8007314:	b160      	cbz	r0, 8007330 <_Balloc+0x64>
 8007316:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800731a:	e00e      	b.n	800733a <_Balloc+0x6e>
 800731c:	2221      	movs	r2, #33	@ 0x21
 800731e:	2104      	movs	r1, #4
 8007320:	4620      	mov	r0, r4
 8007322:	f000 fda3 	bl	8007e6c <_calloc_r>
 8007326:	69e3      	ldr	r3, [r4, #28]
 8007328:	60f0      	str	r0, [r6, #12]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1e4      	bne.n	80072fa <_Balloc+0x2e>
 8007330:	2000      	movs	r0, #0
 8007332:	bd70      	pop	{r4, r5, r6, pc}
 8007334:	6802      	ldr	r2, [r0, #0]
 8007336:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800733a:	2300      	movs	r3, #0
 800733c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007340:	e7f7      	b.n	8007332 <_Balloc+0x66>
 8007342:	bf00      	nop
 8007344:	08008ebc 	.word	0x08008ebc
 8007348:	08008f3c 	.word	0x08008f3c

0800734c <_Bfree>:
 800734c:	b570      	push	{r4, r5, r6, lr}
 800734e:	69c6      	ldr	r6, [r0, #28]
 8007350:	4605      	mov	r5, r0
 8007352:	460c      	mov	r4, r1
 8007354:	b976      	cbnz	r6, 8007374 <_Bfree+0x28>
 8007356:	2010      	movs	r0, #16
 8007358:	f7ff ff02 	bl	8007160 <malloc>
 800735c:	4602      	mov	r2, r0
 800735e:	61e8      	str	r0, [r5, #28]
 8007360:	b920      	cbnz	r0, 800736c <_Bfree+0x20>
 8007362:	218f      	movs	r1, #143	@ 0x8f
 8007364:	4b08      	ldr	r3, [pc, #32]	@ (8007388 <_Bfree+0x3c>)
 8007366:	4809      	ldr	r0, [pc, #36]	@ (800738c <_Bfree+0x40>)
 8007368:	f000 fd62 	bl	8007e30 <__assert_func>
 800736c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007370:	6006      	str	r6, [r0, #0]
 8007372:	60c6      	str	r6, [r0, #12]
 8007374:	b13c      	cbz	r4, 8007386 <_Bfree+0x3a>
 8007376:	69eb      	ldr	r3, [r5, #28]
 8007378:	6862      	ldr	r2, [r4, #4]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007380:	6021      	str	r1, [r4, #0]
 8007382:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007386:	bd70      	pop	{r4, r5, r6, pc}
 8007388:	08008ebc 	.word	0x08008ebc
 800738c:	08008f3c 	.word	0x08008f3c

08007390 <__multadd>:
 8007390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007394:	4607      	mov	r7, r0
 8007396:	460c      	mov	r4, r1
 8007398:	461e      	mov	r6, r3
 800739a:	2000      	movs	r0, #0
 800739c:	690d      	ldr	r5, [r1, #16]
 800739e:	f101 0c14 	add.w	ip, r1, #20
 80073a2:	f8dc 3000 	ldr.w	r3, [ip]
 80073a6:	3001      	adds	r0, #1
 80073a8:	b299      	uxth	r1, r3
 80073aa:	fb02 6101 	mla	r1, r2, r1, r6
 80073ae:	0c1e      	lsrs	r6, r3, #16
 80073b0:	0c0b      	lsrs	r3, r1, #16
 80073b2:	fb02 3306 	mla	r3, r2, r6, r3
 80073b6:	b289      	uxth	r1, r1
 80073b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80073bc:	4285      	cmp	r5, r0
 80073be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80073c2:	f84c 1b04 	str.w	r1, [ip], #4
 80073c6:	dcec      	bgt.n	80073a2 <__multadd+0x12>
 80073c8:	b30e      	cbz	r6, 800740e <__multadd+0x7e>
 80073ca:	68a3      	ldr	r3, [r4, #8]
 80073cc:	42ab      	cmp	r3, r5
 80073ce:	dc19      	bgt.n	8007404 <__multadd+0x74>
 80073d0:	6861      	ldr	r1, [r4, #4]
 80073d2:	4638      	mov	r0, r7
 80073d4:	3101      	adds	r1, #1
 80073d6:	f7ff ff79 	bl	80072cc <_Balloc>
 80073da:	4680      	mov	r8, r0
 80073dc:	b928      	cbnz	r0, 80073ea <__multadd+0x5a>
 80073de:	4602      	mov	r2, r0
 80073e0:	21ba      	movs	r1, #186	@ 0xba
 80073e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007414 <__multadd+0x84>)
 80073e4:	480c      	ldr	r0, [pc, #48]	@ (8007418 <__multadd+0x88>)
 80073e6:	f000 fd23 	bl	8007e30 <__assert_func>
 80073ea:	6922      	ldr	r2, [r4, #16]
 80073ec:	f104 010c 	add.w	r1, r4, #12
 80073f0:	3202      	adds	r2, #2
 80073f2:	0092      	lsls	r2, r2, #2
 80073f4:	300c      	adds	r0, #12
 80073f6:	f000 fd0d 	bl	8007e14 <memcpy>
 80073fa:	4621      	mov	r1, r4
 80073fc:	4638      	mov	r0, r7
 80073fe:	f7ff ffa5 	bl	800734c <_Bfree>
 8007402:	4644      	mov	r4, r8
 8007404:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007408:	3501      	adds	r5, #1
 800740a:	615e      	str	r6, [r3, #20]
 800740c:	6125      	str	r5, [r4, #16]
 800740e:	4620      	mov	r0, r4
 8007410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007414:	08008f2b 	.word	0x08008f2b
 8007418:	08008f3c 	.word	0x08008f3c

0800741c <__hi0bits>:
 800741c:	4603      	mov	r3, r0
 800741e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007422:	bf3a      	itte	cc
 8007424:	0403      	lslcc	r3, r0, #16
 8007426:	2010      	movcc	r0, #16
 8007428:	2000      	movcs	r0, #0
 800742a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800742e:	bf3c      	itt	cc
 8007430:	021b      	lslcc	r3, r3, #8
 8007432:	3008      	addcc	r0, #8
 8007434:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007438:	bf3c      	itt	cc
 800743a:	011b      	lslcc	r3, r3, #4
 800743c:	3004      	addcc	r0, #4
 800743e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007442:	bf3c      	itt	cc
 8007444:	009b      	lslcc	r3, r3, #2
 8007446:	3002      	addcc	r0, #2
 8007448:	2b00      	cmp	r3, #0
 800744a:	db05      	blt.n	8007458 <__hi0bits+0x3c>
 800744c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007450:	f100 0001 	add.w	r0, r0, #1
 8007454:	bf08      	it	eq
 8007456:	2020      	moveq	r0, #32
 8007458:	4770      	bx	lr

0800745a <__lo0bits>:
 800745a:	6803      	ldr	r3, [r0, #0]
 800745c:	4602      	mov	r2, r0
 800745e:	f013 0007 	ands.w	r0, r3, #7
 8007462:	d00b      	beq.n	800747c <__lo0bits+0x22>
 8007464:	07d9      	lsls	r1, r3, #31
 8007466:	d421      	bmi.n	80074ac <__lo0bits+0x52>
 8007468:	0798      	lsls	r0, r3, #30
 800746a:	bf49      	itett	mi
 800746c:	085b      	lsrmi	r3, r3, #1
 800746e:	089b      	lsrpl	r3, r3, #2
 8007470:	2001      	movmi	r0, #1
 8007472:	6013      	strmi	r3, [r2, #0]
 8007474:	bf5c      	itt	pl
 8007476:	2002      	movpl	r0, #2
 8007478:	6013      	strpl	r3, [r2, #0]
 800747a:	4770      	bx	lr
 800747c:	b299      	uxth	r1, r3
 800747e:	b909      	cbnz	r1, 8007484 <__lo0bits+0x2a>
 8007480:	2010      	movs	r0, #16
 8007482:	0c1b      	lsrs	r3, r3, #16
 8007484:	b2d9      	uxtb	r1, r3
 8007486:	b909      	cbnz	r1, 800748c <__lo0bits+0x32>
 8007488:	3008      	adds	r0, #8
 800748a:	0a1b      	lsrs	r3, r3, #8
 800748c:	0719      	lsls	r1, r3, #28
 800748e:	bf04      	itt	eq
 8007490:	091b      	lsreq	r3, r3, #4
 8007492:	3004      	addeq	r0, #4
 8007494:	0799      	lsls	r1, r3, #30
 8007496:	bf04      	itt	eq
 8007498:	089b      	lsreq	r3, r3, #2
 800749a:	3002      	addeq	r0, #2
 800749c:	07d9      	lsls	r1, r3, #31
 800749e:	d403      	bmi.n	80074a8 <__lo0bits+0x4e>
 80074a0:	085b      	lsrs	r3, r3, #1
 80074a2:	f100 0001 	add.w	r0, r0, #1
 80074a6:	d003      	beq.n	80074b0 <__lo0bits+0x56>
 80074a8:	6013      	str	r3, [r2, #0]
 80074aa:	4770      	bx	lr
 80074ac:	2000      	movs	r0, #0
 80074ae:	4770      	bx	lr
 80074b0:	2020      	movs	r0, #32
 80074b2:	4770      	bx	lr

080074b4 <__i2b>:
 80074b4:	b510      	push	{r4, lr}
 80074b6:	460c      	mov	r4, r1
 80074b8:	2101      	movs	r1, #1
 80074ba:	f7ff ff07 	bl	80072cc <_Balloc>
 80074be:	4602      	mov	r2, r0
 80074c0:	b928      	cbnz	r0, 80074ce <__i2b+0x1a>
 80074c2:	f240 1145 	movw	r1, #325	@ 0x145
 80074c6:	4b04      	ldr	r3, [pc, #16]	@ (80074d8 <__i2b+0x24>)
 80074c8:	4804      	ldr	r0, [pc, #16]	@ (80074dc <__i2b+0x28>)
 80074ca:	f000 fcb1 	bl	8007e30 <__assert_func>
 80074ce:	2301      	movs	r3, #1
 80074d0:	6144      	str	r4, [r0, #20]
 80074d2:	6103      	str	r3, [r0, #16]
 80074d4:	bd10      	pop	{r4, pc}
 80074d6:	bf00      	nop
 80074d8:	08008f2b 	.word	0x08008f2b
 80074dc:	08008f3c 	.word	0x08008f3c

080074e0 <__multiply>:
 80074e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e4:	4617      	mov	r7, r2
 80074e6:	690a      	ldr	r2, [r1, #16]
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	4689      	mov	r9, r1
 80074ec:	429a      	cmp	r2, r3
 80074ee:	bfa2      	ittt	ge
 80074f0:	463b      	movge	r3, r7
 80074f2:	460f      	movge	r7, r1
 80074f4:	4699      	movge	r9, r3
 80074f6:	693d      	ldr	r5, [r7, #16]
 80074f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	6879      	ldr	r1, [r7, #4]
 8007500:	eb05 060a 	add.w	r6, r5, sl
 8007504:	42b3      	cmp	r3, r6
 8007506:	b085      	sub	sp, #20
 8007508:	bfb8      	it	lt
 800750a:	3101      	addlt	r1, #1
 800750c:	f7ff fede 	bl	80072cc <_Balloc>
 8007510:	b930      	cbnz	r0, 8007520 <__multiply+0x40>
 8007512:	4602      	mov	r2, r0
 8007514:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007518:	4b40      	ldr	r3, [pc, #256]	@ (800761c <__multiply+0x13c>)
 800751a:	4841      	ldr	r0, [pc, #260]	@ (8007620 <__multiply+0x140>)
 800751c:	f000 fc88 	bl	8007e30 <__assert_func>
 8007520:	f100 0414 	add.w	r4, r0, #20
 8007524:	4623      	mov	r3, r4
 8007526:	2200      	movs	r2, #0
 8007528:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800752c:	4573      	cmp	r3, lr
 800752e:	d320      	bcc.n	8007572 <__multiply+0x92>
 8007530:	f107 0814 	add.w	r8, r7, #20
 8007534:	f109 0114 	add.w	r1, r9, #20
 8007538:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800753c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007540:	9302      	str	r3, [sp, #8]
 8007542:	1beb      	subs	r3, r5, r7
 8007544:	3b15      	subs	r3, #21
 8007546:	f023 0303 	bic.w	r3, r3, #3
 800754a:	3304      	adds	r3, #4
 800754c:	3715      	adds	r7, #21
 800754e:	42bd      	cmp	r5, r7
 8007550:	bf38      	it	cc
 8007552:	2304      	movcc	r3, #4
 8007554:	9301      	str	r3, [sp, #4]
 8007556:	9b02      	ldr	r3, [sp, #8]
 8007558:	9103      	str	r1, [sp, #12]
 800755a:	428b      	cmp	r3, r1
 800755c:	d80c      	bhi.n	8007578 <__multiply+0x98>
 800755e:	2e00      	cmp	r6, #0
 8007560:	dd03      	ble.n	800756a <__multiply+0x8a>
 8007562:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007566:	2b00      	cmp	r3, #0
 8007568:	d055      	beq.n	8007616 <__multiply+0x136>
 800756a:	6106      	str	r6, [r0, #16]
 800756c:	b005      	add	sp, #20
 800756e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007572:	f843 2b04 	str.w	r2, [r3], #4
 8007576:	e7d9      	b.n	800752c <__multiply+0x4c>
 8007578:	f8b1 a000 	ldrh.w	sl, [r1]
 800757c:	f1ba 0f00 	cmp.w	sl, #0
 8007580:	d01f      	beq.n	80075c2 <__multiply+0xe2>
 8007582:	46c4      	mov	ip, r8
 8007584:	46a1      	mov	r9, r4
 8007586:	2700      	movs	r7, #0
 8007588:	f85c 2b04 	ldr.w	r2, [ip], #4
 800758c:	f8d9 3000 	ldr.w	r3, [r9]
 8007590:	fa1f fb82 	uxth.w	fp, r2
 8007594:	b29b      	uxth	r3, r3
 8007596:	fb0a 330b 	mla	r3, sl, fp, r3
 800759a:	443b      	add	r3, r7
 800759c:	f8d9 7000 	ldr.w	r7, [r9]
 80075a0:	0c12      	lsrs	r2, r2, #16
 80075a2:	0c3f      	lsrs	r7, r7, #16
 80075a4:	fb0a 7202 	mla	r2, sl, r2, r7
 80075a8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075b2:	4565      	cmp	r5, ip
 80075b4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80075b8:	f849 3b04 	str.w	r3, [r9], #4
 80075bc:	d8e4      	bhi.n	8007588 <__multiply+0xa8>
 80075be:	9b01      	ldr	r3, [sp, #4]
 80075c0:	50e7      	str	r7, [r4, r3]
 80075c2:	9b03      	ldr	r3, [sp, #12]
 80075c4:	3104      	adds	r1, #4
 80075c6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80075ca:	f1b9 0f00 	cmp.w	r9, #0
 80075ce:	d020      	beq.n	8007612 <__multiply+0x132>
 80075d0:	4647      	mov	r7, r8
 80075d2:	46a4      	mov	ip, r4
 80075d4:	f04f 0a00 	mov.w	sl, #0
 80075d8:	6823      	ldr	r3, [r4, #0]
 80075da:	f8b7 b000 	ldrh.w	fp, [r7]
 80075de:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	fb09 220b 	mla	r2, r9, fp, r2
 80075e8:	4452      	add	r2, sl
 80075ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075ee:	f84c 3b04 	str.w	r3, [ip], #4
 80075f2:	f857 3b04 	ldr.w	r3, [r7], #4
 80075f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075fa:	f8bc 3000 	ldrh.w	r3, [ip]
 80075fe:	42bd      	cmp	r5, r7
 8007600:	fb09 330a 	mla	r3, r9, sl, r3
 8007604:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007608:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800760c:	d8e5      	bhi.n	80075da <__multiply+0xfa>
 800760e:	9a01      	ldr	r2, [sp, #4]
 8007610:	50a3      	str	r3, [r4, r2]
 8007612:	3404      	adds	r4, #4
 8007614:	e79f      	b.n	8007556 <__multiply+0x76>
 8007616:	3e01      	subs	r6, #1
 8007618:	e7a1      	b.n	800755e <__multiply+0x7e>
 800761a:	bf00      	nop
 800761c:	08008f2b 	.word	0x08008f2b
 8007620:	08008f3c 	.word	0x08008f3c

08007624 <__pow5mult>:
 8007624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007628:	4615      	mov	r5, r2
 800762a:	f012 0203 	ands.w	r2, r2, #3
 800762e:	4607      	mov	r7, r0
 8007630:	460e      	mov	r6, r1
 8007632:	d007      	beq.n	8007644 <__pow5mult+0x20>
 8007634:	4c25      	ldr	r4, [pc, #148]	@ (80076cc <__pow5mult+0xa8>)
 8007636:	3a01      	subs	r2, #1
 8007638:	2300      	movs	r3, #0
 800763a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800763e:	f7ff fea7 	bl	8007390 <__multadd>
 8007642:	4606      	mov	r6, r0
 8007644:	10ad      	asrs	r5, r5, #2
 8007646:	d03d      	beq.n	80076c4 <__pow5mult+0xa0>
 8007648:	69fc      	ldr	r4, [r7, #28]
 800764a:	b97c      	cbnz	r4, 800766c <__pow5mult+0x48>
 800764c:	2010      	movs	r0, #16
 800764e:	f7ff fd87 	bl	8007160 <malloc>
 8007652:	4602      	mov	r2, r0
 8007654:	61f8      	str	r0, [r7, #28]
 8007656:	b928      	cbnz	r0, 8007664 <__pow5mult+0x40>
 8007658:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800765c:	4b1c      	ldr	r3, [pc, #112]	@ (80076d0 <__pow5mult+0xac>)
 800765e:	481d      	ldr	r0, [pc, #116]	@ (80076d4 <__pow5mult+0xb0>)
 8007660:	f000 fbe6 	bl	8007e30 <__assert_func>
 8007664:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007668:	6004      	str	r4, [r0, #0]
 800766a:	60c4      	str	r4, [r0, #12]
 800766c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007670:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007674:	b94c      	cbnz	r4, 800768a <__pow5mult+0x66>
 8007676:	f240 2171 	movw	r1, #625	@ 0x271
 800767a:	4638      	mov	r0, r7
 800767c:	f7ff ff1a 	bl	80074b4 <__i2b>
 8007680:	2300      	movs	r3, #0
 8007682:	4604      	mov	r4, r0
 8007684:	f8c8 0008 	str.w	r0, [r8, #8]
 8007688:	6003      	str	r3, [r0, #0]
 800768a:	f04f 0900 	mov.w	r9, #0
 800768e:	07eb      	lsls	r3, r5, #31
 8007690:	d50a      	bpl.n	80076a8 <__pow5mult+0x84>
 8007692:	4631      	mov	r1, r6
 8007694:	4622      	mov	r2, r4
 8007696:	4638      	mov	r0, r7
 8007698:	f7ff ff22 	bl	80074e0 <__multiply>
 800769c:	4680      	mov	r8, r0
 800769e:	4631      	mov	r1, r6
 80076a0:	4638      	mov	r0, r7
 80076a2:	f7ff fe53 	bl	800734c <_Bfree>
 80076a6:	4646      	mov	r6, r8
 80076a8:	106d      	asrs	r5, r5, #1
 80076aa:	d00b      	beq.n	80076c4 <__pow5mult+0xa0>
 80076ac:	6820      	ldr	r0, [r4, #0]
 80076ae:	b938      	cbnz	r0, 80076c0 <__pow5mult+0x9c>
 80076b0:	4622      	mov	r2, r4
 80076b2:	4621      	mov	r1, r4
 80076b4:	4638      	mov	r0, r7
 80076b6:	f7ff ff13 	bl	80074e0 <__multiply>
 80076ba:	6020      	str	r0, [r4, #0]
 80076bc:	f8c0 9000 	str.w	r9, [r0]
 80076c0:	4604      	mov	r4, r0
 80076c2:	e7e4      	b.n	800768e <__pow5mult+0x6a>
 80076c4:	4630      	mov	r0, r6
 80076c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076ca:	bf00      	nop
 80076cc:	08008fec 	.word	0x08008fec
 80076d0:	08008ebc 	.word	0x08008ebc
 80076d4:	08008f3c 	.word	0x08008f3c

080076d8 <__lshift>:
 80076d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076dc:	460c      	mov	r4, r1
 80076de:	4607      	mov	r7, r0
 80076e0:	4691      	mov	r9, r2
 80076e2:	6923      	ldr	r3, [r4, #16]
 80076e4:	6849      	ldr	r1, [r1, #4]
 80076e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80076ea:	68a3      	ldr	r3, [r4, #8]
 80076ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076f0:	f108 0601 	add.w	r6, r8, #1
 80076f4:	42b3      	cmp	r3, r6
 80076f6:	db0b      	blt.n	8007710 <__lshift+0x38>
 80076f8:	4638      	mov	r0, r7
 80076fa:	f7ff fde7 	bl	80072cc <_Balloc>
 80076fe:	4605      	mov	r5, r0
 8007700:	b948      	cbnz	r0, 8007716 <__lshift+0x3e>
 8007702:	4602      	mov	r2, r0
 8007704:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007708:	4b27      	ldr	r3, [pc, #156]	@ (80077a8 <__lshift+0xd0>)
 800770a:	4828      	ldr	r0, [pc, #160]	@ (80077ac <__lshift+0xd4>)
 800770c:	f000 fb90 	bl	8007e30 <__assert_func>
 8007710:	3101      	adds	r1, #1
 8007712:	005b      	lsls	r3, r3, #1
 8007714:	e7ee      	b.n	80076f4 <__lshift+0x1c>
 8007716:	2300      	movs	r3, #0
 8007718:	f100 0114 	add.w	r1, r0, #20
 800771c:	f100 0210 	add.w	r2, r0, #16
 8007720:	4618      	mov	r0, r3
 8007722:	4553      	cmp	r3, sl
 8007724:	db33      	blt.n	800778e <__lshift+0xb6>
 8007726:	6920      	ldr	r0, [r4, #16]
 8007728:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800772c:	f104 0314 	add.w	r3, r4, #20
 8007730:	f019 091f 	ands.w	r9, r9, #31
 8007734:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007738:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800773c:	d02b      	beq.n	8007796 <__lshift+0xbe>
 800773e:	468a      	mov	sl, r1
 8007740:	2200      	movs	r2, #0
 8007742:	f1c9 0e20 	rsb	lr, r9, #32
 8007746:	6818      	ldr	r0, [r3, #0]
 8007748:	fa00 f009 	lsl.w	r0, r0, r9
 800774c:	4310      	orrs	r0, r2
 800774e:	f84a 0b04 	str.w	r0, [sl], #4
 8007752:	f853 2b04 	ldr.w	r2, [r3], #4
 8007756:	459c      	cmp	ip, r3
 8007758:	fa22 f20e 	lsr.w	r2, r2, lr
 800775c:	d8f3      	bhi.n	8007746 <__lshift+0x6e>
 800775e:	ebac 0304 	sub.w	r3, ip, r4
 8007762:	3b15      	subs	r3, #21
 8007764:	f023 0303 	bic.w	r3, r3, #3
 8007768:	3304      	adds	r3, #4
 800776a:	f104 0015 	add.w	r0, r4, #21
 800776e:	4560      	cmp	r0, ip
 8007770:	bf88      	it	hi
 8007772:	2304      	movhi	r3, #4
 8007774:	50ca      	str	r2, [r1, r3]
 8007776:	b10a      	cbz	r2, 800777c <__lshift+0xa4>
 8007778:	f108 0602 	add.w	r6, r8, #2
 800777c:	3e01      	subs	r6, #1
 800777e:	4638      	mov	r0, r7
 8007780:	4621      	mov	r1, r4
 8007782:	612e      	str	r6, [r5, #16]
 8007784:	f7ff fde2 	bl	800734c <_Bfree>
 8007788:	4628      	mov	r0, r5
 800778a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800778e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007792:	3301      	adds	r3, #1
 8007794:	e7c5      	b.n	8007722 <__lshift+0x4a>
 8007796:	3904      	subs	r1, #4
 8007798:	f853 2b04 	ldr.w	r2, [r3], #4
 800779c:	459c      	cmp	ip, r3
 800779e:	f841 2f04 	str.w	r2, [r1, #4]!
 80077a2:	d8f9      	bhi.n	8007798 <__lshift+0xc0>
 80077a4:	e7ea      	b.n	800777c <__lshift+0xa4>
 80077a6:	bf00      	nop
 80077a8:	08008f2b 	.word	0x08008f2b
 80077ac:	08008f3c 	.word	0x08008f3c

080077b0 <__mcmp>:
 80077b0:	4603      	mov	r3, r0
 80077b2:	690a      	ldr	r2, [r1, #16]
 80077b4:	6900      	ldr	r0, [r0, #16]
 80077b6:	b530      	push	{r4, r5, lr}
 80077b8:	1a80      	subs	r0, r0, r2
 80077ba:	d10e      	bne.n	80077da <__mcmp+0x2a>
 80077bc:	3314      	adds	r3, #20
 80077be:	3114      	adds	r1, #20
 80077c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80077c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80077c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80077cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80077d0:	4295      	cmp	r5, r2
 80077d2:	d003      	beq.n	80077dc <__mcmp+0x2c>
 80077d4:	d205      	bcs.n	80077e2 <__mcmp+0x32>
 80077d6:	f04f 30ff 	mov.w	r0, #4294967295
 80077da:	bd30      	pop	{r4, r5, pc}
 80077dc:	42a3      	cmp	r3, r4
 80077de:	d3f3      	bcc.n	80077c8 <__mcmp+0x18>
 80077e0:	e7fb      	b.n	80077da <__mcmp+0x2a>
 80077e2:	2001      	movs	r0, #1
 80077e4:	e7f9      	b.n	80077da <__mcmp+0x2a>
	...

080077e8 <__mdiff>:
 80077e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ec:	4689      	mov	r9, r1
 80077ee:	4606      	mov	r6, r0
 80077f0:	4611      	mov	r1, r2
 80077f2:	4648      	mov	r0, r9
 80077f4:	4614      	mov	r4, r2
 80077f6:	f7ff ffdb 	bl	80077b0 <__mcmp>
 80077fa:	1e05      	subs	r5, r0, #0
 80077fc:	d112      	bne.n	8007824 <__mdiff+0x3c>
 80077fe:	4629      	mov	r1, r5
 8007800:	4630      	mov	r0, r6
 8007802:	f7ff fd63 	bl	80072cc <_Balloc>
 8007806:	4602      	mov	r2, r0
 8007808:	b928      	cbnz	r0, 8007816 <__mdiff+0x2e>
 800780a:	f240 2137 	movw	r1, #567	@ 0x237
 800780e:	4b3e      	ldr	r3, [pc, #248]	@ (8007908 <__mdiff+0x120>)
 8007810:	483e      	ldr	r0, [pc, #248]	@ (800790c <__mdiff+0x124>)
 8007812:	f000 fb0d 	bl	8007e30 <__assert_func>
 8007816:	2301      	movs	r3, #1
 8007818:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800781c:	4610      	mov	r0, r2
 800781e:	b003      	add	sp, #12
 8007820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007824:	bfbc      	itt	lt
 8007826:	464b      	movlt	r3, r9
 8007828:	46a1      	movlt	r9, r4
 800782a:	4630      	mov	r0, r6
 800782c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007830:	bfba      	itte	lt
 8007832:	461c      	movlt	r4, r3
 8007834:	2501      	movlt	r5, #1
 8007836:	2500      	movge	r5, #0
 8007838:	f7ff fd48 	bl	80072cc <_Balloc>
 800783c:	4602      	mov	r2, r0
 800783e:	b918      	cbnz	r0, 8007848 <__mdiff+0x60>
 8007840:	f240 2145 	movw	r1, #581	@ 0x245
 8007844:	4b30      	ldr	r3, [pc, #192]	@ (8007908 <__mdiff+0x120>)
 8007846:	e7e3      	b.n	8007810 <__mdiff+0x28>
 8007848:	f100 0b14 	add.w	fp, r0, #20
 800784c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007850:	f109 0310 	add.w	r3, r9, #16
 8007854:	60c5      	str	r5, [r0, #12]
 8007856:	f04f 0c00 	mov.w	ip, #0
 800785a:	f109 0514 	add.w	r5, r9, #20
 800785e:	46d9      	mov	r9, fp
 8007860:	6926      	ldr	r6, [r4, #16]
 8007862:	f104 0e14 	add.w	lr, r4, #20
 8007866:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800786a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800786e:	9301      	str	r3, [sp, #4]
 8007870:	9b01      	ldr	r3, [sp, #4]
 8007872:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007876:	f853 af04 	ldr.w	sl, [r3, #4]!
 800787a:	b281      	uxth	r1, r0
 800787c:	9301      	str	r3, [sp, #4]
 800787e:	fa1f f38a 	uxth.w	r3, sl
 8007882:	1a5b      	subs	r3, r3, r1
 8007884:	0c00      	lsrs	r0, r0, #16
 8007886:	4463      	add	r3, ip
 8007888:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800788c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007890:	b29b      	uxth	r3, r3
 8007892:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007896:	4576      	cmp	r6, lr
 8007898:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800789c:	f849 3b04 	str.w	r3, [r9], #4
 80078a0:	d8e6      	bhi.n	8007870 <__mdiff+0x88>
 80078a2:	1b33      	subs	r3, r6, r4
 80078a4:	3b15      	subs	r3, #21
 80078a6:	f023 0303 	bic.w	r3, r3, #3
 80078aa:	3415      	adds	r4, #21
 80078ac:	3304      	adds	r3, #4
 80078ae:	42a6      	cmp	r6, r4
 80078b0:	bf38      	it	cc
 80078b2:	2304      	movcc	r3, #4
 80078b4:	441d      	add	r5, r3
 80078b6:	445b      	add	r3, fp
 80078b8:	461e      	mov	r6, r3
 80078ba:	462c      	mov	r4, r5
 80078bc:	4544      	cmp	r4, r8
 80078be:	d30e      	bcc.n	80078de <__mdiff+0xf6>
 80078c0:	f108 0103 	add.w	r1, r8, #3
 80078c4:	1b49      	subs	r1, r1, r5
 80078c6:	f021 0103 	bic.w	r1, r1, #3
 80078ca:	3d03      	subs	r5, #3
 80078cc:	45a8      	cmp	r8, r5
 80078ce:	bf38      	it	cc
 80078d0:	2100      	movcc	r1, #0
 80078d2:	440b      	add	r3, r1
 80078d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80078d8:	b199      	cbz	r1, 8007902 <__mdiff+0x11a>
 80078da:	6117      	str	r7, [r2, #16]
 80078dc:	e79e      	b.n	800781c <__mdiff+0x34>
 80078de:	46e6      	mov	lr, ip
 80078e0:	f854 1b04 	ldr.w	r1, [r4], #4
 80078e4:	fa1f fc81 	uxth.w	ip, r1
 80078e8:	44f4      	add	ip, lr
 80078ea:	0c08      	lsrs	r0, r1, #16
 80078ec:	4471      	add	r1, lr
 80078ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80078f2:	b289      	uxth	r1, r1
 80078f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80078f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80078fc:	f846 1b04 	str.w	r1, [r6], #4
 8007900:	e7dc      	b.n	80078bc <__mdiff+0xd4>
 8007902:	3f01      	subs	r7, #1
 8007904:	e7e6      	b.n	80078d4 <__mdiff+0xec>
 8007906:	bf00      	nop
 8007908:	08008f2b 	.word	0x08008f2b
 800790c:	08008f3c 	.word	0x08008f3c

08007910 <__d2b>:
 8007910:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007914:	2101      	movs	r1, #1
 8007916:	4690      	mov	r8, r2
 8007918:	4699      	mov	r9, r3
 800791a:	9e08      	ldr	r6, [sp, #32]
 800791c:	f7ff fcd6 	bl	80072cc <_Balloc>
 8007920:	4604      	mov	r4, r0
 8007922:	b930      	cbnz	r0, 8007932 <__d2b+0x22>
 8007924:	4602      	mov	r2, r0
 8007926:	f240 310f 	movw	r1, #783	@ 0x30f
 800792a:	4b23      	ldr	r3, [pc, #140]	@ (80079b8 <__d2b+0xa8>)
 800792c:	4823      	ldr	r0, [pc, #140]	@ (80079bc <__d2b+0xac>)
 800792e:	f000 fa7f 	bl	8007e30 <__assert_func>
 8007932:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007936:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800793a:	b10d      	cbz	r5, 8007940 <__d2b+0x30>
 800793c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007940:	9301      	str	r3, [sp, #4]
 8007942:	f1b8 0300 	subs.w	r3, r8, #0
 8007946:	d024      	beq.n	8007992 <__d2b+0x82>
 8007948:	4668      	mov	r0, sp
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	f7ff fd85 	bl	800745a <__lo0bits>
 8007950:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007954:	b1d8      	cbz	r0, 800798e <__d2b+0x7e>
 8007956:	f1c0 0320 	rsb	r3, r0, #32
 800795a:	fa02 f303 	lsl.w	r3, r2, r3
 800795e:	430b      	orrs	r3, r1
 8007960:	40c2      	lsrs	r2, r0
 8007962:	6163      	str	r3, [r4, #20]
 8007964:	9201      	str	r2, [sp, #4]
 8007966:	9b01      	ldr	r3, [sp, #4]
 8007968:	2b00      	cmp	r3, #0
 800796a:	bf0c      	ite	eq
 800796c:	2201      	moveq	r2, #1
 800796e:	2202      	movne	r2, #2
 8007970:	61a3      	str	r3, [r4, #24]
 8007972:	6122      	str	r2, [r4, #16]
 8007974:	b1ad      	cbz	r5, 80079a2 <__d2b+0x92>
 8007976:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800797a:	4405      	add	r5, r0
 800797c:	6035      	str	r5, [r6, #0]
 800797e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007984:	6018      	str	r0, [r3, #0]
 8007986:	4620      	mov	r0, r4
 8007988:	b002      	add	sp, #8
 800798a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800798e:	6161      	str	r1, [r4, #20]
 8007990:	e7e9      	b.n	8007966 <__d2b+0x56>
 8007992:	a801      	add	r0, sp, #4
 8007994:	f7ff fd61 	bl	800745a <__lo0bits>
 8007998:	9b01      	ldr	r3, [sp, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	6163      	str	r3, [r4, #20]
 800799e:	3020      	adds	r0, #32
 80079a0:	e7e7      	b.n	8007972 <__d2b+0x62>
 80079a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80079a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80079aa:	6030      	str	r0, [r6, #0]
 80079ac:	6918      	ldr	r0, [r3, #16]
 80079ae:	f7ff fd35 	bl	800741c <__hi0bits>
 80079b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80079b6:	e7e4      	b.n	8007982 <__d2b+0x72>
 80079b8:	08008f2b 	.word	0x08008f2b
 80079bc:	08008f3c 	.word	0x08008f3c

080079c0 <__ssputs_r>:
 80079c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079c4:	461f      	mov	r7, r3
 80079c6:	688e      	ldr	r6, [r1, #8]
 80079c8:	4682      	mov	sl, r0
 80079ca:	42be      	cmp	r6, r7
 80079cc:	460c      	mov	r4, r1
 80079ce:	4690      	mov	r8, r2
 80079d0:	680b      	ldr	r3, [r1, #0]
 80079d2:	d82d      	bhi.n	8007a30 <__ssputs_r+0x70>
 80079d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80079d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80079dc:	d026      	beq.n	8007a2c <__ssputs_r+0x6c>
 80079de:	6965      	ldr	r5, [r4, #20]
 80079e0:	6909      	ldr	r1, [r1, #16]
 80079e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079e6:	eba3 0901 	sub.w	r9, r3, r1
 80079ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079ee:	1c7b      	adds	r3, r7, #1
 80079f0:	444b      	add	r3, r9
 80079f2:	106d      	asrs	r5, r5, #1
 80079f4:	429d      	cmp	r5, r3
 80079f6:	bf38      	it	cc
 80079f8:	461d      	movcc	r5, r3
 80079fa:	0553      	lsls	r3, r2, #21
 80079fc:	d527      	bpl.n	8007a4e <__ssputs_r+0x8e>
 80079fe:	4629      	mov	r1, r5
 8007a00:	f7ff fbd8 	bl	80071b4 <_malloc_r>
 8007a04:	4606      	mov	r6, r0
 8007a06:	b360      	cbz	r0, 8007a62 <__ssputs_r+0xa2>
 8007a08:	464a      	mov	r2, r9
 8007a0a:	6921      	ldr	r1, [r4, #16]
 8007a0c:	f000 fa02 	bl	8007e14 <memcpy>
 8007a10:	89a3      	ldrh	r3, [r4, #12]
 8007a12:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007a16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a1a:	81a3      	strh	r3, [r4, #12]
 8007a1c:	6126      	str	r6, [r4, #16]
 8007a1e:	444e      	add	r6, r9
 8007a20:	6026      	str	r6, [r4, #0]
 8007a22:	463e      	mov	r6, r7
 8007a24:	6165      	str	r5, [r4, #20]
 8007a26:	eba5 0509 	sub.w	r5, r5, r9
 8007a2a:	60a5      	str	r5, [r4, #8]
 8007a2c:	42be      	cmp	r6, r7
 8007a2e:	d900      	bls.n	8007a32 <__ssputs_r+0x72>
 8007a30:	463e      	mov	r6, r7
 8007a32:	4632      	mov	r2, r6
 8007a34:	4641      	mov	r1, r8
 8007a36:	6820      	ldr	r0, [r4, #0]
 8007a38:	f000 f9c2 	bl	8007dc0 <memmove>
 8007a3c:	2000      	movs	r0, #0
 8007a3e:	68a3      	ldr	r3, [r4, #8]
 8007a40:	1b9b      	subs	r3, r3, r6
 8007a42:	60a3      	str	r3, [r4, #8]
 8007a44:	6823      	ldr	r3, [r4, #0]
 8007a46:	4433      	add	r3, r6
 8007a48:	6023      	str	r3, [r4, #0]
 8007a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a4e:	462a      	mov	r2, r5
 8007a50:	f000 fa32 	bl	8007eb8 <_realloc_r>
 8007a54:	4606      	mov	r6, r0
 8007a56:	2800      	cmp	r0, #0
 8007a58:	d1e0      	bne.n	8007a1c <__ssputs_r+0x5c>
 8007a5a:	4650      	mov	r0, sl
 8007a5c:	6921      	ldr	r1, [r4, #16]
 8007a5e:	f7ff fb37 	bl	80070d0 <_free_r>
 8007a62:	230c      	movs	r3, #12
 8007a64:	f8ca 3000 	str.w	r3, [sl]
 8007a68:	89a3      	ldrh	r3, [r4, #12]
 8007a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a72:	81a3      	strh	r3, [r4, #12]
 8007a74:	e7e9      	b.n	8007a4a <__ssputs_r+0x8a>
	...

08007a78 <_svfiprintf_r>:
 8007a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a7c:	4698      	mov	r8, r3
 8007a7e:	898b      	ldrh	r3, [r1, #12]
 8007a80:	4607      	mov	r7, r0
 8007a82:	061b      	lsls	r3, r3, #24
 8007a84:	460d      	mov	r5, r1
 8007a86:	4614      	mov	r4, r2
 8007a88:	b09d      	sub	sp, #116	@ 0x74
 8007a8a:	d510      	bpl.n	8007aae <_svfiprintf_r+0x36>
 8007a8c:	690b      	ldr	r3, [r1, #16]
 8007a8e:	b973      	cbnz	r3, 8007aae <_svfiprintf_r+0x36>
 8007a90:	2140      	movs	r1, #64	@ 0x40
 8007a92:	f7ff fb8f 	bl	80071b4 <_malloc_r>
 8007a96:	6028      	str	r0, [r5, #0]
 8007a98:	6128      	str	r0, [r5, #16]
 8007a9a:	b930      	cbnz	r0, 8007aaa <_svfiprintf_r+0x32>
 8007a9c:	230c      	movs	r3, #12
 8007a9e:	603b      	str	r3, [r7, #0]
 8007aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa4:	b01d      	add	sp, #116	@ 0x74
 8007aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aaa:	2340      	movs	r3, #64	@ 0x40
 8007aac:	616b      	str	r3, [r5, #20]
 8007aae:	2300      	movs	r3, #0
 8007ab0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ab2:	2320      	movs	r3, #32
 8007ab4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ab8:	2330      	movs	r3, #48	@ 0x30
 8007aba:	f04f 0901 	mov.w	r9, #1
 8007abe:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ac2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007c5c <_svfiprintf_r+0x1e4>
 8007ac6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007aca:	4623      	mov	r3, r4
 8007acc:	469a      	mov	sl, r3
 8007ace:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ad2:	b10a      	cbz	r2, 8007ad8 <_svfiprintf_r+0x60>
 8007ad4:	2a25      	cmp	r2, #37	@ 0x25
 8007ad6:	d1f9      	bne.n	8007acc <_svfiprintf_r+0x54>
 8007ad8:	ebba 0b04 	subs.w	fp, sl, r4
 8007adc:	d00b      	beq.n	8007af6 <_svfiprintf_r+0x7e>
 8007ade:	465b      	mov	r3, fp
 8007ae0:	4622      	mov	r2, r4
 8007ae2:	4629      	mov	r1, r5
 8007ae4:	4638      	mov	r0, r7
 8007ae6:	f7ff ff6b 	bl	80079c0 <__ssputs_r>
 8007aea:	3001      	adds	r0, #1
 8007aec:	f000 80a7 	beq.w	8007c3e <_svfiprintf_r+0x1c6>
 8007af0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007af2:	445a      	add	r2, fp
 8007af4:	9209      	str	r2, [sp, #36]	@ 0x24
 8007af6:	f89a 3000 	ldrb.w	r3, [sl]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f000 809f 	beq.w	8007c3e <_svfiprintf_r+0x1c6>
 8007b00:	2300      	movs	r3, #0
 8007b02:	f04f 32ff 	mov.w	r2, #4294967295
 8007b06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b0a:	f10a 0a01 	add.w	sl, sl, #1
 8007b0e:	9304      	str	r3, [sp, #16]
 8007b10:	9307      	str	r3, [sp, #28]
 8007b12:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b16:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b18:	4654      	mov	r4, sl
 8007b1a:	2205      	movs	r2, #5
 8007b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b20:	484e      	ldr	r0, [pc, #312]	@ (8007c5c <_svfiprintf_r+0x1e4>)
 8007b22:	f7fe fc68 	bl	80063f6 <memchr>
 8007b26:	9a04      	ldr	r2, [sp, #16]
 8007b28:	b9d8      	cbnz	r0, 8007b62 <_svfiprintf_r+0xea>
 8007b2a:	06d0      	lsls	r0, r2, #27
 8007b2c:	bf44      	itt	mi
 8007b2e:	2320      	movmi	r3, #32
 8007b30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b34:	0711      	lsls	r1, r2, #28
 8007b36:	bf44      	itt	mi
 8007b38:	232b      	movmi	r3, #43	@ 0x2b
 8007b3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b3e:	f89a 3000 	ldrb.w	r3, [sl]
 8007b42:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b44:	d015      	beq.n	8007b72 <_svfiprintf_r+0xfa>
 8007b46:	4654      	mov	r4, sl
 8007b48:	2000      	movs	r0, #0
 8007b4a:	f04f 0c0a 	mov.w	ip, #10
 8007b4e:	9a07      	ldr	r2, [sp, #28]
 8007b50:	4621      	mov	r1, r4
 8007b52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b56:	3b30      	subs	r3, #48	@ 0x30
 8007b58:	2b09      	cmp	r3, #9
 8007b5a:	d94b      	bls.n	8007bf4 <_svfiprintf_r+0x17c>
 8007b5c:	b1b0      	cbz	r0, 8007b8c <_svfiprintf_r+0x114>
 8007b5e:	9207      	str	r2, [sp, #28]
 8007b60:	e014      	b.n	8007b8c <_svfiprintf_r+0x114>
 8007b62:	eba0 0308 	sub.w	r3, r0, r8
 8007b66:	fa09 f303 	lsl.w	r3, r9, r3
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	46a2      	mov	sl, r4
 8007b6e:	9304      	str	r3, [sp, #16]
 8007b70:	e7d2      	b.n	8007b18 <_svfiprintf_r+0xa0>
 8007b72:	9b03      	ldr	r3, [sp, #12]
 8007b74:	1d19      	adds	r1, r3, #4
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	9103      	str	r1, [sp, #12]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	bfbb      	ittet	lt
 8007b7e:	425b      	neglt	r3, r3
 8007b80:	f042 0202 	orrlt.w	r2, r2, #2
 8007b84:	9307      	strge	r3, [sp, #28]
 8007b86:	9307      	strlt	r3, [sp, #28]
 8007b88:	bfb8      	it	lt
 8007b8a:	9204      	strlt	r2, [sp, #16]
 8007b8c:	7823      	ldrb	r3, [r4, #0]
 8007b8e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b90:	d10a      	bne.n	8007ba8 <_svfiprintf_r+0x130>
 8007b92:	7863      	ldrb	r3, [r4, #1]
 8007b94:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b96:	d132      	bne.n	8007bfe <_svfiprintf_r+0x186>
 8007b98:	9b03      	ldr	r3, [sp, #12]
 8007b9a:	3402      	adds	r4, #2
 8007b9c:	1d1a      	adds	r2, r3, #4
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	9203      	str	r2, [sp, #12]
 8007ba2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ba6:	9305      	str	r3, [sp, #20]
 8007ba8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007c60 <_svfiprintf_r+0x1e8>
 8007bac:	2203      	movs	r2, #3
 8007bae:	4650      	mov	r0, sl
 8007bb0:	7821      	ldrb	r1, [r4, #0]
 8007bb2:	f7fe fc20 	bl	80063f6 <memchr>
 8007bb6:	b138      	cbz	r0, 8007bc8 <_svfiprintf_r+0x150>
 8007bb8:	2240      	movs	r2, #64	@ 0x40
 8007bba:	9b04      	ldr	r3, [sp, #16]
 8007bbc:	eba0 000a 	sub.w	r0, r0, sl
 8007bc0:	4082      	lsls	r2, r0
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	3401      	adds	r4, #1
 8007bc6:	9304      	str	r3, [sp, #16]
 8007bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bcc:	2206      	movs	r2, #6
 8007bce:	4825      	ldr	r0, [pc, #148]	@ (8007c64 <_svfiprintf_r+0x1ec>)
 8007bd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007bd4:	f7fe fc0f 	bl	80063f6 <memchr>
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	d036      	beq.n	8007c4a <_svfiprintf_r+0x1d2>
 8007bdc:	4b22      	ldr	r3, [pc, #136]	@ (8007c68 <_svfiprintf_r+0x1f0>)
 8007bde:	bb1b      	cbnz	r3, 8007c28 <_svfiprintf_r+0x1b0>
 8007be0:	9b03      	ldr	r3, [sp, #12]
 8007be2:	3307      	adds	r3, #7
 8007be4:	f023 0307 	bic.w	r3, r3, #7
 8007be8:	3308      	adds	r3, #8
 8007bea:	9303      	str	r3, [sp, #12]
 8007bec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bee:	4433      	add	r3, r6
 8007bf0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bf2:	e76a      	b.n	8007aca <_svfiprintf_r+0x52>
 8007bf4:	460c      	mov	r4, r1
 8007bf6:	2001      	movs	r0, #1
 8007bf8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bfc:	e7a8      	b.n	8007b50 <_svfiprintf_r+0xd8>
 8007bfe:	2300      	movs	r3, #0
 8007c00:	f04f 0c0a 	mov.w	ip, #10
 8007c04:	4619      	mov	r1, r3
 8007c06:	3401      	adds	r4, #1
 8007c08:	9305      	str	r3, [sp, #20]
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c10:	3a30      	subs	r2, #48	@ 0x30
 8007c12:	2a09      	cmp	r2, #9
 8007c14:	d903      	bls.n	8007c1e <_svfiprintf_r+0x1a6>
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d0c6      	beq.n	8007ba8 <_svfiprintf_r+0x130>
 8007c1a:	9105      	str	r1, [sp, #20]
 8007c1c:	e7c4      	b.n	8007ba8 <_svfiprintf_r+0x130>
 8007c1e:	4604      	mov	r4, r0
 8007c20:	2301      	movs	r3, #1
 8007c22:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c26:	e7f0      	b.n	8007c0a <_svfiprintf_r+0x192>
 8007c28:	ab03      	add	r3, sp, #12
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	462a      	mov	r2, r5
 8007c2e:	4638      	mov	r0, r7
 8007c30:	4b0e      	ldr	r3, [pc, #56]	@ (8007c6c <_svfiprintf_r+0x1f4>)
 8007c32:	a904      	add	r1, sp, #16
 8007c34:	f7fd fe6a 	bl	800590c <_printf_float>
 8007c38:	1c42      	adds	r2, r0, #1
 8007c3a:	4606      	mov	r6, r0
 8007c3c:	d1d6      	bne.n	8007bec <_svfiprintf_r+0x174>
 8007c3e:	89ab      	ldrh	r3, [r5, #12]
 8007c40:	065b      	lsls	r3, r3, #25
 8007c42:	f53f af2d 	bmi.w	8007aa0 <_svfiprintf_r+0x28>
 8007c46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c48:	e72c      	b.n	8007aa4 <_svfiprintf_r+0x2c>
 8007c4a:	ab03      	add	r3, sp, #12
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	462a      	mov	r2, r5
 8007c50:	4638      	mov	r0, r7
 8007c52:	4b06      	ldr	r3, [pc, #24]	@ (8007c6c <_svfiprintf_r+0x1f4>)
 8007c54:	a904      	add	r1, sp, #16
 8007c56:	f7fe f8f7 	bl	8005e48 <_printf_i>
 8007c5a:	e7ed      	b.n	8007c38 <_svfiprintf_r+0x1c0>
 8007c5c:	08008f95 	.word	0x08008f95
 8007c60:	08008f9b 	.word	0x08008f9b
 8007c64:	08008f9f 	.word	0x08008f9f
 8007c68:	0800590d 	.word	0x0800590d
 8007c6c:	080079c1 	.word	0x080079c1

08007c70 <__sflush_r>:
 8007c70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c76:	0716      	lsls	r6, r2, #28
 8007c78:	4605      	mov	r5, r0
 8007c7a:	460c      	mov	r4, r1
 8007c7c:	d454      	bmi.n	8007d28 <__sflush_r+0xb8>
 8007c7e:	684b      	ldr	r3, [r1, #4]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	dc02      	bgt.n	8007c8a <__sflush_r+0x1a>
 8007c84:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	dd48      	ble.n	8007d1c <__sflush_r+0xac>
 8007c8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c8c:	2e00      	cmp	r6, #0
 8007c8e:	d045      	beq.n	8007d1c <__sflush_r+0xac>
 8007c90:	2300      	movs	r3, #0
 8007c92:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007c96:	682f      	ldr	r7, [r5, #0]
 8007c98:	6a21      	ldr	r1, [r4, #32]
 8007c9a:	602b      	str	r3, [r5, #0]
 8007c9c:	d030      	beq.n	8007d00 <__sflush_r+0x90>
 8007c9e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007ca0:	89a3      	ldrh	r3, [r4, #12]
 8007ca2:	0759      	lsls	r1, r3, #29
 8007ca4:	d505      	bpl.n	8007cb2 <__sflush_r+0x42>
 8007ca6:	6863      	ldr	r3, [r4, #4]
 8007ca8:	1ad2      	subs	r2, r2, r3
 8007caa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007cac:	b10b      	cbz	r3, 8007cb2 <__sflush_r+0x42>
 8007cae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007cb0:	1ad2      	subs	r2, r2, r3
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	4628      	mov	r0, r5
 8007cb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007cb8:	6a21      	ldr	r1, [r4, #32]
 8007cba:	47b0      	blx	r6
 8007cbc:	1c43      	adds	r3, r0, #1
 8007cbe:	89a3      	ldrh	r3, [r4, #12]
 8007cc0:	d106      	bne.n	8007cd0 <__sflush_r+0x60>
 8007cc2:	6829      	ldr	r1, [r5, #0]
 8007cc4:	291d      	cmp	r1, #29
 8007cc6:	d82b      	bhi.n	8007d20 <__sflush_r+0xb0>
 8007cc8:	4a28      	ldr	r2, [pc, #160]	@ (8007d6c <__sflush_r+0xfc>)
 8007cca:	40ca      	lsrs	r2, r1
 8007ccc:	07d6      	lsls	r6, r2, #31
 8007cce:	d527      	bpl.n	8007d20 <__sflush_r+0xb0>
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	6062      	str	r2, [r4, #4]
 8007cd4:	6922      	ldr	r2, [r4, #16]
 8007cd6:	04d9      	lsls	r1, r3, #19
 8007cd8:	6022      	str	r2, [r4, #0]
 8007cda:	d504      	bpl.n	8007ce6 <__sflush_r+0x76>
 8007cdc:	1c42      	adds	r2, r0, #1
 8007cde:	d101      	bne.n	8007ce4 <__sflush_r+0x74>
 8007ce0:	682b      	ldr	r3, [r5, #0]
 8007ce2:	b903      	cbnz	r3, 8007ce6 <__sflush_r+0x76>
 8007ce4:	6560      	str	r0, [r4, #84]	@ 0x54
 8007ce6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ce8:	602f      	str	r7, [r5, #0]
 8007cea:	b1b9      	cbz	r1, 8007d1c <__sflush_r+0xac>
 8007cec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007cf0:	4299      	cmp	r1, r3
 8007cf2:	d002      	beq.n	8007cfa <__sflush_r+0x8a>
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	f7ff f9eb 	bl	80070d0 <_free_r>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cfe:	e00d      	b.n	8007d1c <__sflush_r+0xac>
 8007d00:	2301      	movs	r3, #1
 8007d02:	4628      	mov	r0, r5
 8007d04:	47b0      	blx	r6
 8007d06:	4602      	mov	r2, r0
 8007d08:	1c50      	adds	r0, r2, #1
 8007d0a:	d1c9      	bne.n	8007ca0 <__sflush_r+0x30>
 8007d0c:	682b      	ldr	r3, [r5, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d0c6      	beq.n	8007ca0 <__sflush_r+0x30>
 8007d12:	2b1d      	cmp	r3, #29
 8007d14:	d001      	beq.n	8007d1a <__sflush_r+0xaa>
 8007d16:	2b16      	cmp	r3, #22
 8007d18:	d11d      	bne.n	8007d56 <__sflush_r+0xe6>
 8007d1a:	602f      	str	r7, [r5, #0]
 8007d1c:	2000      	movs	r0, #0
 8007d1e:	e021      	b.n	8007d64 <__sflush_r+0xf4>
 8007d20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d24:	b21b      	sxth	r3, r3
 8007d26:	e01a      	b.n	8007d5e <__sflush_r+0xee>
 8007d28:	690f      	ldr	r7, [r1, #16]
 8007d2a:	2f00      	cmp	r7, #0
 8007d2c:	d0f6      	beq.n	8007d1c <__sflush_r+0xac>
 8007d2e:	0793      	lsls	r3, r2, #30
 8007d30:	bf18      	it	ne
 8007d32:	2300      	movne	r3, #0
 8007d34:	680e      	ldr	r6, [r1, #0]
 8007d36:	bf08      	it	eq
 8007d38:	694b      	ldreq	r3, [r1, #20]
 8007d3a:	1bf6      	subs	r6, r6, r7
 8007d3c:	600f      	str	r7, [r1, #0]
 8007d3e:	608b      	str	r3, [r1, #8]
 8007d40:	2e00      	cmp	r6, #0
 8007d42:	ddeb      	ble.n	8007d1c <__sflush_r+0xac>
 8007d44:	4633      	mov	r3, r6
 8007d46:	463a      	mov	r2, r7
 8007d48:	4628      	mov	r0, r5
 8007d4a:	6a21      	ldr	r1, [r4, #32]
 8007d4c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007d50:	47e0      	blx	ip
 8007d52:	2800      	cmp	r0, #0
 8007d54:	dc07      	bgt.n	8007d66 <__sflush_r+0xf6>
 8007d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d62:	81a3      	strh	r3, [r4, #12]
 8007d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d66:	4407      	add	r7, r0
 8007d68:	1a36      	subs	r6, r6, r0
 8007d6a:	e7e9      	b.n	8007d40 <__sflush_r+0xd0>
 8007d6c:	20400001 	.word	0x20400001

08007d70 <_fflush_r>:
 8007d70:	b538      	push	{r3, r4, r5, lr}
 8007d72:	690b      	ldr	r3, [r1, #16]
 8007d74:	4605      	mov	r5, r0
 8007d76:	460c      	mov	r4, r1
 8007d78:	b913      	cbnz	r3, 8007d80 <_fflush_r+0x10>
 8007d7a:	2500      	movs	r5, #0
 8007d7c:	4628      	mov	r0, r5
 8007d7e:	bd38      	pop	{r3, r4, r5, pc}
 8007d80:	b118      	cbz	r0, 8007d8a <_fflush_r+0x1a>
 8007d82:	6a03      	ldr	r3, [r0, #32]
 8007d84:	b90b      	cbnz	r3, 8007d8a <_fflush_r+0x1a>
 8007d86:	f7fe fa09 	bl	800619c <__sinit>
 8007d8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d0f3      	beq.n	8007d7a <_fflush_r+0xa>
 8007d92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007d94:	07d0      	lsls	r0, r2, #31
 8007d96:	d404      	bmi.n	8007da2 <_fflush_r+0x32>
 8007d98:	0599      	lsls	r1, r3, #22
 8007d9a:	d402      	bmi.n	8007da2 <_fflush_r+0x32>
 8007d9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d9e:	f7fe fb28 	bl	80063f2 <__retarget_lock_acquire_recursive>
 8007da2:	4628      	mov	r0, r5
 8007da4:	4621      	mov	r1, r4
 8007da6:	f7ff ff63 	bl	8007c70 <__sflush_r>
 8007daa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007dac:	4605      	mov	r5, r0
 8007dae:	07da      	lsls	r2, r3, #31
 8007db0:	d4e4      	bmi.n	8007d7c <_fflush_r+0xc>
 8007db2:	89a3      	ldrh	r3, [r4, #12]
 8007db4:	059b      	lsls	r3, r3, #22
 8007db6:	d4e1      	bmi.n	8007d7c <_fflush_r+0xc>
 8007db8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007dba:	f7fe fb1b 	bl	80063f4 <__retarget_lock_release_recursive>
 8007dbe:	e7dd      	b.n	8007d7c <_fflush_r+0xc>

08007dc0 <memmove>:
 8007dc0:	4288      	cmp	r0, r1
 8007dc2:	b510      	push	{r4, lr}
 8007dc4:	eb01 0402 	add.w	r4, r1, r2
 8007dc8:	d902      	bls.n	8007dd0 <memmove+0x10>
 8007dca:	4284      	cmp	r4, r0
 8007dcc:	4623      	mov	r3, r4
 8007dce:	d807      	bhi.n	8007de0 <memmove+0x20>
 8007dd0:	1e43      	subs	r3, r0, #1
 8007dd2:	42a1      	cmp	r1, r4
 8007dd4:	d008      	beq.n	8007de8 <memmove+0x28>
 8007dd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007dde:	e7f8      	b.n	8007dd2 <memmove+0x12>
 8007de0:	4601      	mov	r1, r0
 8007de2:	4402      	add	r2, r0
 8007de4:	428a      	cmp	r2, r1
 8007de6:	d100      	bne.n	8007dea <memmove+0x2a>
 8007de8:	bd10      	pop	{r4, pc}
 8007dea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007dee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007df2:	e7f7      	b.n	8007de4 <memmove+0x24>

08007df4 <_sbrk_r>:
 8007df4:	b538      	push	{r3, r4, r5, lr}
 8007df6:	2300      	movs	r3, #0
 8007df8:	4d05      	ldr	r5, [pc, #20]	@ (8007e10 <_sbrk_r+0x1c>)
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	4608      	mov	r0, r1
 8007dfe:	602b      	str	r3, [r5, #0]
 8007e00:	f7fa f84e 	bl	8001ea0 <_sbrk>
 8007e04:	1c43      	adds	r3, r0, #1
 8007e06:	d102      	bne.n	8007e0e <_sbrk_r+0x1a>
 8007e08:	682b      	ldr	r3, [r5, #0]
 8007e0a:	b103      	cbz	r3, 8007e0e <_sbrk_r+0x1a>
 8007e0c:	6023      	str	r3, [r4, #0]
 8007e0e:	bd38      	pop	{r3, r4, r5, pc}
 8007e10:	20000898 	.word	0x20000898

08007e14 <memcpy>:
 8007e14:	440a      	add	r2, r1
 8007e16:	4291      	cmp	r1, r2
 8007e18:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e1c:	d100      	bne.n	8007e20 <memcpy+0xc>
 8007e1e:	4770      	bx	lr
 8007e20:	b510      	push	{r4, lr}
 8007e22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e26:	4291      	cmp	r1, r2
 8007e28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e2c:	d1f9      	bne.n	8007e22 <memcpy+0xe>
 8007e2e:	bd10      	pop	{r4, pc}

08007e30 <__assert_func>:
 8007e30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e32:	4614      	mov	r4, r2
 8007e34:	461a      	mov	r2, r3
 8007e36:	4b09      	ldr	r3, [pc, #36]	@ (8007e5c <__assert_func+0x2c>)
 8007e38:	4605      	mov	r5, r0
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	68d8      	ldr	r0, [r3, #12]
 8007e3e:	b14c      	cbz	r4, 8007e54 <__assert_func+0x24>
 8007e40:	4b07      	ldr	r3, [pc, #28]	@ (8007e60 <__assert_func+0x30>)
 8007e42:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e46:	9100      	str	r1, [sp, #0]
 8007e48:	462b      	mov	r3, r5
 8007e4a:	4906      	ldr	r1, [pc, #24]	@ (8007e64 <__assert_func+0x34>)
 8007e4c:	f000 f870 	bl	8007f30 <fiprintf>
 8007e50:	f000 f880 	bl	8007f54 <abort>
 8007e54:	4b04      	ldr	r3, [pc, #16]	@ (8007e68 <__assert_func+0x38>)
 8007e56:	461c      	mov	r4, r3
 8007e58:	e7f3      	b.n	8007e42 <__assert_func+0x12>
 8007e5a:	bf00      	nop
 8007e5c:	20000028 	.word	0x20000028
 8007e60:	08008fb0 	.word	0x08008fb0
 8007e64:	08008fbd 	.word	0x08008fbd
 8007e68:	08008feb 	.word	0x08008feb

08007e6c <_calloc_r>:
 8007e6c:	b570      	push	{r4, r5, r6, lr}
 8007e6e:	fba1 5402 	umull	r5, r4, r1, r2
 8007e72:	b934      	cbnz	r4, 8007e82 <_calloc_r+0x16>
 8007e74:	4629      	mov	r1, r5
 8007e76:	f7ff f99d 	bl	80071b4 <_malloc_r>
 8007e7a:	4606      	mov	r6, r0
 8007e7c:	b928      	cbnz	r0, 8007e8a <_calloc_r+0x1e>
 8007e7e:	4630      	mov	r0, r6
 8007e80:	bd70      	pop	{r4, r5, r6, pc}
 8007e82:	220c      	movs	r2, #12
 8007e84:	2600      	movs	r6, #0
 8007e86:	6002      	str	r2, [r0, #0]
 8007e88:	e7f9      	b.n	8007e7e <_calloc_r+0x12>
 8007e8a:	462a      	mov	r2, r5
 8007e8c:	4621      	mov	r1, r4
 8007e8e:	f7fe fa20 	bl	80062d2 <memset>
 8007e92:	e7f4      	b.n	8007e7e <_calloc_r+0x12>

08007e94 <__ascii_mbtowc>:
 8007e94:	b082      	sub	sp, #8
 8007e96:	b901      	cbnz	r1, 8007e9a <__ascii_mbtowc+0x6>
 8007e98:	a901      	add	r1, sp, #4
 8007e9a:	b142      	cbz	r2, 8007eae <__ascii_mbtowc+0x1a>
 8007e9c:	b14b      	cbz	r3, 8007eb2 <__ascii_mbtowc+0x1e>
 8007e9e:	7813      	ldrb	r3, [r2, #0]
 8007ea0:	600b      	str	r3, [r1, #0]
 8007ea2:	7812      	ldrb	r2, [r2, #0]
 8007ea4:	1e10      	subs	r0, r2, #0
 8007ea6:	bf18      	it	ne
 8007ea8:	2001      	movne	r0, #1
 8007eaa:	b002      	add	sp, #8
 8007eac:	4770      	bx	lr
 8007eae:	4610      	mov	r0, r2
 8007eb0:	e7fb      	b.n	8007eaa <__ascii_mbtowc+0x16>
 8007eb2:	f06f 0001 	mvn.w	r0, #1
 8007eb6:	e7f8      	b.n	8007eaa <__ascii_mbtowc+0x16>

08007eb8 <_realloc_r>:
 8007eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ebc:	4607      	mov	r7, r0
 8007ebe:	4614      	mov	r4, r2
 8007ec0:	460d      	mov	r5, r1
 8007ec2:	b921      	cbnz	r1, 8007ece <_realloc_r+0x16>
 8007ec4:	4611      	mov	r1, r2
 8007ec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007eca:	f7ff b973 	b.w	80071b4 <_malloc_r>
 8007ece:	b92a      	cbnz	r2, 8007edc <_realloc_r+0x24>
 8007ed0:	f7ff f8fe 	bl	80070d0 <_free_r>
 8007ed4:	4625      	mov	r5, r4
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007edc:	f000 f841 	bl	8007f62 <_malloc_usable_size_r>
 8007ee0:	4284      	cmp	r4, r0
 8007ee2:	4606      	mov	r6, r0
 8007ee4:	d802      	bhi.n	8007eec <_realloc_r+0x34>
 8007ee6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007eea:	d8f4      	bhi.n	8007ed6 <_realloc_r+0x1e>
 8007eec:	4621      	mov	r1, r4
 8007eee:	4638      	mov	r0, r7
 8007ef0:	f7ff f960 	bl	80071b4 <_malloc_r>
 8007ef4:	4680      	mov	r8, r0
 8007ef6:	b908      	cbnz	r0, 8007efc <_realloc_r+0x44>
 8007ef8:	4645      	mov	r5, r8
 8007efa:	e7ec      	b.n	8007ed6 <_realloc_r+0x1e>
 8007efc:	42b4      	cmp	r4, r6
 8007efe:	4622      	mov	r2, r4
 8007f00:	4629      	mov	r1, r5
 8007f02:	bf28      	it	cs
 8007f04:	4632      	movcs	r2, r6
 8007f06:	f7ff ff85 	bl	8007e14 <memcpy>
 8007f0a:	4629      	mov	r1, r5
 8007f0c:	4638      	mov	r0, r7
 8007f0e:	f7ff f8df 	bl	80070d0 <_free_r>
 8007f12:	e7f1      	b.n	8007ef8 <_realloc_r+0x40>

08007f14 <__ascii_wctomb>:
 8007f14:	4603      	mov	r3, r0
 8007f16:	4608      	mov	r0, r1
 8007f18:	b141      	cbz	r1, 8007f2c <__ascii_wctomb+0x18>
 8007f1a:	2aff      	cmp	r2, #255	@ 0xff
 8007f1c:	d904      	bls.n	8007f28 <__ascii_wctomb+0x14>
 8007f1e:	228a      	movs	r2, #138	@ 0x8a
 8007f20:	f04f 30ff 	mov.w	r0, #4294967295
 8007f24:	601a      	str	r2, [r3, #0]
 8007f26:	4770      	bx	lr
 8007f28:	2001      	movs	r0, #1
 8007f2a:	700a      	strb	r2, [r1, #0]
 8007f2c:	4770      	bx	lr
	...

08007f30 <fiprintf>:
 8007f30:	b40e      	push	{r1, r2, r3}
 8007f32:	b503      	push	{r0, r1, lr}
 8007f34:	4601      	mov	r1, r0
 8007f36:	ab03      	add	r3, sp, #12
 8007f38:	4805      	ldr	r0, [pc, #20]	@ (8007f50 <fiprintf+0x20>)
 8007f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f3e:	6800      	ldr	r0, [r0, #0]
 8007f40:	9301      	str	r3, [sp, #4]
 8007f42:	f000 f83d 	bl	8007fc0 <_vfiprintf_r>
 8007f46:	b002      	add	sp, #8
 8007f48:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f4c:	b003      	add	sp, #12
 8007f4e:	4770      	bx	lr
 8007f50:	20000028 	.word	0x20000028

08007f54 <abort>:
 8007f54:	2006      	movs	r0, #6
 8007f56:	b508      	push	{r3, lr}
 8007f58:	f000 fa06 	bl	8008368 <raise>
 8007f5c:	2001      	movs	r0, #1
 8007f5e:	f7f9 ff2a 	bl	8001db6 <_exit>

08007f62 <_malloc_usable_size_r>:
 8007f62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f66:	1f18      	subs	r0, r3, #4
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	bfbc      	itt	lt
 8007f6c:	580b      	ldrlt	r3, [r1, r0]
 8007f6e:	18c0      	addlt	r0, r0, r3
 8007f70:	4770      	bx	lr

08007f72 <__sfputc_r>:
 8007f72:	6893      	ldr	r3, [r2, #8]
 8007f74:	b410      	push	{r4}
 8007f76:	3b01      	subs	r3, #1
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	6093      	str	r3, [r2, #8]
 8007f7c:	da07      	bge.n	8007f8e <__sfputc_r+0x1c>
 8007f7e:	6994      	ldr	r4, [r2, #24]
 8007f80:	42a3      	cmp	r3, r4
 8007f82:	db01      	blt.n	8007f88 <__sfputc_r+0x16>
 8007f84:	290a      	cmp	r1, #10
 8007f86:	d102      	bne.n	8007f8e <__sfputc_r+0x1c>
 8007f88:	bc10      	pop	{r4}
 8007f8a:	f000 b931 	b.w	80081f0 <__swbuf_r>
 8007f8e:	6813      	ldr	r3, [r2, #0]
 8007f90:	1c58      	adds	r0, r3, #1
 8007f92:	6010      	str	r0, [r2, #0]
 8007f94:	7019      	strb	r1, [r3, #0]
 8007f96:	4608      	mov	r0, r1
 8007f98:	bc10      	pop	{r4}
 8007f9a:	4770      	bx	lr

08007f9c <__sfputs_r>:
 8007f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9e:	4606      	mov	r6, r0
 8007fa0:	460f      	mov	r7, r1
 8007fa2:	4614      	mov	r4, r2
 8007fa4:	18d5      	adds	r5, r2, r3
 8007fa6:	42ac      	cmp	r4, r5
 8007fa8:	d101      	bne.n	8007fae <__sfputs_r+0x12>
 8007faa:	2000      	movs	r0, #0
 8007fac:	e007      	b.n	8007fbe <__sfputs_r+0x22>
 8007fae:	463a      	mov	r2, r7
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fb6:	f7ff ffdc 	bl	8007f72 <__sfputc_r>
 8007fba:	1c43      	adds	r3, r0, #1
 8007fbc:	d1f3      	bne.n	8007fa6 <__sfputs_r+0xa>
 8007fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007fc0 <_vfiprintf_r>:
 8007fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc4:	460d      	mov	r5, r1
 8007fc6:	4614      	mov	r4, r2
 8007fc8:	4698      	mov	r8, r3
 8007fca:	4606      	mov	r6, r0
 8007fcc:	b09d      	sub	sp, #116	@ 0x74
 8007fce:	b118      	cbz	r0, 8007fd8 <_vfiprintf_r+0x18>
 8007fd0:	6a03      	ldr	r3, [r0, #32]
 8007fd2:	b90b      	cbnz	r3, 8007fd8 <_vfiprintf_r+0x18>
 8007fd4:	f7fe f8e2 	bl	800619c <__sinit>
 8007fd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fda:	07d9      	lsls	r1, r3, #31
 8007fdc:	d405      	bmi.n	8007fea <_vfiprintf_r+0x2a>
 8007fde:	89ab      	ldrh	r3, [r5, #12]
 8007fe0:	059a      	lsls	r2, r3, #22
 8007fe2:	d402      	bmi.n	8007fea <_vfiprintf_r+0x2a>
 8007fe4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fe6:	f7fe fa04 	bl	80063f2 <__retarget_lock_acquire_recursive>
 8007fea:	89ab      	ldrh	r3, [r5, #12]
 8007fec:	071b      	lsls	r3, r3, #28
 8007fee:	d501      	bpl.n	8007ff4 <_vfiprintf_r+0x34>
 8007ff0:	692b      	ldr	r3, [r5, #16]
 8007ff2:	b99b      	cbnz	r3, 800801c <_vfiprintf_r+0x5c>
 8007ff4:	4629      	mov	r1, r5
 8007ff6:	4630      	mov	r0, r6
 8007ff8:	f000 f938 	bl	800826c <__swsetup_r>
 8007ffc:	b170      	cbz	r0, 800801c <_vfiprintf_r+0x5c>
 8007ffe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008000:	07dc      	lsls	r4, r3, #31
 8008002:	d504      	bpl.n	800800e <_vfiprintf_r+0x4e>
 8008004:	f04f 30ff 	mov.w	r0, #4294967295
 8008008:	b01d      	add	sp, #116	@ 0x74
 800800a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800800e:	89ab      	ldrh	r3, [r5, #12]
 8008010:	0598      	lsls	r0, r3, #22
 8008012:	d4f7      	bmi.n	8008004 <_vfiprintf_r+0x44>
 8008014:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008016:	f7fe f9ed 	bl	80063f4 <__retarget_lock_release_recursive>
 800801a:	e7f3      	b.n	8008004 <_vfiprintf_r+0x44>
 800801c:	2300      	movs	r3, #0
 800801e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008020:	2320      	movs	r3, #32
 8008022:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008026:	2330      	movs	r3, #48	@ 0x30
 8008028:	f04f 0901 	mov.w	r9, #1
 800802c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008030:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80081dc <_vfiprintf_r+0x21c>
 8008034:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008038:	4623      	mov	r3, r4
 800803a:	469a      	mov	sl, r3
 800803c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008040:	b10a      	cbz	r2, 8008046 <_vfiprintf_r+0x86>
 8008042:	2a25      	cmp	r2, #37	@ 0x25
 8008044:	d1f9      	bne.n	800803a <_vfiprintf_r+0x7a>
 8008046:	ebba 0b04 	subs.w	fp, sl, r4
 800804a:	d00b      	beq.n	8008064 <_vfiprintf_r+0xa4>
 800804c:	465b      	mov	r3, fp
 800804e:	4622      	mov	r2, r4
 8008050:	4629      	mov	r1, r5
 8008052:	4630      	mov	r0, r6
 8008054:	f7ff ffa2 	bl	8007f9c <__sfputs_r>
 8008058:	3001      	adds	r0, #1
 800805a:	f000 80a7 	beq.w	80081ac <_vfiprintf_r+0x1ec>
 800805e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008060:	445a      	add	r2, fp
 8008062:	9209      	str	r2, [sp, #36]	@ 0x24
 8008064:	f89a 3000 	ldrb.w	r3, [sl]
 8008068:	2b00      	cmp	r3, #0
 800806a:	f000 809f 	beq.w	80081ac <_vfiprintf_r+0x1ec>
 800806e:	2300      	movs	r3, #0
 8008070:	f04f 32ff 	mov.w	r2, #4294967295
 8008074:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008078:	f10a 0a01 	add.w	sl, sl, #1
 800807c:	9304      	str	r3, [sp, #16]
 800807e:	9307      	str	r3, [sp, #28]
 8008080:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008084:	931a      	str	r3, [sp, #104]	@ 0x68
 8008086:	4654      	mov	r4, sl
 8008088:	2205      	movs	r2, #5
 800808a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800808e:	4853      	ldr	r0, [pc, #332]	@ (80081dc <_vfiprintf_r+0x21c>)
 8008090:	f7fe f9b1 	bl	80063f6 <memchr>
 8008094:	9a04      	ldr	r2, [sp, #16]
 8008096:	b9d8      	cbnz	r0, 80080d0 <_vfiprintf_r+0x110>
 8008098:	06d1      	lsls	r1, r2, #27
 800809a:	bf44      	itt	mi
 800809c:	2320      	movmi	r3, #32
 800809e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080a2:	0713      	lsls	r3, r2, #28
 80080a4:	bf44      	itt	mi
 80080a6:	232b      	movmi	r3, #43	@ 0x2b
 80080a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080ac:	f89a 3000 	ldrb.w	r3, [sl]
 80080b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80080b2:	d015      	beq.n	80080e0 <_vfiprintf_r+0x120>
 80080b4:	4654      	mov	r4, sl
 80080b6:	2000      	movs	r0, #0
 80080b8:	f04f 0c0a 	mov.w	ip, #10
 80080bc:	9a07      	ldr	r2, [sp, #28]
 80080be:	4621      	mov	r1, r4
 80080c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080c4:	3b30      	subs	r3, #48	@ 0x30
 80080c6:	2b09      	cmp	r3, #9
 80080c8:	d94b      	bls.n	8008162 <_vfiprintf_r+0x1a2>
 80080ca:	b1b0      	cbz	r0, 80080fa <_vfiprintf_r+0x13a>
 80080cc:	9207      	str	r2, [sp, #28]
 80080ce:	e014      	b.n	80080fa <_vfiprintf_r+0x13a>
 80080d0:	eba0 0308 	sub.w	r3, r0, r8
 80080d4:	fa09 f303 	lsl.w	r3, r9, r3
 80080d8:	4313      	orrs	r3, r2
 80080da:	46a2      	mov	sl, r4
 80080dc:	9304      	str	r3, [sp, #16]
 80080de:	e7d2      	b.n	8008086 <_vfiprintf_r+0xc6>
 80080e0:	9b03      	ldr	r3, [sp, #12]
 80080e2:	1d19      	adds	r1, r3, #4
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	9103      	str	r1, [sp, #12]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	bfbb      	ittet	lt
 80080ec:	425b      	neglt	r3, r3
 80080ee:	f042 0202 	orrlt.w	r2, r2, #2
 80080f2:	9307      	strge	r3, [sp, #28]
 80080f4:	9307      	strlt	r3, [sp, #28]
 80080f6:	bfb8      	it	lt
 80080f8:	9204      	strlt	r2, [sp, #16]
 80080fa:	7823      	ldrb	r3, [r4, #0]
 80080fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80080fe:	d10a      	bne.n	8008116 <_vfiprintf_r+0x156>
 8008100:	7863      	ldrb	r3, [r4, #1]
 8008102:	2b2a      	cmp	r3, #42	@ 0x2a
 8008104:	d132      	bne.n	800816c <_vfiprintf_r+0x1ac>
 8008106:	9b03      	ldr	r3, [sp, #12]
 8008108:	3402      	adds	r4, #2
 800810a:	1d1a      	adds	r2, r3, #4
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	9203      	str	r2, [sp, #12]
 8008110:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008114:	9305      	str	r3, [sp, #20]
 8008116:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80081e0 <_vfiprintf_r+0x220>
 800811a:	2203      	movs	r2, #3
 800811c:	4650      	mov	r0, sl
 800811e:	7821      	ldrb	r1, [r4, #0]
 8008120:	f7fe f969 	bl	80063f6 <memchr>
 8008124:	b138      	cbz	r0, 8008136 <_vfiprintf_r+0x176>
 8008126:	2240      	movs	r2, #64	@ 0x40
 8008128:	9b04      	ldr	r3, [sp, #16]
 800812a:	eba0 000a 	sub.w	r0, r0, sl
 800812e:	4082      	lsls	r2, r0
 8008130:	4313      	orrs	r3, r2
 8008132:	3401      	adds	r4, #1
 8008134:	9304      	str	r3, [sp, #16]
 8008136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800813a:	2206      	movs	r2, #6
 800813c:	4829      	ldr	r0, [pc, #164]	@ (80081e4 <_vfiprintf_r+0x224>)
 800813e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008142:	f7fe f958 	bl	80063f6 <memchr>
 8008146:	2800      	cmp	r0, #0
 8008148:	d03f      	beq.n	80081ca <_vfiprintf_r+0x20a>
 800814a:	4b27      	ldr	r3, [pc, #156]	@ (80081e8 <_vfiprintf_r+0x228>)
 800814c:	bb1b      	cbnz	r3, 8008196 <_vfiprintf_r+0x1d6>
 800814e:	9b03      	ldr	r3, [sp, #12]
 8008150:	3307      	adds	r3, #7
 8008152:	f023 0307 	bic.w	r3, r3, #7
 8008156:	3308      	adds	r3, #8
 8008158:	9303      	str	r3, [sp, #12]
 800815a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800815c:	443b      	add	r3, r7
 800815e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008160:	e76a      	b.n	8008038 <_vfiprintf_r+0x78>
 8008162:	460c      	mov	r4, r1
 8008164:	2001      	movs	r0, #1
 8008166:	fb0c 3202 	mla	r2, ip, r2, r3
 800816a:	e7a8      	b.n	80080be <_vfiprintf_r+0xfe>
 800816c:	2300      	movs	r3, #0
 800816e:	f04f 0c0a 	mov.w	ip, #10
 8008172:	4619      	mov	r1, r3
 8008174:	3401      	adds	r4, #1
 8008176:	9305      	str	r3, [sp, #20]
 8008178:	4620      	mov	r0, r4
 800817a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800817e:	3a30      	subs	r2, #48	@ 0x30
 8008180:	2a09      	cmp	r2, #9
 8008182:	d903      	bls.n	800818c <_vfiprintf_r+0x1cc>
 8008184:	2b00      	cmp	r3, #0
 8008186:	d0c6      	beq.n	8008116 <_vfiprintf_r+0x156>
 8008188:	9105      	str	r1, [sp, #20]
 800818a:	e7c4      	b.n	8008116 <_vfiprintf_r+0x156>
 800818c:	4604      	mov	r4, r0
 800818e:	2301      	movs	r3, #1
 8008190:	fb0c 2101 	mla	r1, ip, r1, r2
 8008194:	e7f0      	b.n	8008178 <_vfiprintf_r+0x1b8>
 8008196:	ab03      	add	r3, sp, #12
 8008198:	9300      	str	r3, [sp, #0]
 800819a:	462a      	mov	r2, r5
 800819c:	4630      	mov	r0, r6
 800819e:	4b13      	ldr	r3, [pc, #76]	@ (80081ec <_vfiprintf_r+0x22c>)
 80081a0:	a904      	add	r1, sp, #16
 80081a2:	f7fd fbb3 	bl	800590c <_printf_float>
 80081a6:	4607      	mov	r7, r0
 80081a8:	1c78      	adds	r0, r7, #1
 80081aa:	d1d6      	bne.n	800815a <_vfiprintf_r+0x19a>
 80081ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081ae:	07d9      	lsls	r1, r3, #31
 80081b0:	d405      	bmi.n	80081be <_vfiprintf_r+0x1fe>
 80081b2:	89ab      	ldrh	r3, [r5, #12]
 80081b4:	059a      	lsls	r2, r3, #22
 80081b6:	d402      	bmi.n	80081be <_vfiprintf_r+0x1fe>
 80081b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081ba:	f7fe f91b 	bl	80063f4 <__retarget_lock_release_recursive>
 80081be:	89ab      	ldrh	r3, [r5, #12]
 80081c0:	065b      	lsls	r3, r3, #25
 80081c2:	f53f af1f 	bmi.w	8008004 <_vfiprintf_r+0x44>
 80081c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081c8:	e71e      	b.n	8008008 <_vfiprintf_r+0x48>
 80081ca:	ab03      	add	r3, sp, #12
 80081cc:	9300      	str	r3, [sp, #0]
 80081ce:	462a      	mov	r2, r5
 80081d0:	4630      	mov	r0, r6
 80081d2:	4b06      	ldr	r3, [pc, #24]	@ (80081ec <_vfiprintf_r+0x22c>)
 80081d4:	a904      	add	r1, sp, #16
 80081d6:	f7fd fe37 	bl	8005e48 <_printf_i>
 80081da:	e7e4      	b.n	80081a6 <_vfiprintf_r+0x1e6>
 80081dc:	08008f95 	.word	0x08008f95
 80081e0:	08008f9b 	.word	0x08008f9b
 80081e4:	08008f9f 	.word	0x08008f9f
 80081e8:	0800590d 	.word	0x0800590d
 80081ec:	08007f9d 	.word	0x08007f9d

080081f0 <__swbuf_r>:
 80081f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f2:	460e      	mov	r6, r1
 80081f4:	4614      	mov	r4, r2
 80081f6:	4605      	mov	r5, r0
 80081f8:	b118      	cbz	r0, 8008202 <__swbuf_r+0x12>
 80081fa:	6a03      	ldr	r3, [r0, #32]
 80081fc:	b90b      	cbnz	r3, 8008202 <__swbuf_r+0x12>
 80081fe:	f7fd ffcd 	bl	800619c <__sinit>
 8008202:	69a3      	ldr	r3, [r4, #24]
 8008204:	60a3      	str	r3, [r4, #8]
 8008206:	89a3      	ldrh	r3, [r4, #12]
 8008208:	071a      	lsls	r2, r3, #28
 800820a:	d501      	bpl.n	8008210 <__swbuf_r+0x20>
 800820c:	6923      	ldr	r3, [r4, #16]
 800820e:	b943      	cbnz	r3, 8008222 <__swbuf_r+0x32>
 8008210:	4621      	mov	r1, r4
 8008212:	4628      	mov	r0, r5
 8008214:	f000 f82a 	bl	800826c <__swsetup_r>
 8008218:	b118      	cbz	r0, 8008222 <__swbuf_r+0x32>
 800821a:	f04f 37ff 	mov.w	r7, #4294967295
 800821e:	4638      	mov	r0, r7
 8008220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008222:	6823      	ldr	r3, [r4, #0]
 8008224:	6922      	ldr	r2, [r4, #16]
 8008226:	b2f6      	uxtb	r6, r6
 8008228:	1a98      	subs	r0, r3, r2
 800822a:	6963      	ldr	r3, [r4, #20]
 800822c:	4637      	mov	r7, r6
 800822e:	4283      	cmp	r3, r0
 8008230:	dc05      	bgt.n	800823e <__swbuf_r+0x4e>
 8008232:	4621      	mov	r1, r4
 8008234:	4628      	mov	r0, r5
 8008236:	f7ff fd9b 	bl	8007d70 <_fflush_r>
 800823a:	2800      	cmp	r0, #0
 800823c:	d1ed      	bne.n	800821a <__swbuf_r+0x2a>
 800823e:	68a3      	ldr	r3, [r4, #8]
 8008240:	3b01      	subs	r3, #1
 8008242:	60a3      	str	r3, [r4, #8]
 8008244:	6823      	ldr	r3, [r4, #0]
 8008246:	1c5a      	adds	r2, r3, #1
 8008248:	6022      	str	r2, [r4, #0]
 800824a:	701e      	strb	r6, [r3, #0]
 800824c:	6962      	ldr	r2, [r4, #20]
 800824e:	1c43      	adds	r3, r0, #1
 8008250:	429a      	cmp	r2, r3
 8008252:	d004      	beq.n	800825e <__swbuf_r+0x6e>
 8008254:	89a3      	ldrh	r3, [r4, #12]
 8008256:	07db      	lsls	r3, r3, #31
 8008258:	d5e1      	bpl.n	800821e <__swbuf_r+0x2e>
 800825a:	2e0a      	cmp	r6, #10
 800825c:	d1df      	bne.n	800821e <__swbuf_r+0x2e>
 800825e:	4621      	mov	r1, r4
 8008260:	4628      	mov	r0, r5
 8008262:	f7ff fd85 	bl	8007d70 <_fflush_r>
 8008266:	2800      	cmp	r0, #0
 8008268:	d0d9      	beq.n	800821e <__swbuf_r+0x2e>
 800826a:	e7d6      	b.n	800821a <__swbuf_r+0x2a>

0800826c <__swsetup_r>:
 800826c:	b538      	push	{r3, r4, r5, lr}
 800826e:	4b29      	ldr	r3, [pc, #164]	@ (8008314 <__swsetup_r+0xa8>)
 8008270:	4605      	mov	r5, r0
 8008272:	6818      	ldr	r0, [r3, #0]
 8008274:	460c      	mov	r4, r1
 8008276:	b118      	cbz	r0, 8008280 <__swsetup_r+0x14>
 8008278:	6a03      	ldr	r3, [r0, #32]
 800827a:	b90b      	cbnz	r3, 8008280 <__swsetup_r+0x14>
 800827c:	f7fd ff8e 	bl	800619c <__sinit>
 8008280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008284:	0719      	lsls	r1, r3, #28
 8008286:	d422      	bmi.n	80082ce <__swsetup_r+0x62>
 8008288:	06da      	lsls	r2, r3, #27
 800828a:	d407      	bmi.n	800829c <__swsetup_r+0x30>
 800828c:	2209      	movs	r2, #9
 800828e:	602a      	str	r2, [r5, #0]
 8008290:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008294:	f04f 30ff 	mov.w	r0, #4294967295
 8008298:	81a3      	strh	r3, [r4, #12]
 800829a:	e033      	b.n	8008304 <__swsetup_r+0x98>
 800829c:	0758      	lsls	r0, r3, #29
 800829e:	d512      	bpl.n	80082c6 <__swsetup_r+0x5a>
 80082a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082a2:	b141      	cbz	r1, 80082b6 <__swsetup_r+0x4a>
 80082a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082a8:	4299      	cmp	r1, r3
 80082aa:	d002      	beq.n	80082b2 <__swsetup_r+0x46>
 80082ac:	4628      	mov	r0, r5
 80082ae:	f7fe ff0f 	bl	80070d0 <_free_r>
 80082b2:	2300      	movs	r3, #0
 80082b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80082b6:	89a3      	ldrh	r3, [r4, #12]
 80082b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80082bc:	81a3      	strh	r3, [r4, #12]
 80082be:	2300      	movs	r3, #0
 80082c0:	6063      	str	r3, [r4, #4]
 80082c2:	6923      	ldr	r3, [r4, #16]
 80082c4:	6023      	str	r3, [r4, #0]
 80082c6:	89a3      	ldrh	r3, [r4, #12]
 80082c8:	f043 0308 	orr.w	r3, r3, #8
 80082cc:	81a3      	strh	r3, [r4, #12]
 80082ce:	6923      	ldr	r3, [r4, #16]
 80082d0:	b94b      	cbnz	r3, 80082e6 <__swsetup_r+0x7a>
 80082d2:	89a3      	ldrh	r3, [r4, #12]
 80082d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80082d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082dc:	d003      	beq.n	80082e6 <__swsetup_r+0x7a>
 80082de:	4621      	mov	r1, r4
 80082e0:	4628      	mov	r0, r5
 80082e2:	f000 f882 	bl	80083ea <__smakebuf_r>
 80082e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082ea:	f013 0201 	ands.w	r2, r3, #1
 80082ee:	d00a      	beq.n	8008306 <__swsetup_r+0x9a>
 80082f0:	2200      	movs	r2, #0
 80082f2:	60a2      	str	r2, [r4, #8]
 80082f4:	6962      	ldr	r2, [r4, #20]
 80082f6:	4252      	negs	r2, r2
 80082f8:	61a2      	str	r2, [r4, #24]
 80082fa:	6922      	ldr	r2, [r4, #16]
 80082fc:	b942      	cbnz	r2, 8008310 <__swsetup_r+0xa4>
 80082fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008302:	d1c5      	bne.n	8008290 <__swsetup_r+0x24>
 8008304:	bd38      	pop	{r3, r4, r5, pc}
 8008306:	0799      	lsls	r1, r3, #30
 8008308:	bf58      	it	pl
 800830a:	6962      	ldrpl	r2, [r4, #20]
 800830c:	60a2      	str	r2, [r4, #8]
 800830e:	e7f4      	b.n	80082fa <__swsetup_r+0x8e>
 8008310:	2000      	movs	r0, #0
 8008312:	e7f7      	b.n	8008304 <__swsetup_r+0x98>
 8008314:	20000028 	.word	0x20000028

08008318 <_raise_r>:
 8008318:	291f      	cmp	r1, #31
 800831a:	b538      	push	{r3, r4, r5, lr}
 800831c:	4605      	mov	r5, r0
 800831e:	460c      	mov	r4, r1
 8008320:	d904      	bls.n	800832c <_raise_r+0x14>
 8008322:	2316      	movs	r3, #22
 8008324:	6003      	str	r3, [r0, #0]
 8008326:	f04f 30ff 	mov.w	r0, #4294967295
 800832a:	bd38      	pop	{r3, r4, r5, pc}
 800832c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800832e:	b112      	cbz	r2, 8008336 <_raise_r+0x1e>
 8008330:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008334:	b94b      	cbnz	r3, 800834a <_raise_r+0x32>
 8008336:	4628      	mov	r0, r5
 8008338:	f000 f830 	bl	800839c <_getpid_r>
 800833c:	4622      	mov	r2, r4
 800833e:	4601      	mov	r1, r0
 8008340:	4628      	mov	r0, r5
 8008342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008346:	f000 b817 	b.w	8008378 <_kill_r>
 800834a:	2b01      	cmp	r3, #1
 800834c:	d00a      	beq.n	8008364 <_raise_r+0x4c>
 800834e:	1c59      	adds	r1, r3, #1
 8008350:	d103      	bne.n	800835a <_raise_r+0x42>
 8008352:	2316      	movs	r3, #22
 8008354:	6003      	str	r3, [r0, #0]
 8008356:	2001      	movs	r0, #1
 8008358:	e7e7      	b.n	800832a <_raise_r+0x12>
 800835a:	2100      	movs	r1, #0
 800835c:	4620      	mov	r0, r4
 800835e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008362:	4798      	blx	r3
 8008364:	2000      	movs	r0, #0
 8008366:	e7e0      	b.n	800832a <_raise_r+0x12>

08008368 <raise>:
 8008368:	4b02      	ldr	r3, [pc, #8]	@ (8008374 <raise+0xc>)
 800836a:	4601      	mov	r1, r0
 800836c:	6818      	ldr	r0, [r3, #0]
 800836e:	f7ff bfd3 	b.w	8008318 <_raise_r>
 8008372:	bf00      	nop
 8008374:	20000028 	.word	0x20000028

08008378 <_kill_r>:
 8008378:	b538      	push	{r3, r4, r5, lr}
 800837a:	2300      	movs	r3, #0
 800837c:	4d06      	ldr	r5, [pc, #24]	@ (8008398 <_kill_r+0x20>)
 800837e:	4604      	mov	r4, r0
 8008380:	4608      	mov	r0, r1
 8008382:	4611      	mov	r1, r2
 8008384:	602b      	str	r3, [r5, #0]
 8008386:	f7f9 fd06 	bl	8001d96 <_kill>
 800838a:	1c43      	adds	r3, r0, #1
 800838c:	d102      	bne.n	8008394 <_kill_r+0x1c>
 800838e:	682b      	ldr	r3, [r5, #0]
 8008390:	b103      	cbz	r3, 8008394 <_kill_r+0x1c>
 8008392:	6023      	str	r3, [r4, #0]
 8008394:	bd38      	pop	{r3, r4, r5, pc}
 8008396:	bf00      	nop
 8008398:	20000898 	.word	0x20000898

0800839c <_getpid_r>:
 800839c:	f7f9 bcf4 	b.w	8001d88 <_getpid>

080083a0 <__swhatbuf_r>:
 80083a0:	b570      	push	{r4, r5, r6, lr}
 80083a2:	460c      	mov	r4, r1
 80083a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083a8:	4615      	mov	r5, r2
 80083aa:	2900      	cmp	r1, #0
 80083ac:	461e      	mov	r6, r3
 80083ae:	b096      	sub	sp, #88	@ 0x58
 80083b0:	da0c      	bge.n	80083cc <__swhatbuf_r+0x2c>
 80083b2:	89a3      	ldrh	r3, [r4, #12]
 80083b4:	2100      	movs	r1, #0
 80083b6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80083ba:	bf14      	ite	ne
 80083bc:	2340      	movne	r3, #64	@ 0x40
 80083be:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80083c2:	2000      	movs	r0, #0
 80083c4:	6031      	str	r1, [r6, #0]
 80083c6:	602b      	str	r3, [r5, #0]
 80083c8:	b016      	add	sp, #88	@ 0x58
 80083ca:	bd70      	pop	{r4, r5, r6, pc}
 80083cc:	466a      	mov	r2, sp
 80083ce:	f000 f849 	bl	8008464 <_fstat_r>
 80083d2:	2800      	cmp	r0, #0
 80083d4:	dbed      	blt.n	80083b2 <__swhatbuf_r+0x12>
 80083d6:	9901      	ldr	r1, [sp, #4]
 80083d8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80083dc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80083e0:	4259      	negs	r1, r3
 80083e2:	4159      	adcs	r1, r3
 80083e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80083e8:	e7eb      	b.n	80083c2 <__swhatbuf_r+0x22>

080083ea <__smakebuf_r>:
 80083ea:	898b      	ldrh	r3, [r1, #12]
 80083ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083ee:	079d      	lsls	r5, r3, #30
 80083f0:	4606      	mov	r6, r0
 80083f2:	460c      	mov	r4, r1
 80083f4:	d507      	bpl.n	8008406 <__smakebuf_r+0x1c>
 80083f6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80083fa:	6023      	str	r3, [r4, #0]
 80083fc:	6123      	str	r3, [r4, #16]
 80083fe:	2301      	movs	r3, #1
 8008400:	6163      	str	r3, [r4, #20]
 8008402:	b003      	add	sp, #12
 8008404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008406:	466a      	mov	r2, sp
 8008408:	ab01      	add	r3, sp, #4
 800840a:	f7ff ffc9 	bl	80083a0 <__swhatbuf_r>
 800840e:	9f00      	ldr	r7, [sp, #0]
 8008410:	4605      	mov	r5, r0
 8008412:	4639      	mov	r1, r7
 8008414:	4630      	mov	r0, r6
 8008416:	f7fe fecd 	bl	80071b4 <_malloc_r>
 800841a:	b948      	cbnz	r0, 8008430 <__smakebuf_r+0x46>
 800841c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008420:	059a      	lsls	r2, r3, #22
 8008422:	d4ee      	bmi.n	8008402 <__smakebuf_r+0x18>
 8008424:	f023 0303 	bic.w	r3, r3, #3
 8008428:	f043 0302 	orr.w	r3, r3, #2
 800842c:	81a3      	strh	r3, [r4, #12]
 800842e:	e7e2      	b.n	80083f6 <__smakebuf_r+0xc>
 8008430:	89a3      	ldrh	r3, [r4, #12]
 8008432:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008436:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800843a:	81a3      	strh	r3, [r4, #12]
 800843c:	9b01      	ldr	r3, [sp, #4]
 800843e:	6020      	str	r0, [r4, #0]
 8008440:	b15b      	cbz	r3, 800845a <__smakebuf_r+0x70>
 8008442:	4630      	mov	r0, r6
 8008444:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008448:	f000 f81e 	bl	8008488 <_isatty_r>
 800844c:	b128      	cbz	r0, 800845a <__smakebuf_r+0x70>
 800844e:	89a3      	ldrh	r3, [r4, #12]
 8008450:	f023 0303 	bic.w	r3, r3, #3
 8008454:	f043 0301 	orr.w	r3, r3, #1
 8008458:	81a3      	strh	r3, [r4, #12]
 800845a:	89a3      	ldrh	r3, [r4, #12]
 800845c:	431d      	orrs	r5, r3
 800845e:	81a5      	strh	r5, [r4, #12]
 8008460:	e7cf      	b.n	8008402 <__smakebuf_r+0x18>
	...

08008464 <_fstat_r>:
 8008464:	b538      	push	{r3, r4, r5, lr}
 8008466:	2300      	movs	r3, #0
 8008468:	4d06      	ldr	r5, [pc, #24]	@ (8008484 <_fstat_r+0x20>)
 800846a:	4604      	mov	r4, r0
 800846c:	4608      	mov	r0, r1
 800846e:	4611      	mov	r1, r2
 8008470:	602b      	str	r3, [r5, #0]
 8008472:	f7f9 fcef 	bl	8001e54 <_fstat>
 8008476:	1c43      	adds	r3, r0, #1
 8008478:	d102      	bne.n	8008480 <_fstat_r+0x1c>
 800847a:	682b      	ldr	r3, [r5, #0]
 800847c:	b103      	cbz	r3, 8008480 <_fstat_r+0x1c>
 800847e:	6023      	str	r3, [r4, #0]
 8008480:	bd38      	pop	{r3, r4, r5, pc}
 8008482:	bf00      	nop
 8008484:	20000898 	.word	0x20000898

08008488 <_isatty_r>:
 8008488:	b538      	push	{r3, r4, r5, lr}
 800848a:	2300      	movs	r3, #0
 800848c:	4d05      	ldr	r5, [pc, #20]	@ (80084a4 <_isatty_r+0x1c>)
 800848e:	4604      	mov	r4, r0
 8008490:	4608      	mov	r0, r1
 8008492:	602b      	str	r3, [r5, #0]
 8008494:	f7f9 fced 	bl	8001e72 <_isatty>
 8008498:	1c43      	adds	r3, r0, #1
 800849a:	d102      	bne.n	80084a2 <_isatty_r+0x1a>
 800849c:	682b      	ldr	r3, [r5, #0]
 800849e:	b103      	cbz	r3, 80084a2 <_isatty_r+0x1a>
 80084a0:	6023      	str	r3, [r4, #0]
 80084a2:	bd38      	pop	{r3, r4, r5, pc}
 80084a4:	20000898 	.word	0x20000898

080084a8 <_init>:
 80084a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084aa:	bf00      	nop
 80084ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ae:	bc08      	pop	{r3}
 80084b0:	469e      	mov	lr, r3
 80084b2:	4770      	bx	lr

080084b4 <_fini>:
 80084b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b6:	bf00      	nop
 80084b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ba:	bc08      	pop	{r3}
 80084bc:	469e      	mov	lr, r3
 80084be:	4770      	bx	lr
